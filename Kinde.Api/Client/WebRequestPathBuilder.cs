/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;

namespace Kinde.Api.Client
{
    /// <summary>
    /// A URI builder
    /// </summary>
    class WebRequestPathBuilder
    {
            private string _baseUrl;
            private string _path;
            private string _query = "?";
            public WebRequestPathBuilder(string baseUrl, string path)
            {
                _baseUrl = baseUrl;
                _path = path;
            }

            public void AddPathParameters(Dictionary<string, string> parameters)
            {
                if (parameters == null) return;
                foreach (var parameter in parameters)
                {
                    var key = parameter.Key ?? string.Empty;
                    var val = parameter.Value ?? string.Empty;
                    _path = _path.Replace("{" + key + "}", Uri.EscapeDataString(val));
                }
            }

            public void AddQueryParameters(Multimap<string, string> parameters)
            {
                if (parameters == null) return;
                foreach (var parameter in parameters)
                {
                    var encodedKey = Uri.EscapeDataString(parameter.Key ?? string.Empty);
                    foreach (var value in parameter.Value)
                    {
                        var encodedVal = Uri.EscapeDataString(value ?? string.Empty);
                        _query += encodedKey + "=" + encodedVal + "&";
                    }
                }
            }

            public string GetFullUri()
            {
                return _baseUrl + _path + _query.Substring(0, _query.Length - 1);
            }
    }
}
