/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Kinde.Api.Client;
using Kinde.Api.Model;

namespace Kinde.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create application
        /// </summary>
        /// <remarks>
        /// Create a new client.  &lt;div&gt;   &lt;code&gt;create:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApplicationRequest"></param>
        /// <returns>CreateApplicationResponse</returns>
        CreateApplicationResponse CreateApplication(CreateApplicationRequest createApplicationRequest);

        /// <summary>
        /// Create application
        /// </summary>
        /// <remarks>
        /// Create a new client.  &lt;div&gt;   &lt;code&gt;create:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApplicationRequest"></param>
        /// <returns>ApiResponse of CreateApplicationResponse</returns>
        ApiResponse<CreateApplicationResponse> CreateApplicationWithHttpInfo(CreateApplicationRequest createApplicationRequest);
        /// <summary>
        /// Delete application
        /// </summary>
        /// <remarks>
        /// Delete a client / application.  &lt;div&gt;   &lt;code&gt;delete:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse DeleteApplication(string applicationId);

        /// <summary>
        /// Delete application
        /// </summary>
        /// <remarks>
        /// Delete a client / application.  &lt;div&gt;   &lt;code&gt;delete:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> DeleteApplicationWithHttpInfo(string applicationId);
        /// <summary>
        /// Enable connection
        /// </summary>
        /// <remarks>
        /// Enable an auth connection for an application.  &lt;div&gt;   &lt;code&gt;create:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <returns></returns>
        void EnableConnection(string applicationId, string connectionId);

        /// <summary>
        /// Enable connection
        /// </summary>
        /// <remarks>
        /// Enable an auth connection for an application.  &lt;div&gt;   &lt;code&gt;create:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EnableConnectionWithHttpInfo(string applicationId, string connectionId);
        /// <summary>
        /// Get application
        /// </summary>
        /// <remarks>
        /// Gets an application given the application&#39;s ID.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <returns>GetApplicationResponse</returns>
        GetApplicationResponse GetApplication(string applicationId);

        /// <summary>
        /// Get application
        /// </summary>
        /// <remarks>
        /// Gets an application given the application&#39;s ID.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <returns>ApiResponse of GetApplicationResponse</returns>
        ApiResponse<GetApplicationResponse> GetApplicationWithHttpInfo(string applicationId);
        /// <summary>
        /// Get connections
        /// </summary>
        /// <remarks>
        /// Gets all connections for an application.  &lt;div&gt;   &lt;code&gt;read:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <returns>GetConnectionsResponse</returns>
        GetConnectionsResponse GetApplicationConnections(string applicationId);

        /// <summary>
        /// Get connections
        /// </summary>
        /// <remarks>
        /// Gets all connections for an application.  &lt;div&gt;   &lt;code&gt;read:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <returns>ApiResponse of GetConnectionsResponse</returns>
        ApiResponse<GetConnectionsResponse> GetApplicationConnectionsWithHttpInfo(string applicationId);
        /// <summary>
        /// Get property values
        /// </summary>
        /// <remarks>
        /// Gets properties for an application by client ID.  &lt;div&gt;   &lt;code&gt;read:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <returns>GetPropertyValuesResponse</returns>
        GetPropertyValuesResponse GetApplicationPropertyValues(string applicationId);

        /// <summary>
        /// Get property values
        /// </summary>
        /// <remarks>
        /// Gets properties for an application by client ID.  &lt;div&gt;   &lt;code&gt;read:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <returns>ApiResponse of GetPropertyValuesResponse</returns>
        ApiResponse<GetPropertyValuesResponse> GetApplicationPropertyValuesWithHttpInfo(string applicationId);
        /// <summary>
        /// Get applications
        /// </summary>
        /// <remarks>
        /// Get a list of applications / clients.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <returns>GetApplicationsResponse</returns>
        GetApplicationsResponse GetApplications(string sort = default(string), int? pageSize = default(int?), string nextToken = default(string));

        /// <summary>
        /// Get applications
        /// </summary>
        /// <remarks>
        /// Get a list of applications / clients.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <returns>ApiResponse of GetApplicationsResponse</returns>
        ApiResponse<GetApplicationsResponse> GetApplicationsWithHttpInfo(string sort = default(string), int? pageSize = default(int?), string nextToken = default(string));
        /// <summary>
        /// Remove connection
        /// </summary>
        /// <remarks>
        /// Turn off an auth connection for an application  &lt;div&gt;   &lt;code&gt;delete:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse RemoveConnection(string applicationId, string connectionId);

        /// <summary>
        /// Remove connection
        /// </summary>
        /// <remarks>
        /// Turn off an auth connection for an application  &lt;div&gt;   &lt;code&gt;delete:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> RemoveConnectionWithHttpInfo(string applicationId, string connectionId);
        /// <summary>
        /// Update Application
        /// </summary>
        /// <remarks>
        /// Updates a client&#39;s settings. For more information, read [Applications in Kinde](https://docs.kinde.com/build/applications/about-applications)  &lt;div&gt;   &lt;code&gt;update:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="updateApplicationRequest">Application details. (optional)</param>
        /// <returns></returns>
        void UpdateApplication(string applicationId, UpdateApplicationRequest updateApplicationRequest = default(UpdateApplicationRequest));

        /// <summary>
        /// Update Application
        /// </summary>
        /// <remarks>
        /// Updates a client&#39;s settings. For more information, read [Applications in Kinde](https://docs.kinde.com/build/applications/about-applications)  &lt;div&gt;   &lt;code&gt;update:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="updateApplicationRequest">Application details. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateApplicationWithHttpInfo(string applicationId, UpdateApplicationRequest updateApplicationRequest = default(UpdateApplicationRequest));
        /// <summary>
        /// Update application tokens
        /// </summary>
        /// <remarks>
        /// Configure tokens for an application.   &lt;div&gt;     &lt;code&gt;update:application_tokens&lt;/code&gt;   &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="updateApplicationTokensRequest">Application tokens.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse UpdateApplicationTokens(string applicationId, UpdateApplicationTokensRequest updateApplicationTokensRequest);

        /// <summary>
        /// Update application tokens
        /// </summary>
        /// <remarks>
        /// Configure tokens for an application.   &lt;div&gt;     &lt;code&gt;update:application_tokens&lt;/code&gt;   &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="updateApplicationTokensRequest">Application tokens.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> UpdateApplicationTokensWithHttpInfo(string applicationId, UpdateApplicationTokensRequest updateApplicationTokensRequest);
        /// <summary>
        /// Update property
        /// </summary>
        /// <remarks>
        /// Update application property value.  &lt;div&gt;   &lt;code&gt;update:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <param name="propertyKey">The property&#39;s key.</param>
        /// <param name="updateApplicationsPropertyRequest"></param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse UpdateApplicationsProperty(string applicationId, string propertyKey, UpdateApplicationsPropertyRequest updateApplicationsPropertyRequest);

        /// <summary>
        /// Update property
        /// </summary>
        /// <remarks>
        /// Update application property value.  &lt;div&gt;   &lt;code&gt;update:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <param name="propertyKey">The property&#39;s key.</param>
        /// <param name="updateApplicationsPropertyRequest"></param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> UpdateApplicationsPropertyWithHttpInfo(string applicationId, string propertyKey, UpdateApplicationsPropertyRequest updateApplicationsPropertyRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create application
        /// </summary>
        /// <remarks>
        /// Create a new client.  &lt;div&gt;   &lt;code&gt;create:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApplicationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateApplicationResponse</returns>
        System.Threading.Tasks.Task<CreateApplicationResponse> CreateApplicationAsync(CreateApplicationRequest createApplicationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create application
        /// </summary>
        /// <remarks>
        /// Create a new client.  &lt;div&gt;   &lt;code&gt;create:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApplicationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateApplicationResponse>> CreateApplicationWithHttpInfoAsync(CreateApplicationRequest createApplicationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete application
        /// </summary>
        /// <remarks>
        /// Delete a client / application.  &lt;div&gt;   &lt;code&gt;delete:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> DeleteApplicationAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete application
        /// </summary>
        /// <remarks>
        /// Delete a client / application.  &lt;div&gt;   &lt;code&gt;delete:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> DeleteApplicationWithHttpInfoAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enable connection
        /// </summary>
        /// <remarks>
        /// Enable an auth connection for an application.  &lt;div&gt;   &lt;code&gt;create:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EnableConnectionAsync(string applicationId, string connectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enable connection
        /// </summary>
        /// <remarks>
        /// Enable an auth connection for an application.  &lt;div&gt;   &lt;code&gt;create:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EnableConnectionWithHttpInfoAsync(string applicationId, string connectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get application
        /// </summary>
        /// <remarks>
        /// Gets an application given the application&#39;s ID.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicationResponse</returns>
        System.Threading.Tasks.Task<GetApplicationResponse> GetApplicationAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get application
        /// </summary>
        /// <remarks>
        /// Gets an application given the application&#39;s ID.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApplicationResponse>> GetApplicationWithHttpInfoAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get connections
        /// </summary>
        /// <remarks>
        /// Gets all connections for an application.  &lt;div&gt;   &lt;code&gt;read:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectionsResponse</returns>
        System.Threading.Tasks.Task<GetConnectionsResponse> GetApplicationConnectionsAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get connections
        /// </summary>
        /// <remarks>
        /// Gets all connections for an application.  &lt;div&gt;   &lt;code&gt;read:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConnectionsResponse>> GetApplicationConnectionsWithHttpInfoAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get property values
        /// </summary>
        /// <remarks>
        /// Gets properties for an application by client ID.  &lt;div&gt;   &lt;code&gt;read:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPropertyValuesResponse</returns>
        System.Threading.Tasks.Task<GetPropertyValuesResponse> GetApplicationPropertyValuesAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get property values
        /// </summary>
        /// <remarks>
        /// Gets properties for an application by client ID.  &lt;div&gt;   &lt;code&gt;read:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPropertyValuesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPropertyValuesResponse>> GetApplicationPropertyValuesWithHttpInfoAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get applications
        /// </summary>
        /// <remarks>
        /// Get a list of applications / clients.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicationsResponse</returns>
        System.Threading.Tasks.Task<GetApplicationsResponse> GetApplicationsAsync(string sort = default(string), int? pageSize = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get applications
        /// </summary>
        /// <remarks>
        /// Get a list of applications / clients.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApplicationsResponse>> GetApplicationsWithHttpInfoAsync(string sort = default(string), int? pageSize = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove connection
        /// </summary>
        /// <remarks>
        /// Turn off an auth connection for an application  &lt;div&gt;   &lt;code&gt;delete:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> RemoveConnectionAsync(string applicationId, string connectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove connection
        /// </summary>
        /// <remarks>
        /// Turn off an auth connection for an application  &lt;div&gt;   &lt;code&gt;delete:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> RemoveConnectionWithHttpInfoAsync(string applicationId, string connectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Application
        /// </summary>
        /// <remarks>
        /// Updates a client&#39;s settings. For more information, read [Applications in Kinde](https://docs.kinde.com/build/applications/about-applications)  &lt;div&gt;   &lt;code&gt;update:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="updateApplicationRequest">Application details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateApplicationAsync(string applicationId, UpdateApplicationRequest updateApplicationRequest = default(UpdateApplicationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Application
        /// </summary>
        /// <remarks>
        /// Updates a client&#39;s settings. For more information, read [Applications in Kinde](https://docs.kinde.com/build/applications/about-applications)  &lt;div&gt;   &lt;code&gt;update:applications&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="updateApplicationRequest">Application details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApplicationWithHttpInfoAsync(string applicationId, UpdateApplicationRequest updateApplicationRequest = default(UpdateApplicationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update application tokens
        /// </summary>
        /// <remarks>
        /// Configure tokens for an application.   &lt;div&gt;     &lt;code&gt;update:application_tokens&lt;/code&gt;   &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="updateApplicationTokensRequest">Application tokens.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> UpdateApplicationTokensAsync(string applicationId, UpdateApplicationTokensRequest updateApplicationTokensRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update application tokens
        /// </summary>
        /// <remarks>
        /// Configure tokens for an application.   &lt;div&gt;     &lt;code&gt;update:application_tokens&lt;/code&gt;   &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="updateApplicationTokensRequest">Application tokens.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> UpdateApplicationTokensWithHttpInfoAsync(string applicationId, UpdateApplicationTokensRequest updateApplicationTokensRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update property
        /// </summary>
        /// <remarks>
        /// Update application property value.  &lt;div&gt;   &lt;code&gt;update:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <param name="propertyKey">The property&#39;s key.</param>
        /// <param name="updateApplicationsPropertyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> UpdateApplicationsPropertyAsync(string applicationId, string propertyKey, UpdateApplicationsPropertyRequest updateApplicationsPropertyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update property
        /// </summary>
        /// <remarks>
        /// Update application property value.  &lt;div&gt;   &lt;code&gt;update:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <param name="propertyKey">The property&#39;s key.</param>
        /// <param name="updateApplicationsPropertyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> UpdateApplicationsPropertyWithHttpInfoAsync(string applicationId, string propertyKey, UpdateApplicationsPropertyRequest updateApplicationsPropertyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationsApi : IApplicationsApiSync, IApplicationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationsApi : IDisposable, IApplicationsApi
    {
        private Kinde.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ApplicationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ApplicationsApi(string basePath)
        {
            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                new Kinde.Api.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ApplicationsApi(Kinde.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ApplicationsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ApplicationsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                new Kinde.Api.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Kinde.Api.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ApplicationsApi(HttpClient client, Kinde.Api.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Kinde.Api.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ApplicationsApi(Kinde.Api.Client.ISynchronousClient client, Kinde.Api.Client.IAsynchronousClient asyncClient, Kinde.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class
        /// using a client instance.
        /// </summary>
        /// <param name="client">The client API</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ApplicationsApi(Kinde.Api.Client.ApiClient client)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Client = client;
            this.AsynchronousClient = client;
            this.Configuration = Kinde.Api.Client.GlobalConfiguration.Instance;
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Kinde.Api.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kinde.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kinde.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kinde.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kinde.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create application Create a new client.  &lt;div&gt;   &lt;code&gt;create:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApplicationRequest"></param>
        /// <returns>CreateApplicationResponse</returns>
        public CreateApplicationResponse CreateApplication(CreateApplicationRequest createApplicationRequest)
        {
            Kinde.Api.Client.ApiResponse<CreateApplicationResponse> localVarResponse = CreateApplicationWithHttpInfo(createApplicationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create application Create a new client.  &lt;div&gt;   &lt;code&gt;create:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApplicationRequest"></param>
        /// <returns>ApiResponse of CreateApplicationResponse</returns>
        public Kinde.Api.Client.ApiResponse<CreateApplicationResponse> CreateApplicationWithHttpInfo(CreateApplicationRequest createApplicationRequest)
        {
            // verify the required parameter 'createApplicationRequest' is set
            if (createApplicationRequest == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'createApplicationRequest' when calling ApplicationsApi->CreateApplication");

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createApplicationRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateApplicationResponse>("/api/v1/applications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create application Create a new client.  &lt;div&gt;   &lt;code&gt;create:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApplicationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateApplicationResponse</returns>
        public async System.Threading.Tasks.Task<CreateApplicationResponse> CreateApplicationAsync(CreateApplicationRequest createApplicationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<CreateApplicationResponse> localVarResponse = await CreateApplicationWithHttpInfoAsync(createApplicationRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create application Create a new client.  &lt;div&gt;   &lt;code&gt;create:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApplicationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<CreateApplicationResponse>> CreateApplicationWithHttpInfoAsync(CreateApplicationRequest createApplicationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createApplicationRequest' is set
            if (createApplicationRequest == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'createApplicationRequest' when calling ApplicationsApi->CreateApplication");


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createApplicationRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateApplicationResponse>("/api/v1/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete application Delete a client / application.  &lt;div&gt;   &lt;code&gt;delete:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse DeleteApplication(string applicationId)
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = DeleteApplicationWithHttpInfo(applicationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete application Delete a client / application.  &lt;div&gt;   &lt;code&gt;delete:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.Api.Client.ApiResponse<SuccessResponse> DeleteApplicationWithHttpInfo(string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->DeleteApplication");

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SuccessResponse>("/api/v1/applications/{application_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete application Delete a client / application.  &lt;div&gt;   &lt;code&gt;delete:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> DeleteApplicationAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = await DeleteApplicationWithHttpInfoAsync(applicationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete application Delete a client / application.  &lt;div&gt;   &lt;code&gt;delete:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<SuccessResponse>> DeleteApplicationWithHttpInfoAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->DeleteApplication");


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SuccessResponse>("/api/v1/applications/{application_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable connection Enable an auth connection for an application.  &lt;div&gt;   &lt;code&gt;create:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <returns></returns>
        public void EnableConnection(string applicationId, string connectionId)
        {
            EnableConnectionWithHttpInfo(applicationId, connectionId);
        }

        /// <summary>
        /// Enable connection Enable an auth connection for an application.  &lt;div&gt;   &lt;code&gt;create:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Kinde.Api.Client.ApiResponse<Object> EnableConnectionWithHttpInfo(string applicationId, string connectionId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->EnableConnection");

            // verify the required parameter 'connectionId' is set
            if (connectionId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'connectionId' when calling ApplicationsApi->EnableConnection");

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connection_id", Kinde.Api.Client.ClientUtils.ParameterToString(connectionId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/applications/{application_id}/connections/{connection_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable connection Enable an auth connection for an application.  &lt;div&gt;   &lt;code&gt;create:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EnableConnectionAsync(string applicationId, string connectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await EnableConnectionWithHttpInfoAsync(applicationId, connectionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Enable connection Enable an auth connection for an application.  &lt;div&gt;   &lt;code&gt;create:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<Object>> EnableConnectionWithHttpInfoAsync(string applicationId, string connectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->EnableConnection");

            // verify the required parameter 'connectionId' is set
            if (connectionId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'connectionId' when calling ApplicationsApi->EnableConnection");


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connection_id", Kinde.Api.Client.ClientUtils.ParameterToString(connectionId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/applications/{application_id}/connections/{connection_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get application Gets an application given the application&#39;s ID.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <returns>GetApplicationResponse</returns>
        public GetApplicationResponse GetApplication(string applicationId)
        {
            Kinde.Api.Client.ApiResponse<GetApplicationResponse> localVarResponse = GetApplicationWithHttpInfo(applicationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get application Gets an application given the application&#39;s ID.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <returns>ApiResponse of GetApplicationResponse</returns>
        public Kinde.Api.Client.ApiResponse<GetApplicationResponse> GetApplicationWithHttpInfo(string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->GetApplication");

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetApplicationResponse>("/api/v1/applications/{application_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get application Gets an application given the application&#39;s ID.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicationResponse</returns>
        public async System.Threading.Tasks.Task<GetApplicationResponse> GetApplicationAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<GetApplicationResponse> localVarResponse = await GetApplicationWithHttpInfoAsync(applicationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get application Gets an application given the application&#39;s ID.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<GetApplicationResponse>> GetApplicationWithHttpInfoAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->GetApplication");


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetApplicationResponse>("/api/v1/applications/{application_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get connections Gets all connections for an application.  &lt;div&gt;   &lt;code&gt;read:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <returns>GetConnectionsResponse</returns>
        public GetConnectionsResponse GetApplicationConnections(string applicationId)
        {
            Kinde.Api.Client.ApiResponse<GetConnectionsResponse> localVarResponse = GetApplicationConnectionsWithHttpInfo(applicationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get connections Gets all connections for an application.  &lt;div&gt;   &lt;code&gt;read:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <returns>ApiResponse of GetConnectionsResponse</returns>
        public Kinde.Api.Client.ApiResponse<GetConnectionsResponse> GetApplicationConnectionsWithHttpInfo(string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->GetApplicationConnections");

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetConnectionsResponse>("/api/v1/applications/{application_id}/connections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationConnections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get connections Gets all connections for an application.  &lt;div&gt;   &lt;code&gt;read:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectionsResponse</returns>
        public async System.Threading.Tasks.Task<GetConnectionsResponse> GetApplicationConnectionsAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<GetConnectionsResponse> localVarResponse = await GetApplicationConnectionsWithHttpInfoAsync(applicationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get connections Gets all connections for an application.  &lt;div&gt;   &lt;code&gt;read:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectionsResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<GetConnectionsResponse>> GetApplicationConnectionsWithHttpInfoAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->GetApplicationConnections");


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetConnectionsResponse>("/api/v1/applications/{application_id}/connections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationConnections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get property values Gets properties for an application by client ID.  &lt;div&gt;   &lt;code&gt;read:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <returns>GetPropertyValuesResponse</returns>
        public GetPropertyValuesResponse GetApplicationPropertyValues(string applicationId)
        {
            Kinde.Api.Client.ApiResponse<GetPropertyValuesResponse> localVarResponse = GetApplicationPropertyValuesWithHttpInfo(applicationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get property values Gets properties for an application by client ID.  &lt;div&gt;   &lt;code&gt;read:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <returns>ApiResponse of GetPropertyValuesResponse</returns>
        public Kinde.Api.Client.ApiResponse<GetPropertyValuesResponse> GetApplicationPropertyValuesWithHttpInfo(string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->GetApplicationPropertyValues");

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPropertyValuesResponse>("/api/v1/applications/{application_id}/properties", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationPropertyValues", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get property values Gets properties for an application by client ID.  &lt;div&gt;   &lt;code&gt;read:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPropertyValuesResponse</returns>
        public async System.Threading.Tasks.Task<GetPropertyValuesResponse> GetApplicationPropertyValuesAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<GetPropertyValuesResponse> localVarResponse = await GetApplicationPropertyValuesWithHttpInfoAsync(applicationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get property values Gets properties for an application by client ID.  &lt;div&gt;   &lt;code&gt;read:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPropertyValuesResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<GetPropertyValuesResponse>> GetApplicationPropertyValuesWithHttpInfoAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->GetApplicationPropertyValues");


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPropertyValuesResponse>("/api/v1/applications/{application_id}/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationPropertyValues", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get applications Get a list of applications / clients.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <returns>GetApplicationsResponse</returns>
        public GetApplicationsResponse GetApplications(string sort = default(string), int? pageSize = default(int?), string nextToken = default(string))
        {
            Kinde.Api.Client.ApiResponse<GetApplicationsResponse> localVarResponse = GetApplicationsWithHttpInfo(sort, pageSize, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get applications Get a list of applications / clients.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <returns>ApiResponse of GetApplicationsResponse</returns>
        public Kinde.Api.Client.ApiResponse<GetApplicationsResponse> GetApplicationsWithHttpInfo(string sort = default(string), int? pageSize = default(int?), string nextToken = default(string))
        {
            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetApplicationsResponse>("/api/v1/applications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get applications Get a list of applications / clients.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicationsResponse</returns>
        public async System.Threading.Tasks.Task<GetApplicationsResponse> GetApplicationsAsync(string sort = default(string), int? pageSize = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<GetApplicationsResponse> localVarResponse = await GetApplicationsWithHttpInfoAsync(sort, pageSize, nextToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get applications Get a list of applications / clients.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicationsResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<GetApplicationsResponse>> GetApplicationsWithHttpInfoAsync(string sort = default(string), int? pageSize = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetApplicationsResponse>("/api/v1/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove connection Turn off an auth connection for an application  &lt;div&gt;   &lt;code&gt;delete:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse RemoveConnection(string applicationId, string connectionId)
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = RemoveConnectionWithHttpInfo(applicationId, connectionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove connection Turn off an auth connection for an application  &lt;div&gt;   &lt;code&gt;delete:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.Api.Client.ApiResponse<SuccessResponse> RemoveConnectionWithHttpInfo(string applicationId, string connectionId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->RemoveConnection");

            // verify the required parameter 'connectionId' is set
            if (connectionId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'connectionId' when calling ApplicationsApi->RemoveConnection");

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connection_id", Kinde.Api.Client.ClientUtils.ParameterToString(connectionId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SuccessResponse>("/api/v1/applications/{application_id}/connections/{connection_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove connection Turn off an auth connection for an application  &lt;div&gt;   &lt;code&gt;delete:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> RemoveConnectionAsync(string applicationId, string connectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = await RemoveConnectionWithHttpInfoAsync(applicationId, connectionId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove connection Turn off an auth connection for an application  &lt;div&gt;   &lt;code&gt;delete:application_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<SuccessResponse>> RemoveConnectionWithHttpInfoAsync(string applicationId, string connectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->RemoveConnection");

            // verify the required parameter 'connectionId' is set
            if (connectionId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'connectionId' when calling ApplicationsApi->RemoveConnection");


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connection_id", Kinde.Api.Client.ClientUtils.ParameterToString(connectionId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SuccessResponse>("/api/v1/applications/{application_id}/connections/{connection_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Application Updates a client&#39;s settings. For more information, read [Applications in Kinde](https://docs.kinde.com/build/applications/about-applications)  &lt;div&gt;   &lt;code&gt;update:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="updateApplicationRequest">Application details. (optional)</param>
        /// <returns></returns>
        public void UpdateApplication(string applicationId, UpdateApplicationRequest updateApplicationRequest = default(UpdateApplicationRequest))
        {
            UpdateApplicationWithHttpInfo(applicationId, updateApplicationRequest);
        }

        /// <summary>
        /// Update Application Updates a client&#39;s settings. For more information, read [Applications in Kinde](https://docs.kinde.com/build/applications/about-applications)  &lt;div&gt;   &lt;code&gt;update:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="updateApplicationRequest">Application details. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Kinde.Api.Client.ApiResponse<Object> UpdateApplicationWithHttpInfo(string applicationId, UpdateApplicationRequest updateApplicationRequest = default(UpdateApplicationRequest))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->UpdateApplication");

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = updateApplicationRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/v1/applications/{application_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Application Updates a client&#39;s settings. For more information, read [Applications in Kinde](https://docs.kinde.com/build/applications/about-applications)  &lt;div&gt;   &lt;code&gt;update:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="updateApplicationRequest">Application details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateApplicationAsync(string applicationId, UpdateApplicationRequest updateApplicationRequest = default(UpdateApplicationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateApplicationWithHttpInfoAsync(applicationId, updateApplicationRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Application Updates a client&#39;s settings. For more information, read [Applications in Kinde](https://docs.kinde.com/build/applications/about-applications)  &lt;div&gt;   &lt;code&gt;update:applications&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier for the application.</param>
        /// <param name="updateApplicationRequest">Application details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<Object>> UpdateApplicationWithHttpInfoAsync(string applicationId, UpdateApplicationRequest updateApplicationRequest = default(UpdateApplicationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->UpdateApplication");


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = updateApplicationRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/api/v1/applications/{application_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update application tokens Configure tokens for an application.   &lt;div&gt;     &lt;code&gt;update:application_tokens&lt;/code&gt;   &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="updateApplicationTokensRequest">Application tokens.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse UpdateApplicationTokens(string applicationId, UpdateApplicationTokensRequest updateApplicationTokensRequest)
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = UpdateApplicationTokensWithHttpInfo(applicationId, updateApplicationTokensRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update application tokens Configure tokens for an application.   &lt;div&gt;     &lt;code&gt;update:application_tokens&lt;/code&gt;   &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="updateApplicationTokensRequest">Application tokens.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.Api.Client.ApiResponse<SuccessResponse> UpdateApplicationTokensWithHttpInfo(string applicationId, UpdateApplicationTokensRequest updateApplicationTokensRequest)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->UpdateApplicationTokens");

            // verify the required parameter 'updateApplicationTokensRequest' is set
            if (updateApplicationTokensRequest == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'updateApplicationTokensRequest' when calling ApplicationsApi->UpdateApplicationTokens");

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = updateApplicationTokensRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<SuccessResponse>("/api/v1/applications/{application_id}/tokens", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApplicationTokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update application tokens Configure tokens for an application.   &lt;div&gt;     &lt;code&gt;update:application_tokens&lt;/code&gt;   &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="updateApplicationTokensRequest">Application tokens.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> UpdateApplicationTokensAsync(string applicationId, UpdateApplicationTokensRequest updateApplicationTokensRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = await UpdateApplicationTokensWithHttpInfoAsync(applicationId, updateApplicationTokensRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update application tokens Configure tokens for an application.   &lt;div&gt;     &lt;code&gt;update:application_tokens&lt;/code&gt;   &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The identifier/client ID for the application.</param>
        /// <param name="updateApplicationTokensRequest">Application tokens.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<SuccessResponse>> UpdateApplicationTokensWithHttpInfoAsync(string applicationId, UpdateApplicationTokensRequest updateApplicationTokensRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->UpdateApplicationTokens");

            // verify the required parameter 'updateApplicationTokensRequest' is set
            if (updateApplicationTokensRequest == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'updateApplicationTokensRequest' when calling ApplicationsApi->UpdateApplicationTokens");


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = updateApplicationTokensRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<SuccessResponse>("/api/v1/applications/{application_id}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApplicationTokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update property Update application property value.  &lt;div&gt;   &lt;code&gt;update:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <param name="propertyKey">The property&#39;s key.</param>
        /// <param name="updateApplicationsPropertyRequest"></param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse UpdateApplicationsProperty(string applicationId, string propertyKey, UpdateApplicationsPropertyRequest updateApplicationsPropertyRequest)
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = UpdateApplicationsPropertyWithHttpInfo(applicationId, propertyKey, updateApplicationsPropertyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update property Update application property value.  &lt;div&gt;   &lt;code&gt;update:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <param name="propertyKey">The property&#39;s key.</param>
        /// <param name="updateApplicationsPropertyRequest"></param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.Api.Client.ApiResponse<SuccessResponse> UpdateApplicationsPropertyWithHttpInfo(string applicationId, string propertyKey, UpdateApplicationsPropertyRequest updateApplicationsPropertyRequest)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->UpdateApplicationsProperty");

            // verify the required parameter 'propertyKey' is set
            if (propertyKey == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'propertyKey' when calling ApplicationsApi->UpdateApplicationsProperty");

            // verify the required parameter 'updateApplicationsPropertyRequest' is set
            if (updateApplicationsPropertyRequest == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'updateApplicationsPropertyRequest' when calling ApplicationsApi->UpdateApplicationsProperty");

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("property_key", Kinde.Api.Client.ClientUtils.ParameterToString(propertyKey)); // path parameter
            localVarRequestOptions.Data = updateApplicationsPropertyRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SuccessResponse>("/api/v1/applications/{application_id}/properties/{property_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApplicationsProperty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update property Update application property value.  &lt;div&gt;   &lt;code&gt;update:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <param name="propertyKey">The property&#39;s key.</param>
        /// <param name="updateApplicationsPropertyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> UpdateApplicationsPropertyAsync(string applicationId, string propertyKey, UpdateApplicationsPropertyRequest updateApplicationsPropertyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = await UpdateApplicationsPropertyWithHttpInfoAsync(applicationId, propertyKey, updateApplicationsPropertyRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update property Update application property value.  &lt;div&gt;   &lt;code&gt;update:application_properties&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application&#39;s ID / client ID.</param>
        /// <param name="propertyKey">The property&#39;s key.</param>
        /// <param name="updateApplicationsPropertyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<SuccessResponse>> UpdateApplicationsPropertyWithHttpInfoAsync(string applicationId, string propertyKey, UpdateApplicationsPropertyRequest updateApplicationsPropertyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->UpdateApplicationsProperty");

            // verify the required parameter 'propertyKey' is set
            if (propertyKey == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'propertyKey' when calling ApplicationsApi->UpdateApplicationsProperty");

            // verify the required parameter 'updateApplicationsPropertyRequest' is set
            if (updateApplicationsPropertyRequest == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'updateApplicationsPropertyRequest' when calling ApplicationsApi->UpdateApplicationsProperty");


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("application_id", Kinde.Api.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("property_key", Kinde.Api.Client.ClientUtils.ParameterToString(propertyKey)); // path parameter
            localVarRequestOptions.Data = updateApplicationsPropertyRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SuccessResponse>("/api/v1/applications/{application_id}/properties/{property_key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApplicationsProperty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}