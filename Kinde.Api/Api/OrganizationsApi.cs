/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Kinde.Api.Client;
using Kinde.Api.Model;

namespace Kinde.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign Users to an Organization
        /// </summary>
        /// <remarks>
        /// Add existing users to an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="addOrganizationUsersRequest"> (optional)</param>
        /// <returns>AddOrganizationUsersResponse</returns>
        AddOrganizationUsersResponse AddOrganizationUsers(string? code = default(string?), AddOrganizationUsersRequest? addOrganizationUsersRequest = default(AddOrganizationUsersRequest?));

        /// <summary>
        /// Assign Users to an Organization
        /// </summary>
        /// <remarks>
        /// Add existing users to an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="addOrganizationUsersRequest"> (optional)</param>
        /// <returns>ApiResponse of AddOrganizationUsersResponse</returns>
        ApiResponse<AddOrganizationUsersResponse> AddOrganizationUsersWithHttpInfo(string? code = default(string?), AddOrganizationUsersRequest? addOrganizationUsersRequest = default(AddOrganizationUsersRequest?));
        /// <summary>
        /// Create Organization
        /// </summary>
        /// <remarks>
        /// Create an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationRequest">Organization details. (optional)</param>
        /// <returns>CreateOrganizationResponse</returns>
        CreateOrganizationResponse CreateOrganization(CreateOrganizationRequest? createOrganizationRequest = default(CreateOrganizationRequest?));

        /// <summary>
        /// Create Organization
        /// </summary>
        /// <remarks>
        /// Create an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationRequest">Organization details. (optional)</param>
        /// <returns>ApiResponse of CreateOrganizationResponse</returns>
        ApiResponse<CreateOrganizationResponse> CreateOrganizationWithHttpInfo(CreateOrganizationRequest? createOrganizationRequest = default(CreateOrganizationRequest?));
        /// <summary>
        /// Delete organization feature flag override
        /// </summary>
        /// <remarks>
        /// Delete organization feature flag override.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse DeleteOrganizationFeatureFlagOverride(string orgCode, string featureFlagKey);

        /// <summary>
        /// Delete organization feature flag override
        /// </summary>
        /// <remarks>
        /// Delete organization feature flag override.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> DeleteOrganizationFeatureFlagOverrideWithHttpInfo(string orgCode, string featureFlagKey);
        /// <summary>
        /// Delete all organization feature flag overrides
        /// </summary>
        /// <remarks>
        /// Delete all organization feature flag overrides.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse DeleteOrganizationFeatureFlagOverrides(string orgCode);

        /// <summary>
        /// Delete all organization feature flag overrides
        /// </summary>
        /// <remarks>
        /// Delete all organization feature flag overrides.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> DeleteOrganizationFeatureFlagOverridesWithHttpInfo(string orgCode);
        /// <summary>
        /// Get Organization
        /// </summary>
        /// <remarks>
        /// Gets an organization given the organization&#39;s code. 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <returns>Organization</returns>
        Organization GetOrganization(string? code = default(string?));

        /// <summary>
        /// Get Organization
        /// </summary>
        /// <remarks>
        /// Gets an organization given the organization&#39;s code. 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> GetOrganizationWithHttpInfo(string? code = default(string?));
        /// <summary>
        /// List Organization Users
        /// </summary>
        /// <remarks>
        /// Get users in an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="permissions">Filter by user permissions (optional)</param>
        /// <returns>GetOrganizationsUsersResponse</returns>
        GetOrganizationsUsersResponse GetOrganizationUsers(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), string? code = default(string?), string? permissions = default(string?));

        /// <summary>
        /// List Organization Users
        /// </summary>
        /// <remarks>
        /// Get users in an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="permissions">Filter by user permissions (optional)</param>
        /// <returns>ApiResponse of GetOrganizationsUsersResponse</returns>
        ApiResponse<GetOrganizationsUsersResponse> GetOrganizationUsersWithHttpInfo(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), string? code = default(string?), string? permissions = default(string?));
        /// <summary>
        /// List Organizations
        /// </summary>
        /// <remarks>
        /// Get a list of organizations. 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <returns>GetOrganizationsResponse</returns>
        GetOrganizationsResponse GetOrganizations(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?));

        /// <summary>
        /// List Organizations
        /// </summary>
        /// <remarks>
        /// Get a list of organizations. 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <returns>ApiResponse of GetOrganizationsResponse</returns>
        ApiResponse<GetOrganizationsResponse> GetOrganizationsWithHttpInfo(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?));
        /// <summary>
        /// Remove Users from an Organization
        /// </summary>
        /// <remarks>
        /// Remove existing users from an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="removeOrganizationUsersRequest"> (optional)</param>
        /// <returns>RemoveOrganizationUsersResponse</returns>
        RemoveOrganizationUsersResponse RemoveOrganizationUsers(string? code = default(string?), RemoveOrganizationUsersRequest? removeOrganizationUsersRequest = default(RemoveOrganizationUsersRequest?));

        /// <summary>
        /// Remove Users from an Organization
        /// </summary>
        /// <remarks>
        /// Remove existing users from an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="removeOrganizationUsersRequest"> (optional)</param>
        /// <returns>ApiResponse of RemoveOrganizationUsersResponse</returns>
        ApiResponse<RemoveOrganizationUsersResponse> RemoveOrganizationUsersWithHttpInfo(string? code = default(string?), RemoveOrganizationUsersRequest? removeOrganizationUsersRequest = default(RemoveOrganizationUsersRequest?));
        /// <summary>
        /// Update Organization
        /// </summary>
        /// <remarks>
        /// Update an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="updateOrganizationRequest">Organization details. (optional)</param>
        /// <returns></returns>
        void UpdateOrganization(string orgCode, UpdateOrganizationRequest? updateOrganizationRequest = default(UpdateOrganizationRequest?));

        /// <summary>
        /// Update Organization
        /// </summary>
        /// <remarks>
        /// Update an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="updateOrganizationRequest">Organization details. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateOrganizationWithHttpInfo(string orgCode, UpdateOrganizationRequest? updateOrganizationRequest = default(UpdateOrganizationRequest?));
        /// <summary>
        /// Update organization feature flag override
        /// </summary>
        /// <remarks>
        /// Update organization feature flag override.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="featureFlagKey">The identifier for the feature flag</param>
        /// <param name="value">Override value</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse UpdateOrganizationFeatureFlagOverride(string orgCode, string featureFlagKey, string value);

        /// <summary>
        /// Update organization feature flag override
        /// </summary>
        /// <remarks>
        /// Update organization feature flag override.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="featureFlagKey">The identifier for the feature flag</param>
        /// <param name="value">Override value</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> UpdateOrganizationFeatureFlagOverrideWithHttpInfo(string orgCode, string featureFlagKey, string value);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Assign Users to an Organization
        /// </summary>
        /// <remarks>
        /// Add existing users to an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="addOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddOrganizationUsersResponse</returns>
        System.Threading.Tasks.Task<AddOrganizationUsersResponse> AddOrganizationUsersAsync(string? code = default(string?), AddOrganizationUsersRequest? addOrganizationUsersRequest = default(AddOrganizationUsersRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign Users to an Organization
        /// </summary>
        /// <remarks>
        /// Add existing users to an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="addOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddOrganizationUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddOrganizationUsersResponse>> AddOrganizationUsersWithHttpInfoAsync(string? code = default(string?), AddOrganizationUsersRequest? addOrganizationUsersRequest = default(AddOrganizationUsersRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Organization
        /// </summary>
        /// <remarks>
        /// Create an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationRequest">Organization details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateOrganizationResponse</returns>
        System.Threading.Tasks.Task<CreateOrganizationResponse> CreateOrganizationAsync(CreateOrganizationRequest? createOrganizationRequest = default(CreateOrganizationRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Organization
        /// </summary>
        /// <remarks>
        /// Create an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationRequest">Organization details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateOrganizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateOrganizationResponse>> CreateOrganizationWithHttpInfoAsync(CreateOrganizationRequest? createOrganizationRequest = default(CreateOrganizationRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete organization feature flag override
        /// </summary>
        /// <remarks>
        /// Delete organization feature flag override.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> DeleteOrganizationFeatureFlagOverrideAsync(string orgCode, string featureFlagKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete organization feature flag override
        /// </summary>
        /// <remarks>
        /// Delete organization feature flag override.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> DeleteOrganizationFeatureFlagOverrideWithHttpInfoAsync(string orgCode, string featureFlagKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all organization feature flag overrides
        /// </summary>
        /// <remarks>
        /// Delete all organization feature flag overrides.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> DeleteOrganizationFeatureFlagOverridesAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all organization feature flag overrides
        /// </summary>
        /// <remarks>
        /// Delete all organization feature flag overrides.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> DeleteOrganizationFeatureFlagOverridesWithHttpInfoAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Organization
        /// </summary>
        /// <remarks>
        /// Gets an organization given the organization&#39;s code. 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> GetOrganizationAsync(string? code = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Organization
        /// </summary>
        /// <remarks>
        /// Gets an organization given the organization&#39;s code. 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> GetOrganizationWithHttpInfoAsync(string? code = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Organization Users
        /// </summary>
        /// <remarks>
        /// Get users in an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="permissions">Filter by user permissions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOrganizationsUsersResponse</returns>
        System.Threading.Tasks.Task<GetOrganizationsUsersResponse> GetOrganizationUsersAsync(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), string? code = default(string?), string? permissions = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Organization Users
        /// </summary>
        /// <remarks>
        /// Get users in an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="permissions">Filter by user permissions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOrganizationsUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOrganizationsUsersResponse>> GetOrganizationUsersWithHttpInfoAsync(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), string? code = default(string?), string? permissions = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Organizations
        /// </summary>
        /// <remarks>
        /// Get a list of organizations. 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOrganizationsResponse</returns>
        System.Threading.Tasks.Task<GetOrganizationsResponse> GetOrganizationsAsync(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Organizations
        /// </summary>
        /// <remarks>
        /// Get a list of organizations. 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOrganizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOrganizationsResponse>> GetOrganizationsWithHttpInfoAsync(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Users from an Organization
        /// </summary>
        /// <remarks>
        /// Remove existing users from an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="removeOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveOrganizationUsersResponse</returns>
        System.Threading.Tasks.Task<RemoveOrganizationUsersResponse> RemoveOrganizationUsersAsync(string? code = default(string?), RemoveOrganizationUsersRequest? removeOrganizationUsersRequest = default(RemoveOrganizationUsersRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Users from an Organization
        /// </summary>
        /// <remarks>
        /// Remove existing users from an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="removeOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveOrganizationUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveOrganizationUsersResponse>> RemoveOrganizationUsersWithHttpInfoAsync(string? code = default(string?), RemoveOrganizationUsersRequest? removeOrganizationUsersRequest = default(RemoveOrganizationUsersRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Organization
        /// </summary>
        /// <remarks>
        /// Update an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="updateOrganizationRequest">Organization details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateOrganizationAsync(string orgCode, UpdateOrganizationRequest? updateOrganizationRequest = default(UpdateOrganizationRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Organization
        /// </summary>
        /// <remarks>
        /// Update an organization.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="updateOrganizationRequest">Organization details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOrganizationWithHttpInfoAsync(string orgCode, UpdateOrganizationRequest? updateOrganizationRequest = default(UpdateOrganizationRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update organization feature flag override
        /// </summary>
        /// <remarks>
        /// Update organization feature flag override.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="featureFlagKey">The identifier for the feature flag</param>
        /// <param name="value">Override value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> UpdateOrganizationFeatureFlagOverrideAsync(string orgCode, string featureFlagKey, string value, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update organization feature flag override
        /// </summary>
        /// <remarks>
        /// Update organization feature flag override.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="featureFlagKey">The identifier for the feature flag</param>
        /// <param name="value">Override value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> UpdateOrganizationFeatureFlagOverrideWithHttpInfoAsync(string orgCode, string featureFlagKey, string value, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationsApi : IOrganizationsApiSync, IOrganizationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganizationsApi : IDisposable, IOrganizationsApi
    {
        private Kinde.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public OrganizationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public OrganizationsApi(string basePath)
        {
            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                new Kinde.Api.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public OrganizationsApi(Kinde.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrganizationsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrganizationsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                new Kinde.Api.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Kinde.Api.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrganizationsApi(HttpClient client, Kinde.Api.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Kinde.Api.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public OrganizationsApi(Kinde.Api.Client.ISynchronousClient client, Kinde.Api.Client.IAsynchronousClient asyncClient, Kinde.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class
        /// using a client instance.
        /// </summary>
        /// <param name="client">The client API</param>
        /// <exception cref="ArgumentNullException"></exception>
        public OrganizationsApi(Kinde.Api.Client.ApiClient client)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Client = client;
            this.AsynchronousClient = client;
            this.Configuration = Kinde.Api.Client.GlobalConfiguration.Instance;
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Kinde.Api.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kinde.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kinde.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kinde.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kinde.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Assign Users to an Organization Add existing users to an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="addOrganizationUsersRequest"> (optional)</param>
        /// <returns>AddOrganizationUsersResponse</returns>
        public AddOrganizationUsersResponse AddOrganizationUsers(string? code = default(string?), AddOrganizationUsersRequest? addOrganizationUsersRequest = default(AddOrganizationUsersRequest?))
        {
            Kinde.Api.Client.ApiResponse<AddOrganizationUsersResponse> localVarResponse = AddOrganizationUsersWithHttpInfo(code, addOrganizationUsersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign Users to an Organization Add existing users to an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="addOrganizationUsersRequest"> (optional)</param>
        /// <returns>ApiResponse of AddOrganizationUsersResponse</returns>
        public Kinde.Api.Client.ApiResponse<AddOrganizationUsersResponse> AddOrganizationUsersWithHttpInfo(string? code = default(string?), AddOrganizationUsersRequest? addOrganizationUsersRequest = default(AddOrganizationUsersRequest?))
        {
            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            localVarRequestOptions.Data = addOrganizationUsersRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddOrganizationUsersResponse>("/api/v1/organization/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrganizationUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign Users to an Organization Add existing users to an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="addOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddOrganizationUsersResponse</returns>
        public async System.Threading.Tasks.Task<AddOrganizationUsersResponse> AddOrganizationUsersAsync(string? code = default(string?), AddOrganizationUsersRequest? addOrganizationUsersRequest = default(AddOrganizationUsersRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<AddOrganizationUsersResponse> localVarResponse = await AddOrganizationUsersWithHttpInfoAsync(code, addOrganizationUsersRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign Users to an Organization Add existing users to an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="addOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddOrganizationUsersResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<AddOrganizationUsersResponse>> AddOrganizationUsersWithHttpInfoAsync(string? code = default(string?), AddOrganizationUsersRequest? addOrganizationUsersRequest = default(AddOrganizationUsersRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            localVarRequestOptions.Data = addOrganizationUsersRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AddOrganizationUsersResponse>("/api/v1/organization/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrganizationUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Organization Create an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationRequest">Organization details. (optional)</param>
        /// <returns>CreateOrganizationResponse</returns>
        public CreateOrganizationResponse CreateOrganization(CreateOrganizationRequest? createOrganizationRequest = default(CreateOrganizationRequest?))
        {
            Kinde.Api.Client.ApiResponse<CreateOrganizationResponse> localVarResponse = CreateOrganizationWithHttpInfo(createOrganizationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Organization Create an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationRequest">Organization details. (optional)</param>
        /// <returns>ApiResponse of CreateOrganizationResponse</returns>
        public Kinde.Api.Client.ApiResponse<CreateOrganizationResponse> CreateOrganizationWithHttpInfo(CreateOrganizationRequest? createOrganizationRequest = default(CreateOrganizationRequest?))
        {
            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createOrganizationRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateOrganizationResponse>("/api/v1/organization", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrganization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Organization Create an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationRequest">Organization details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateOrganizationResponse</returns>
        public async System.Threading.Tasks.Task<CreateOrganizationResponse> CreateOrganizationAsync(CreateOrganizationRequest? createOrganizationRequest = default(CreateOrganizationRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<CreateOrganizationResponse> localVarResponse = await CreateOrganizationWithHttpInfoAsync(createOrganizationRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Organization Create an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationRequest">Organization details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateOrganizationResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<CreateOrganizationResponse>> CreateOrganizationWithHttpInfoAsync(CreateOrganizationRequest? createOrganizationRequest = default(CreateOrganizationRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createOrganizationRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateOrganizationResponse>("/api/v1/organization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrganization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete organization feature flag override Delete organization feature flag override.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse DeleteOrganizationFeatureFlagOverride(string orgCode, string featureFlagKey)
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = DeleteOrganizationFeatureFlagOverrideWithHttpInfo(orgCode, featureFlagKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete organization feature flag override Delete organization feature flag override.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.Api.Client.ApiResponse<SuccessResponse> DeleteOrganizationFeatureFlagOverrideWithHttpInfo(string orgCode, string featureFlagKey)
        {
            // verify the required parameter 'orgCode' is set
            if (orgCode == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'orgCode' when calling OrganizationsApi->DeleteOrganizationFeatureFlagOverride");

            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'featureFlagKey' when calling OrganizationsApi->DeleteOrganizationFeatureFlagOverride");

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("org_code", Kinde.Api.Client.ClientUtils.ParameterToString(orgCode)); // path parameter
            localVarRequestOptions.PathParameters.Add("feature_flag_key", Kinde.Api.Client.ClientUtils.ParameterToString(featureFlagKey)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SuccessResponse>("/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganizationFeatureFlagOverride", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete organization feature flag override Delete organization feature flag override.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> DeleteOrganizationFeatureFlagOverrideAsync(string orgCode, string featureFlagKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = await DeleteOrganizationFeatureFlagOverrideWithHttpInfoAsync(orgCode, featureFlagKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete organization feature flag override Delete organization feature flag override.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<SuccessResponse>> DeleteOrganizationFeatureFlagOverrideWithHttpInfoAsync(string orgCode, string featureFlagKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orgCode' is set
            if (orgCode == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'orgCode' when calling OrganizationsApi->DeleteOrganizationFeatureFlagOverride");

            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'featureFlagKey' when calling OrganizationsApi->DeleteOrganizationFeatureFlagOverride");


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("org_code", Kinde.Api.Client.ClientUtils.ParameterToString(orgCode)); // path parameter
            localVarRequestOptions.PathParameters.Add("feature_flag_key", Kinde.Api.Client.ClientUtils.ParameterToString(featureFlagKey)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SuccessResponse>("/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganizationFeatureFlagOverride", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all organization feature flag overrides Delete all organization feature flag overrides.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse DeleteOrganizationFeatureFlagOverrides(string orgCode)
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = DeleteOrganizationFeatureFlagOverridesWithHttpInfo(orgCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all organization feature flag overrides Delete all organization feature flag overrides.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.Api.Client.ApiResponse<SuccessResponse> DeleteOrganizationFeatureFlagOverridesWithHttpInfo(string orgCode)
        {
            // verify the required parameter 'orgCode' is set
            if (orgCode == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'orgCode' when calling OrganizationsApi->DeleteOrganizationFeatureFlagOverrides");

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("org_code", Kinde.Api.Client.ClientUtils.ParameterToString(orgCode)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SuccessResponse>("/api/v1/organizations/{org_code}/feature_flags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganizationFeatureFlagOverrides", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all organization feature flag overrides Delete all organization feature flag overrides.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> DeleteOrganizationFeatureFlagOverridesAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = await DeleteOrganizationFeatureFlagOverridesWithHttpInfoAsync(orgCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all organization feature flag overrides Delete all organization feature flag overrides.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<SuccessResponse>> DeleteOrganizationFeatureFlagOverridesWithHttpInfoAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orgCode' is set
            if (orgCode == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'orgCode' when calling OrganizationsApi->DeleteOrganizationFeatureFlagOverrides");


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("org_code", Kinde.Api.Client.ClientUtils.ParameterToString(orgCode)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SuccessResponse>("/api/v1/organizations/{org_code}/feature_flags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganizationFeatureFlagOverrides", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Organization Gets an organization given the organization&#39;s code. 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <returns>Organization</returns>
        public Organization GetOrganization(string? code = default(string?))
        {
            Kinde.Api.Client.ApiResponse<Organization> localVarResponse = GetOrganizationWithHttpInfo(code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Organization Gets an organization given the organization&#39;s code. 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <returns>ApiResponse of Organization</returns>
        public Kinde.Api.Client.ApiResponse<Organization> GetOrganizationWithHttpInfo(string? code = default(string?))
        {
            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Organization>("/api/v1/organization", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Organization Gets an organization given the organization&#39;s code. 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> GetOrganizationAsync(string? code = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<Organization> localVarResponse = await GetOrganizationWithHttpInfoAsync(code, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Organization Gets an organization given the organization&#39;s code. 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<Organization>> GetOrganizationWithHttpInfoAsync(string? code = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Organization>("/api/v1/organization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Organization Users Get users in an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="permissions">Filter by user permissions (optional)</param>
        /// <returns>GetOrganizationsUsersResponse</returns>
        public GetOrganizationsUsersResponse GetOrganizationUsers(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), string? code = default(string?), string? permissions = default(string?))
        {
            Kinde.Api.Client.ApiResponse<GetOrganizationsUsersResponse> localVarResponse = GetOrganizationUsersWithHttpInfo(sort, pageSize, nextToken, code, permissions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Organization Users Get users in an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="permissions">Filter by user permissions (optional)</param>
        /// <returns>ApiResponse of GetOrganizationsUsersResponse</returns>
        public Kinde.Api.Client.ApiResponse<GetOrganizationsUsersResponse> GetOrganizationUsersWithHttpInfo(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), string? code = default(string?), string? permissions = default(string?))
        {
            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "permissions", permissions));
            }

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetOrganizationsUsersResponse>("/api/v1/organization/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Organization Users Get users in an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="permissions">Filter by user permissions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOrganizationsUsersResponse</returns>
        public async System.Threading.Tasks.Task<GetOrganizationsUsersResponse> GetOrganizationUsersAsync(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), string? code = default(string?), string? permissions = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<GetOrganizationsUsersResponse> localVarResponse = await GetOrganizationUsersWithHttpInfoAsync(sort, pageSize, nextToken, code, permissions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Organization Users Get users in an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="permissions">Filter by user permissions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOrganizationsUsersResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<GetOrganizationsUsersResponse>> GetOrganizationUsersWithHttpInfoAsync(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), string? code = default(string?), string? permissions = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "permissions", permissions));
            }

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetOrganizationsUsersResponse>("/api/v1/organization/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Organizations Get a list of organizations. 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <returns>GetOrganizationsResponse</returns>
        public GetOrganizationsResponse GetOrganizations(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?))
        {
            Kinde.Api.Client.ApiResponse<GetOrganizationsResponse> localVarResponse = GetOrganizationsWithHttpInfo(sort, pageSize, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Organizations Get a list of organizations. 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <returns>ApiResponse of GetOrganizationsResponse</returns>
        public Kinde.Api.Client.ApiResponse<GetOrganizationsResponse> GetOrganizationsWithHttpInfo(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?))
        {
            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetOrganizationsResponse>("/api/v1/organizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Organizations Get a list of organizations. 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOrganizationsResponse</returns>
        public async System.Threading.Tasks.Task<GetOrganizationsResponse> GetOrganizationsAsync(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<GetOrganizationsResponse> localVarResponse = await GetOrganizationsWithHttpInfoAsync(sort, pageSize, nextToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Organizations Get a list of organizations. 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOrganizationsResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<GetOrganizationsResponse>> GetOrganizationsWithHttpInfoAsync(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetOrganizationsResponse>("/api/v1/organizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Users from an Organization Remove existing users from an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="removeOrganizationUsersRequest"> (optional)</param>
        /// <returns>RemoveOrganizationUsersResponse</returns>
        public RemoveOrganizationUsersResponse RemoveOrganizationUsers(string? code = default(string?), RemoveOrganizationUsersRequest? removeOrganizationUsersRequest = default(RemoveOrganizationUsersRequest?))
        {
            Kinde.Api.Client.ApiResponse<RemoveOrganizationUsersResponse> localVarResponse = RemoveOrganizationUsersWithHttpInfo(code, removeOrganizationUsersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Users from an Organization Remove existing users from an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="removeOrganizationUsersRequest"> (optional)</param>
        /// <returns>ApiResponse of RemoveOrganizationUsersResponse</returns>
        public Kinde.Api.Client.ApiResponse<RemoveOrganizationUsersResponse> RemoveOrganizationUsersWithHttpInfo(string? code = default(string?), RemoveOrganizationUsersRequest? removeOrganizationUsersRequest = default(RemoveOrganizationUsersRequest?))
        {
            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            localVarRequestOptions.Data = removeOrganizationUsersRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<RemoveOrganizationUsersResponse>("/api/v1/organization/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveOrganizationUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Users from an Organization Remove existing users from an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="removeOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveOrganizationUsersResponse</returns>
        public async System.Threading.Tasks.Task<RemoveOrganizationUsersResponse> RemoveOrganizationUsersAsync(string? code = default(string?), RemoveOrganizationUsersRequest? removeOrganizationUsersRequest = default(RemoveOrganizationUsersRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<RemoveOrganizationUsersResponse> localVarResponse = await RemoveOrganizationUsersWithHttpInfoAsync(code, removeOrganizationUsersRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Users from an Organization Remove existing users from an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="removeOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveOrganizationUsersResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<RemoveOrganizationUsersResponse>> RemoveOrganizationUsersWithHttpInfoAsync(string? code = default(string?), RemoveOrganizationUsersRequest? removeOrganizationUsersRequest = default(RemoveOrganizationUsersRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            localVarRequestOptions.Data = removeOrganizationUsersRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<RemoveOrganizationUsersResponse>("/api/v1/organization/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveOrganizationUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Organization Update an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="updateOrganizationRequest">Organization details. (optional)</param>
        /// <returns></returns>
        public void UpdateOrganization(string orgCode, UpdateOrganizationRequest? updateOrganizationRequest = default(UpdateOrganizationRequest?))
        {
            UpdateOrganizationWithHttpInfo(orgCode, updateOrganizationRequest);
        }

        /// <summary>
        /// Update Organization Update an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="updateOrganizationRequest">Organization details. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Kinde.Api.Client.ApiResponse<Object> UpdateOrganizationWithHttpInfo(string orgCode, UpdateOrganizationRequest? updateOrganizationRequest = default(UpdateOrganizationRequest?))
        {
            // verify the required parameter 'orgCode' is set
            if (orgCode == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'orgCode' when calling OrganizationsApi->UpdateOrganization");

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("org_code", Kinde.Api.Client.ClientUtils.ParameterToString(orgCode)); // path parameter
            localVarRequestOptions.Data = updateOrganizationRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/v1/organizations/{org_code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrganization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Organization Update an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="updateOrganizationRequest">Organization details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateOrganizationAsync(string orgCode, UpdateOrganizationRequest? updateOrganizationRequest = default(UpdateOrganizationRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateOrganizationWithHttpInfoAsync(orgCode, updateOrganizationRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Organization Update an organization.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="updateOrganizationRequest">Organization details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<Object>> UpdateOrganizationWithHttpInfoAsync(string orgCode, UpdateOrganizationRequest? updateOrganizationRequest = default(UpdateOrganizationRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orgCode' is set
            if (orgCode == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'orgCode' when calling OrganizationsApi->UpdateOrganization");


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("org_code", Kinde.Api.Client.ClientUtils.ParameterToString(orgCode)); // path parameter
            localVarRequestOptions.Data = updateOrganizationRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/api/v1/organizations/{org_code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrganization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update organization feature flag override Update organization feature flag override.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="featureFlagKey">The identifier for the feature flag</param>
        /// <param name="value">Override value</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse UpdateOrganizationFeatureFlagOverride(string orgCode, string featureFlagKey, string value)
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = UpdateOrganizationFeatureFlagOverrideWithHttpInfo(orgCode, featureFlagKey, value);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update organization feature flag override Update organization feature flag override.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="featureFlagKey">The identifier for the feature flag</param>
        /// <param name="value">Override value</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.Api.Client.ApiResponse<SuccessResponse> UpdateOrganizationFeatureFlagOverrideWithHttpInfo(string orgCode, string featureFlagKey, string value)
        {
            // verify the required parameter 'orgCode' is set
            if (orgCode == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'orgCode' when calling OrganizationsApi->UpdateOrganizationFeatureFlagOverride");

            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'featureFlagKey' when calling OrganizationsApi->UpdateOrganizationFeatureFlagOverride");

            // verify the required parameter 'value' is set
            if (value == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'value' when calling OrganizationsApi->UpdateOrganizationFeatureFlagOverride");

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("org_code", Kinde.Api.Client.ClientUtils.ParameterToString(orgCode)); // path parameter
            localVarRequestOptions.PathParameters.Add("feature_flag_key", Kinde.Api.Client.ClientUtils.ParameterToString(featureFlagKey)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "value", value));

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<SuccessResponse>("/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrganizationFeatureFlagOverride", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update organization feature flag override Update organization feature flag override.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="featureFlagKey">The identifier for the feature flag</param>
        /// <param name="value">Override value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> UpdateOrganizationFeatureFlagOverrideAsync(string orgCode, string featureFlagKey, string value, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = await UpdateOrganizationFeatureFlagOverrideWithHttpInfoAsync(orgCode, featureFlagKey, value, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update organization feature flag override Update organization feature flag override.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="featureFlagKey">The identifier for the feature flag</param>
        /// <param name="value">Override value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<SuccessResponse>> UpdateOrganizationFeatureFlagOverrideWithHttpInfoAsync(string orgCode, string featureFlagKey, string value, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orgCode' is set
            if (orgCode == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'orgCode' when calling OrganizationsApi->UpdateOrganizationFeatureFlagOverride");

            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'featureFlagKey' when calling OrganizationsApi->UpdateOrganizationFeatureFlagOverride");

            // verify the required parameter 'value' is set
            if (value == null)
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'value' when calling OrganizationsApi->UpdateOrganizationFeatureFlagOverride");


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("org_code", Kinde.Api.Client.ClientUtils.ParameterToString(orgCode)); // path parameter
            localVarRequestOptions.PathParameters.Add("feature_flag_key", Kinde.Api.Client.ClientUtils.ParameterToString(featureFlagKey)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "value", value));

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<SuccessResponse>("/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrganizationFeatureFlagOverride", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}