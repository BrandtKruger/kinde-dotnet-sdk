/*
 * Kinde Accounts API
 *
 * API for querying the current user's permissions, roles, entitlements, and feature flags
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kinde.Accounts.Client.OpenAPIDateConverter;

namespace Kinde.Accounts.Model
{
    /// <summary>
    /// FeatureFlagsResponseData
    /// </summary>
    [DataContract(Name = "FeatureFlagsResponse_data")]
    public partial class FeatureFlagsResponseData : IEquatable<FeatureFlagsResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlagsResponseData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeatureFlagsResponseData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlagsResponseData" /> class.
        /// </summary>
        /// <param name="featureFlags">featureFlags (required).</param>
        public FeatureFlagsResponseData(List<FeatureFlag> featureFlags = default(List<FeatureFlag>))
        {
            // to ensure "featureFlags" is required (not null)
            if (featureFlags == null)
            {
                throw new ArgumentNullException("featureFlags is a required property for FeatureFlagsResponseData and cannot be null");
            }
            this.FeatureFlags = featureFlags;
        }

        /// <summary>
        /// Gets or Sets FeatureFlags
        /// </summary>
        [DataMember(Name = "feature_flags", IsRequired = true, EmitDefaultValue = true)]
        public List<FeatureFlag> FeatureFlags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeatureFlagsResponseData {\n");
            sb.Append("  FeatureFlags: ").Append(FeatureFlags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureFlagsResponseData);
        }

        /// <summary>
        /// Returns true if FeatureFlagsResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureFlagsResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureFlagsResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FeatureFlags == input.FeatureFlags ||
                    this.FeatureFlags != null &&
                    input.FeatureFlags != null &&
                    this.FeatureFlags.SequenceEqual(input.FeatureFlags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeatureFlags != null)
                {
                    hashCode = (hashCode * 59) + this.FeatureFlags.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
