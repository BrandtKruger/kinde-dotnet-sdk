/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    [DataContract(Name = "CreateFeatureFlag_request")]
    public partial class CreateFeatureFlagRequest : IEquatable<CreateFeatureFlagRequest>
    {
        /// <summary>
        /// The variable type.
        /// </summary>
        /// <value>The variable type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Str for value: str
            /// </summary>
            [EnumMember(Value = "str")]
            Str = 1,

            /// <summary>
            /// Enum Int for value: int
            /// </summary>
            [EnumMember(Value = "int")]
            Int = 2,

            /// <summary>
            /// Enum Bool for value: bool
            /// </summary>
            [EnumMember(Value = "bool")]
            Bool = 3
        }


        /// <summary>
        /// The variable type.
        /// </summary>
        /// <value>The variable type.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Allow the flag to be overridden at a different level.
        /// </summary>
        /// <value>Allow the flag to be overridden at a different level.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AllowOverrideLevelEnum
        {
            /// <summary>
            /// Enum Env for value: env
            /// </summary>
            [EnumMember(Value = "env")]
            Env = 1,

            /// <summary>
            /// Enum Org for value: org
            /// </summary>
            [EnumMember(Value = "org")]
            Org = 2,

            /// <summary>
            /// Enum Usr for value: usr
            /// </summary>
            [EnumMember(Value = "usr")]
            Usr = 3
        }


        /// <summary>
        /// Allow the flag to be overridden at a different level.
        /// </summary>
        /// <value>Allow the flag to be overridden at a different level.</value>
        [DataMember(Name = "allow_override_level", EmitDefaultValue = false)]
        public AllowOverrideLevelEnum? AllowOverrideLevel { get; set; }
        /// <summary>
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateFeatureFlagRequest() { }
        /// <summary>
        /// </summary>
        /// <param name="name">The name of the flag. (required).</param>
        /// <param name="description">Description of the flag purpose..</param>
        /// <param name="key">The flag identifier to use in code. (required).</param>
        /// <param name="type">The variable type. (required).</param>
        /// <param name="defaultValue">Default value for the flag used by environments and organizations. (required).</param>
        public CreateFeatureFlagRequest(string name = default(string), string description = default(string), string key = default(string), TypeEnum type = default(TypeEnum), AllowOverrideLevelEnum? allowOverrideLevel = default(AllowOverrideLevelEnum?), string defaultValue = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateFeatureFlagRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for CreateFeatureFlagRequest and cannot be null");
            }
            this.Key = key;
            this.Type = type;
            // to ensure "defaultValue" is required (not null)
            if (defaultValue == null)
            {
                throw new ArgumentNullException("defaultValue is a required property for CreateFeatureFlagRequest and cannot be null");
            }
            this.DefaultValue = defaultValue;
            this.Description = description;
            this.AllowOverrideLevel = allowOverrideLevel;
        }

        /// <summary>
        /// The name of the flag.
        /// </summary>
        /// <value>The name of the flag.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the flag purpose.
        /// </summary>
        /// <value>Description of the flag purpose.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The flag identifier to use in code.
        /// </summary>
        /// <value>The flag identifier to use in code.</value>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// Default value for the flag used by environments and organizations.
        /// </summary>
        /// <value>Default value for the flag used by environments and organizations.</value>
        [DataMember(Name = "default_value", IsRequired = true, EmitDefaultValue = true)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateFeatureFlagRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AllowOverrideLevel: ").Append(AllowOverrideLevel).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateFeatureFlagRequest);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFeatureFlagRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.AllowOverrideLevel == input.AllowOverrideLevel ||
                    this.AllowOverrideLevel.Equals(input.AllowOverrideLevel)
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowOverrideLevel.GetHashCode();
                if (this.DefaultValue != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultValue.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
