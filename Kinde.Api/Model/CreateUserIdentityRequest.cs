/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// CreateUserIdentityRequest
    /// </summary>
    [DataContract(Name = "CreateUserIdentity_request")]
    public partial class CreateUserIdentityRequest : IEquatable<CreateUserIdentityRequest>, IValidatableObject
    {
        /// <summary>
        /// The identity type
        /// </summary>
        /// <value>The identity type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 1,

            /// <summary>
            /// Enum Username for value: username
            /// </summary>
            [EnumMember(Value = "username")]
            Username = 2,

            /// <summary>
            /// Enum Phone for value: phone
            /// </summary>
            [EnumMember(Value = "phone")]
            Phone = 3
        }


        /// <summary>
        /// The identity type
        /// </summary>
        /// <value>The identity type</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserIdentityRequest" /> class.
        /// </summary>
        /// <param name="value">The email address, or username of the user..</param>
        /// <param name="type">The identity type.</param>
        /// <param name="phoneCountryId">The country code for the phone number, only required when identity type is &#39;phone&#39;..</param>
        public CreateUserIdentityRequest(string value = default(string), TypeEnum? type = default(TypeEnum?), string phoneCountryId = default(string))
        {
            this.Value = value;
            this.Type = type;
            this.PhoneCountryId = phoneCountryId;
        }

        /// <summary>
        /// The email address, or username of the user.
        /// </summary>
        /// <value>The email address, or username of the user.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// The country code for the phone number, only required when identity type is &#39;phone&#39;.
        /// </summary>
        /// <value>The country code for the phone number, only required when identity type is &#39;phone&#39;.</value>
        [DataMember(Name = "phone_country_id", EmitDefaultValue = false)]
        public string PhoneCountryId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateUserIdentityRequest {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PhoneCountryId: ").Append(PhoneCountryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateUserIdentityRequest);
        }

        /// <summary>
        /// Returns true if CreateUserIdentityRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateUserIdentityRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateUserIdentityRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.PhoneCountryId == input.PhoneCountryId ||
                    (this.PhoneCountryId != null &&
                    this.PhoneCountryId.Equals(input.PhoneCountryId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.PhoneCountryId != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneCountryId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
