/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    [DataContract(Name = "get_application_response_application")]
    public partial class GetApplicationResponseApplication : IEquatable<GetApplicationResponseApplication>
    {
        /// <summary>
        /// The application&#39;s type.
        /// </summary>
        /// <value>The application&#39;s type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum M2m for value: m2m
            /// </summary>
            [EnumMember(Value = "m2m")]
            M2m = 1,

            /// <summary>
            /// Enum Reg for value: reg
            /// </summary>
            [EnumMember(Value = "reg")]
            Reg = 2,

            /// <summary>
            /// Enum Spa for value: spa
            /// </summary>
            [EnumMember(Value = "spa")]
            Spa = 3
        }


        /// <summary>
        /// The application&#39;s type.
        /// </summary>
        /// <value>The application&#39;s type.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// </summary>
        /// <param name="id">The application&#39;s identifier..</param>
        /// <param name="name">The application&#39;s name..</param>
        /// <param name="type">The application&#39;s type..</param>
        /// <param name="clientId">The application&#39;s client ID..</param>
        /// <param name="clientSecret">The application&#39;s client secret..</param>
        /// <param name="loginUri">The default login route for resolving session issues..</param>
        /// <param name="homepageUri">The homepage link to your application..</param>
        public GetApplicationResponseApplication(string id = default(string), string name = default(string), TypeEnum? type = default(TypeEnum?), string clientId = default(string), string clientSecret = default(string), string loginUri = default(string), string homepageUri = default(string), bool hasCancelButton = default(bool))
        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.LoginUri = loginUri;
            this.HomepageUri = homepageUri;
            this.HasCancelButton = hasCancelButton;
        }

        /// <summary>
        /// The application&#39;s identifier.
        /// </summary>
        /// <value>The application&#39;s identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The application&#39;s name.
        /// </summary>
        /// <value>The application&#39;s name.</value>
        /// <example>My React app</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The application&#39;s client ID.
        /// </summary>
        /// <value>The application&#39;s client ID.</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// The application&#39;s client secret.
        /// </summary>
        /// <value>The application&#39;s client secret.</value>
        [DataMember(Name = "client_secret", EmitDefaultValue = false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// The default login route for resolving session issues.
        /// </summary>
        /// <value>The default login route for resolving session issues.</value>
        [DataMember(Name = "login_uri", EmitDefaultValue = false)]
        public string LoginUri { get; set; }

        /// <summary>
        /// The homepage link to your application.
        /// </summary>
        /// <value>The homepage link to your application.</value>
        /// <example>https://yourapp.com</example>
        [DataMember(Name = "homepage_uri", EmitDefaultValue = false)]
        public string HomepageUri { get; set; }

        /// <summary>
        /// Whether the application has a cancel button to allow users to exit the auth flow [Beta].
        /// </summary>
        /// <value>Whether the application has a cancel button to allow users to exit the auth flow [Beta].</value>
        /// <example>false</example>
        [DataMember(Name = "has_cancel_button", EmitDefaultValue = true)]
        public bool HasCancelButton { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetApplicationResponseApplication {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  LoginUri: ").Append(LoginUri).Append("\n");
            sb.Append("  HomepageUri: ").Append(HomepageUri).Append("\n");
            sb.Append("  HasCancelButton: ").Append(HasCancelButton).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetApplicationResponseApplication);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(GetApplicationResponseApplication input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.LoginUri == input.LoginUri ||
                    (this.LoginUri != null &&
                    this.LoginUri.Equals(input.LoginUri))
                ) && 
                (
                    this.HomepageUri == input.HomepageUri ||
                    (this.HomepageUri != null &&
                    this.HomepageUri.Equals(input.HomepageUri))
                ) && 
                (
                    this.HasCancelButton == input.HasCancelButton ||
                    this.HasCancelButton.Equals(input.HasCancelButton)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ClientSecret != null)
                {
                    hashCode = (hashCode * 59) + this.ClientSecret.GetHashCode();
                }
                if (this.LoginUri != null)
                {
                    hashCode = (hashCode * 59) + this.LoginUri.GetHashCode();
                }
                if (this.HomepageUri != null)
                {
                    hashCode = (hashCode * 59) + this.HomepageUri.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasCancelButton.GetHashCode();
                return hashCode;
            }
        }

    }

}
