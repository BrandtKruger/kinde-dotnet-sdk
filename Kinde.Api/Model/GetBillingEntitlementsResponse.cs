/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetBillingEntitlementsResponse
    /// </summary>
    [DataContract(Name = "get_billing_entitlements_response")]
    public partial class GetBillingEntitlementsResponse : IEquatable<GetBillingEntitlementsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBillingEntitlementsResponse" /> class.
        /// </summary>
        /// <param name="code">Response code..</param>
        /// <param name="message">Response message..</param>
        /// <param name="hasMore">Whether more records exist..</param>
        /// <param name="entitlements">A list of entitlements.</param>
        /// <param name="plans">A list of plans..</param>
        public GetBillingEntitlementsResponse(string code = default(string), string message = default(string), bool hasMore = default(bool), List<GetBillingEntitlementsResponseEntitlementsInner> entitlements = default(List<GetBillingEntitlementsResponseEntitlementsInner>), List<GetBillingEntitlementsResponsePlansInner> plans = default(List<GetBillingEntitlementsResponsePlansInner>))
        {
            this.Code = code;
            this.Message = message;
            this.HasMore = hasMore;
            this.Entitlements = entitlements;
            this.Plans = plans;
        }

        /// <summary>
        /// Response code.
        /// </summary>
        /// <value>Response code.</value>
        /// <example>OK</example>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Response message.
        /// </summary>
        /// <value>Response message.</value>
        /// <example>Success</example>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Whether more records exist.
        /// </summary>
        /// <value>Whether more records exist.</value>
        [DataMember(Name = "has_more", EmitDefaultValue = true)]
        public bool HasMore { get; set; }

        /// <summary>
        /// A list of entitlements
        /// </summary>
        /// <value>A list of entitlements</value>
        [DataMember(Name = "entitlements", EmitDefaultValue = false)]
        public List<GetBillingEntitlementsResponseEntitlementsInner> Entitlements { get; set; }

        /// <summary>
        /// A list of plans.
        /// </summary>
        /// <value>A list of plans.</value>
        [DataMember(Name = "plans", EmitDefaultValue = false)]
        public List<GetBillingEntitlementsResponsePlansInner> Plans { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetBillingEntitlementsResponse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  HasMore: ").Append(HasMore).Append("\n");
            sb.Append("  Entitlements: ").Append(Entitlements).Append("\n");
            sb.Append("  Plans: ").Append(Plans).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetBillingEntitlementsResponse);
        }

        /// <summary>
        /// Returns true if GetBillingEntitlementsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetBillingEntitlementsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetBillingEntitlementsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.HasMore == input.HasMore ||
                    this.HasMore.Equals(input.HasMore)
                ) && 
                (
                    this.Entitlements == input.Entitlements ||
                    this.Entitlements != null &&
                    input.Entitlements != null &&
                    this.Entitlements.SequenceEqual(input.Entitlements)
                ) && 
                (
                    this.Plans == input.Plans ||
                    this.Plans != null &&
                    input.Plans != null &&
                    this.Plans.SequenceEqual(input.Plans)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasMore.GetHashCode();
                if (this.Entitlements != null)
                {
                    hashCode = (hashCode * 59) + this.Entitlements.GetHashCode();
                }
                if (this.Plans != null)
                {
                    hashCode = (hashCode * 59) + this.Plans.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
