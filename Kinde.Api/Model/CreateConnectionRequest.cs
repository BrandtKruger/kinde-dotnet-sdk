/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// CreateConnectionRequest
    /// </summary>
    [DataContract(Name = "CreateConnection_request")]
    public partial class CreateConnectionRequest : IEquatable<CreateConnectionRequest>, IValidatableObject
    {
        /// <summary>
        /// The identity provider identifier for the connection.
        /// </summary>
        /// <value>The identity provider identifier for the connection.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StrategyEnum
        {
            /// <summary>
            /// Enum Oauth2apple for value: oauth2:apple
            /// </summary>
            [EnumMember(Value = "oauth2:apple")]
            Oauth2apple = 1,

            /// <summary>
            /// Enum Oauth2azureAd for value: oauth2:azure_ad
            /// </summary>
            [EnumMember(Value = "oauth2:azure_ad")]
            Oauth2azureAd = 2,

            /// <summary>
            /// Enum Oauth2bitbucket for value: oauth2:bitbucket
            /// </summary>
            [EnumMember(Value = "oauth2:bitbucket")]
            Oauth2bitbucket = 3,

            /// <summary>
            /// Enum Oauth2discord for value: oauth2:discord
            /// </summary>
            [EnumMember(Value = "oauth2:discord")]
            Oauth2discord = 4,

            /// <summary>
            /// Enum Oauth2facebook for value: oauth2:facebook
            /// </summary>
            [EnumMember(Value = "oauth2:facebook")]
            Oauth2facebook = 5,

            /// <summary>
            /// Enum Oauth2github for value: oauth2:github
            /// </summary>
            [EnumMember(Value = "oauth2:github")]
            Oauth2github = 6,

            /// <summary>
            /// Enum Oauth2gitlab for value: oauth2:gitlab
            /// </summary>
            [EnumMember(Value = "oauth2:gitlab")]
            Oauth2gitlab = 7,

            /// <summary>
            /// Enum Oauth2google for value: oauth2:google
            /// </summary>
            [EnumMember(Value = "oauth2:google")]
            Oauth2google = 8,

            /// <summary>
            /// Enum Oauth2linkedin for value: oauth2:linkedin
            /// </summary>
            [EnumMember(Value = "oauth2:linkedin")]
            Oauth2linkedin = 9,

            /// <summary>
            /// Enum Oauth2microsoft for value: oauth2:microsoft
            /// </summary>
            [EnumMember(Value = "oauth2:microsoft")]
            Oauth2microsoft = 10,

            /// <summary>
            /// Enum Oauth2patreon for value: oauth2:patreon
            /// </summary>
            [EnumMember(Value = "oauth2:patreon")]
            Oauth2patreon = 11,

            /// <summary>
            /// Enum Oauth2slack for value: oauth2:slack
            /// </summary>
            [EnumMember(Value = "oauth2:slack")]
            Oauth2slack = 12,

            /// <summary>
            /// Enum Oauth2stripe for value: oauth2:stripe
            /// </summary>
            [EnumMember(Value = "oauth2:stripe")]
            Oauth2stripe = 13,

            /// <summary>
            /// Enum Oauth2twitch for value: oauth2:twitch
            /// </summary>
            [EnumMember(Value = "oauth2:twitch")]
            Oauth2twitch = 14,

            /// <summary>
            /// Enum Oauth2twitter for value: oauth2:twitter
            /// </summary>
            [EnumMember(Value = "oauth2:twitter")]
            Oauth2twitter = 15,

            /// <summary>
            /// Enum Oauth2xero for value: oauth2:xero
            /// </summary>
            [EnumMember(Value = "oauth2:xero")]
            Oauth2xero = 16,

            /// <summary>
            /// Enum Samlcustom for value: saml:custom
            /// </summary>
            [EnumMember(Value = "saml:custom")]
            Samlcustom = 17,

            /// <summary>
            /// Enum WsfedazureAd for value: wsfed:azure_ad
            /// </summary>
            [EnumMember(Value = "wsfed:azure_ad")]
            WsfedazureAd = 18
        }


        /// <summary>
        /// The identity provider identifier for the connection.
        /// </summary>
        /// <value>The identity provider identifier for the connection.</value>
        [DataMember(Name = "strategy", EmitDefaultValue = false)]
        public StrategyEnum? Strategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectionRequest" /> class.
        /// </summary>
        /// <param name="name">The internal name of the connection..</param>
        /// <param name="displayName">The public facing name of the connection..</param>
        /// <param name="strategy">The identity provider identifier for the connection..</param>
        /// <param name="enabledApplications">Client IDs of applications in which this connection is to be enabled..</param>
        /// <param name="options">options.</param>
        public CreateConnectionRequest(string name = default(string), string displayName = default(string), StrategyEnum? strategy = default(StrategyEnum?), List<string> enabledApplications = default(List<string>), CreateConnectionRequestOptions options = default(CreateConnectionRequestOptions))
        {
            this.Name = name;
            this.DisplayName = displayName;
            this.Strategy = strategy;
            this.EnabledApplications = enabledApplications;
            this.Options = options;
        }

        /// <summary>
        /// The internal name of the connection.
        /// </summary>
        /// <value>The internal name of the connection.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The public facing name of the connection.
        /// </summary>
        /// <value>The public facing name of the connection.</value>
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Client IDs of applications in which this connection is to be enabled.
        /// </summary>
        /// <value>Client IDs of applications in which this connection is to be enabled.</value>
        [DataMember(Name = "enabled_applications", EmitDefaultValue = false)]
        public List<string> EnabledApplications { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public CreateConnectionRequestOptions Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectionRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  EnabledApplications: ").Append(EnabledApplications).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateConnectionRequest);
        }

        /// <summary>
        /// Returns true if CreateConnectionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateConnectionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateConnectionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Strategy == input.Strategy ||
                    this.Strategy.Equals(input.Strategy)
                ) && 
                (
                    this.EnabledApplications == input.EnabledApplications ||
                    this.EnabledApplications != null &&
                    input.EnabledApplications != null &&
                    this.EnabledApplications.SequenceEqual(input.EnabledApplications)
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Strategy.GetHashCode();
                if (this.EnabledApplications != null)
                {
                    hashCode = (hashCode * 59) + this.EnabledApplications.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
