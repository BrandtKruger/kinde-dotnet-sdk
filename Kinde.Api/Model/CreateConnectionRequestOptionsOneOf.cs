/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// Social connection options (e.g., Google SSO).
    /// </summary>
    [DataContract(Name = "CreateConnection_request_options_oneOf")]
    public partial class CreateConnectionRequestOptionsOneOf : IEquatable<CreateConnectionRequestOptionsOneOf>
    {
        /// <summary>
        /// </summary>
        /// <param name="clientId">OAuth client ID..</param>
        /// <param name="clientSecret">OAuth client secret..</param>
        public CreateConnectionRequestOptionsOneOf(string clientId = default(string), string clientSecret = default(string), bool isUseCustomDomain = default(bool))
        {
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.IsUseCustomDomain = isUseCustomDomain;
        }

        /// <summary>
        /// OAuth client ID.
        /// </summary>
        /// <value>OAuth client ID.</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// OAuth client secret.
        /// </summary>
        /// <value>OAuth client secret.</value>
        [DataMember(Name = "client_secret", EmitDefaultValue = false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Use custom domain callback URL.
        /// </summary>
        /// <value>Use custom domain callback URL.</value>
        /// <example>true</example>
        [DataMember(Name = "is_use_custom_domain", EmitDefaultValue = true)]
        public bool IsUseCustomDomain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectionRequestOptionsOneOf {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  IsUseCustomDomain: ").Append(IsUseCustomDomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateConnectionRequestOptionsOneOf);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(CreateConnectionRequestOptionsOneOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.IsUseCustomDomain == input.IsUseCustomDomain ||
                    this.IsUseCustomDomain.Equals(input.IsUseCustomDomain)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ClientSecret != null)
                {
                    hashCode = (hashCode * 59) + this.ClientSecret.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsUseCustomDomain.GetHashCode();
                return hashCode;
            }
        }

    }

}
