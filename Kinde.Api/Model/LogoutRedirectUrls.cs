/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// LogoutRedirectUrls
    /// </summary>
    [DataContract(Name = "logout_redirect_urls")]
    public partial class LogoutRedirectUrls : IEquatable<LogoutRedirectUrls>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogoutRedirectUrls" /> class.
        /// </summary>
        /// <param name="logoutUrls">An application&#39;s logout URLs..</param>
        /// <param name="code">Response code..</param>
        /// <param name="message">Response message..</param>
        public LogoutRedirectUrls(List<string> logoutUrls = default(List<string>), string code = default(string), string message = default(string))
        {
            this.LogoutUrls = logoutUrls;
            this.Code = code;
            this.Message = message;
        }

        /// <summary>
        /// An application&#39;s logout URLs.
        /// </summary>
        /// <value>An application&#39;s logout URLs.</value>
        [DataMember(Name = "logout_urls", EmitDefaultValue = false)]
        public List<string> LogoutUrls { get; set; }

        /// <summary>
        /// Response code.
        /// </summary>
        /// <value>Response code.</value>
        /// <example>OK</example>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Response message.
        /// </summary>
        /// <value>Response message.</value>
        /// <example>Success</example>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogoutRedirectUrls {\n");
            sb.Append("  LogoutUrls: ").Append(LogoutUrls).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogoutRedirectUrls);
        }

        /// <summary>
        /// Returns true if LogoutRedirectUrls instances are equal
        /// </summary>
        /// <param name="input">Instance of LogoutRedirectUrls to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogoutRedirectUrls input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LogoutUrls == input.LogoutUrls ||
                    this.LogoutUrls != null &&
                    input.LogoutUrls != null &&
                    this.LogoutUrls.SequenceEqual(input.LogoutUrls)
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogoutUrls != null)
                {
                    hashCode = (hashCode * 59) + this.LogoutUrls.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
