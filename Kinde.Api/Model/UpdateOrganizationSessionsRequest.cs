/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    [DataContract(Name = "UpdateOrganizationSessions_request")]
    public partial class UpdateOrganizationSessionsRequest : IEquatable<UpdateOrganizationSessionsRequest>
    {
        /// <summary>
        /// Determines if the session should be persistent or not.
        /// </summary>
        /// <value>Determines if the session should be persistent or not.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SsoSessionPersistenceModeEnum
        {
            /// <summary>
            /// </summary>
            [EnumMember(Value = "persistent")]
            Persistent = 1,

            /// <summary>
            /// </summary>
            [EnumMember(Value = "non-persistent")]
            NonPersistent = 2
        }


        /// <summary>
        /// Determines if the session should be persistent or not.
        /// </summary>
        /// <value>Determines if the session should be persistent or not.</value>
        [DataMember(Name = "sso_session_persistence_mode", EmitDefaultValue = false)]
        public SsoSessionPersistenceModeEnum? SsoSessionPersistenceMode { get; set; }
        /// <summary>
        /// </summary>
        public UpdateOrganizationSessionsRequest(bool isUseOrgSsoSessionPolicy = default(bool), SsoSessionPersistenceModeEnum? ssoSessionPersistenceMode = default(SsoSessionPersistenceModeEnum?), bool isUseOrgAuthenticatedSessionLifetime = default(bool), int authenticatedSessionLifetime = default(int))
        {
            this.IsUseOrgSsoSessionPolicy = isUseOrgSsoSessionPolicy;
            this.SsoSessionPersistenceMode = ssoSessionPersistenceMode;
            this.IsUseOrgAuthenticatedSessionLifetime = isUseOrgAuthenticatedSessionLifetime;
            this.AuthenticatedSessionLifetime = authenticatedSessionLifetime;
        }

        /// <summary>
        /// Whether to use the organization&#39;s SSO session policy override.
        /// </summary>
        /// <value>Whether to use the organization&#39;s SSO session policy override.</value>
        [DataMember(Name = "is_use_org_sso_session_policy", EmitDefaultValue = true)]
        public bool IsUseOrgSsoSessionPolicy { get; set; }

        /// <summary>
        /// Whether to apply the organization&#39;s authenticated session lifetime override.
        /// </summary>
        /// <value>Whether to apply the organization&#39;s authenticated session lifetime override.</value>
        [DataMember(Name = "is_use_org_authenticated_session_lifetime", EmitDefaultValue = true)]
        public bool IsUseOrgAuthenticatedSessionLifetime { get; set; }

        /// <summary>
        /// Authenticated session lifetime in seconds.
        /// </summary>
        /// <value>Authenticated session lifetime in seconds.</value>
        /// <example>86400</example>
        [DataMember(Name = "authenticated_session_lifetime", EmitDefaultValue = false)]
        public int AuthenticatedSessionLifetime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateOrganizationSessionsRequest {\n");
            sb.Append("  IsUseOrgSsoSessionPolicy: ").Append(IsUseOrgSsoSessionPolicy).Append("\n");
            sb.Append("  SsoSessionPersistenceMode: ").Append(SsoSessionPersistenceMode).Append("\n");
            sb.Append("  IsUseOrgAuthenticatedSessionLifetime: ").Append(IsUseOrgAuthenticatedSessionLifetime).Append("\n");
            sb.Append("  AuthenticatedSessionLifetime: ").Append(AuthenticatedSessionLifetime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateOrganizationSessionsRequest);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateOrganizationSessionsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsUseOrgSsoSessionPolicy == input.IsUseOrgSsoSessionPolicy ||
                    this.IsUseOrgSsoSessionPolicy.Equals(input.IsUseOrgSsoSessionPolicy)
                ) && 
                (
                    this.SsoSessionPersistenceMode == input.SsoSessionPersistenceMode ||
                    this.SsoSessionPersistenceMode.Equals(input.SsoSessionPersistenceMode)
                ) && 
                (
                    this.IsUseOrgAuthenticatedSessionLifetime == input.IsUseOrgAuthenticatedSessionLifetime ||
                    this.IsUseOrgAuthenticatedSessionLifetime.Equals(input.IsUseOrgAuthenticatedSessionLifetime)
                ) && 
                (
                    this.AuthenticatedSessionLifetime == input.AuthenticatedSessionLifetime ||
                    this.AuthenticatedSessionLifetime.Equals(input.AuthenticatedSessionLifetime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsUseOrgSsoSessionPolicy.GetHashCode();
                hashCode = (hashCode * 59) + this.SsoSessionPersistenceMode.GetHashCode();
                hashCode = (hashCode * 59) + this.IsUseOrgAuthenticatedSessionLifetime.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthenticatedSessionLifetime.GetHashCode();
                return hashCode;
            }
        }

    }

}
