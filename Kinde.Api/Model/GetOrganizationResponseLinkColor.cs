/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetOrganizationResponseLinkColor
    /// </summary>
    [DataContract(Name = "get_organization_response_link_color")]
    public partial class GetOrganizationResponseLinkColor : IEquatable<GetOrganizationResponseLinkColor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOrganizationResponseLinkColor" /> class.
        /// </summary>
        /// <param name="raw">raw.</param>
        /// <param name="hex">hex.</param>
        /// <param name="hsl">hsl.</param>
        public GetOrganizationResponseLinkColor(string raw = default(string), string hex = default(string), string hsl = default(string))
        {
            this.Raw = raw;
            this.Hex = hex;
            this.Hsl = hsl;
        }

        /// <summary>
        /// Gets or Sets Raw
        /// </summary>
        /// <example>#0056F1</example>
        [DataMember(Name = "raw", EmitDefaultValue = false)]
        public string Raw { get; set; }

        /// <summary>
        /// Gets or Sets Hex
        /// </summary>
        /// <example>#0056F1</example>
        [DataMember(Name = "hex", EmitDefaultValue = false)]
        public string Hex { get; set; }

        /// <summary>
        /// Gets or Sets Hsl
        /// </summary>
        /// <example>hsl(220, 100%, 50%)</example>
        [DataMember(Name = "hsl", EmitDefaultValue = false)]
        public string Hsl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetOrganizationResponseLinkColor {\n");
            sb.Append("  Raw: ").Append(Raw).Append("\n");
            sb.Append("  Hex: ").Append(Hex).Append("\n");
            sb.Append("  Hsl: ").Append(Hsl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetOrganizationResponseLinkColor);
        }

        /// <summary>
        /// Returns true if GetOrganizationResponseLinkColor instances are equal
        /// </summary>
        /// <param name="input">Instance of GetOrganizationResponseLinkColor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetOrganizationResponseLinkColor input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Raw == input.Raw ||
                    (this.Raw != null &&
                    this.Raw.Equals(input.Raw))
                ) && 
                (
                    this.Hex == input.Hex ||
                    (this.Hex != null &&
                    this.Hex.Equals(input.Hex))
                ) && 
                (
                    this.Hsl == input.Hsl ||
                    (this.Hsl != null &&
                    this.Hsl.Equals(input.Hsl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Raw != null)
                {
                    hashCode = (hashCode * 59) + this.Raw.GetHashCode();
                }
                if (this.Hex != null)
                {
                    hashCode = (hashCode * 59) + this.Hex.GetHashCode();
                }
                if (this.Hsl != null)
                {
                    hashCode = (hashCode * 59) + this.Hsl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
