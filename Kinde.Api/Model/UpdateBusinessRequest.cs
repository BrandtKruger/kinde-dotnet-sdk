/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// UpdateBusinessRequest
    /// </summary>
    [DataContract(Name = "updateBusiness_request")]
    public partial class UpdateBusinessRequest : IEquatable<UpdateBusinessRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateBusinessRequest" /> class.
        /// </summary>
        /// <param name="businessName">The name of the business..</param>
        /// <param name="email">The email address of the business..</param>
        /// <param name="industryKey">The key of the industry of your business. Can be retrieved from the /industries endpoint..</param>
        /// <param name="isClickWrap">Whether the business is using clickwrap agreements..</param>
        /// <param name="isShowKindeBranding">Whether the business is showing Kinde branding. Requires a paid plan..</param>
        /// <param name="kindePerkCode">The Kinde perk code for the business..</param>
        /// <param name="phone">The phone number of the business..</param>
        /// <param name="privacyUrl">The URL to the business&#39;s privacy policy..</param>
        /// <param name="termsUrl">The URL to the business&#39;s terms of service..</param>
        /// <param name="timezoneKey">The key of the timezone of your business. Can be retrieved from the /timezones endpoint..</param>
        public UpdateBusinessRequest(string businessName = default(string), string email = default(string), string industryKey = default(string), bool? isClickWrap = default(bool?), bool? isShowKindeBranding = default(bool?), string kindePerkCode = default(string), string phone = default(string), string privacyUrl = default(string), string termsUrl = default(string), string timezoneKey = default(string))
        {
            this.BusinessName = businessName;
            this.Email = email;
            this.IndustryKey = industryKey;
            this.IsClickWrap = isClickWrap;
            this.IsShowKindeBranding = isShowKindeBranding;
            this.KindePerkCode = kindePerkCode;
            this.Phone = phone;
            this.PrivacyUrl = privacyUrl;
            this.TermsUrl = termsUrl;
            this.TimezoneKey = timezoneKey;
        }

        /// <summary>
        /// The name of the business.
        /// </summary>
        /// <value>The name of the business.</value>
        /// <example>Tailsforce Ltd</example>
        [DataMember(Name = "business_name", EmitDefaultValue = true)]
        public string BusinessName { get; set; }

        /// <summary>
        /// The email address of the business.
        /// </summary>
        /// <value>The email address of the business.</value>
        /// <example>sally@example.com</example>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// The key of the industry of your business. Can be retrieved from the /industries endpoint.
        /// </summary>
        /// <value>The key of the industry of your business. Can be retrieved from the /industries endpoint.</value>
        /// <example>construction</example>
        [DataMember(Name = "industry_key", EmitDefaultValue = true)]
        public string IndustryKey { get; set; }

        /// <summary>
        /// Whether the business is using clickwrap agreements.
        /// </summary>
        /// <value>Whether the business is using clickwrap agreements.</value>
        /// <example>false</example>
        [DataMember(Name = "is_click_wrap", EmitDefaultValue = true)]
        public bool? IsClickWrap { get; set; }

        /// <summary>
        /// Whether the business is showing Kinde branding. Requires a paid plan.
        /// </summary>
        /// <value>Whether the business is showing Kinde branding. Requires a paid plan.</value>
        /// <example>true</example>
        [DataMember(Name = "is_show_kinde_branding", EmitDefaultValue = true)]
        public bool? IsShowKindeBranding { get; set; }

        /// <summary>
        /// The Kinde perk code for the business.
        /// </summary>
        /// <value>The Kinde perk code for the business.</value>
        [DataMember(Name = "kinde_perk_code", EmitDefaultValue = true)]
        public string KindePerkCode { get; set; }

        /// <summary>
        /// The phone number of the business.
        /// </summary>
        /// <value>The phone number of the business.</value>
        /// <example>123-456-7890</example>
        [DataMember(Name = "phone", EmitDefaultValue = true)]
        public string Phone { get; set; }

        /// <summary>
        /// The URL to the business&#39;s privacy policy.
        /// </summary>
        /// <value>The URL to the business&#39;s privacy policy.</value>
        /// <example>https://example.com/privacy</example>
        [DataMember(Name = "privacy_url", EmitDefaultValue = true)]
        public string PrivacyUrl { get; set; }

        /// <summary>
        /// The URL to the business&#39;s terms of service.
        /// </summary>
        /// <value>The URL to the business&#39;s terms of service.</value>
        /// <example>https://example.com/terms</example>
        [DataMember(Name = "terms_url", EmitDefaultValue = true)]
        public string TermsUrl { get; set; }

        /// <summary>
        /// The key of the timezone of your business. Can be retrieved from the /timezones endpoint.
        /// </summary>
        /// <value>The key of the timezone of your business. Can be retrieved from the /timezones endpoint.</value>
        /// <example>los_angeles_pacific_standard_time</example>
        [DataMember(Name = "timezone_key", EmitDefaultValue = true)]
        public string TimezoneKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateBusinessRequest {\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IndustryKey: ").Append(IndustryKey).Append("\n");
            sb.Append("  IsClickWrap: ").Append(IsClickWrap).Append("\n");
            sb.Append("  IsShowKindeBranding: ").Append(IsShowKindeBranding).Append("\n");
            sb.Append("  KindePerkCode: ").Append(KindePerkCode).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PrivacyUrl: ").Append(PrivacyUrl).Append("\n");
            sb.Append("  TermsUrl: ").Append(TermsUrl).Append("\n");
            sb.Append("  TimezoneKey: ").Append(TimezoneKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateBusinessRequest);
        }

        /// <summary>
        /// Returns true if UpdateBusinessRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateBusinessRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateBusinessRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BusinessName == input.BusinessName ||
                    (this.BusinessName != null &&
                    this.BusinessName.Equals(input.BusinessName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.IndustryKey == input.IndustryKey ||
                    (this.IndustryKey != null &&
                    this.IndustryKey.Equals(input.IndustryKey))
                ) && 
                (
                    this.IsClickWrap == input.IsClickWrap ||
                    (this.IsClickWrap != null &&
                    this.IsClickWrap.Equals(input.IsClickWrap))
                ) && 
                (
                    this.IsShowKindeBranding == input.IsShowKindeBranding ||
                    (this.IsShowKindeBranding != null &&
                    this.IsShowKindeBranding.Equals(input.IsShowKindeBranding))
                ) && 
                (
                    this.KindePerkCode == input.KindePerkCode ||
                    (this.KindePerkCode != null &&
                    this.KindePerkCode.Equals(input.KindePerkCode))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.PrivacyUrl == input.PrivacyUrl ||
                    (this.PrivacyUrl != null &&
                    this.PrivacyUrl.Equals(input.PrivacyUrl))
                ) && 
                (
                    this.TermsUrl == input.TermsUrl ||
                    (this.TermsUrl != null &&
                    this.TermsUrl.Equals(input.TermsUrl))
                ) && 
                (
                    this.TimezoneKey == input.TimezoneKey ||
                    (this.TimezoneKey != null &&
                    this.TimezoneKey.Equals(input.TimezoneKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BusinessName != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessName.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.IndustryKey != null)
                {
                    hashCode = (hashCode * 59) + this.IndustryKey.GetHashCode();
                }
                if (this.IsClickWrap != null)
                {
                    hashCode = (hashCode * 59) + this.IsClickWrap.GetHashCode();
                }
                if (this.IsShowKindeBranding != null)
                {
                    hashCode = (hashCode * 59) + this.IsShowKindeBranding.GetHashCode();
                }
                if (this.KindePerkCode != null)
                {
                    hashCode = (hashCode * 59) + this.KindePerkCode.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.PrivacyUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PrivacyUrl.GetHashCode();
                }
                if (this.TermsUrl != null)
                {
                    hashCode = (hashCode * 59) + this.TermsUrl.GetHashCode();
                }
                if (this.TimezoneKey != null)
                {
                    hashCode = (hashCode * 59) + this.TimezoneKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
