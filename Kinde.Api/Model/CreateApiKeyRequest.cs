/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    [DataContract(Name = "createApiKey_request")]
    public partial class CreateApiKeyRequest : IEquatable<CreateApiKeyRequest>
    {
        /// <summary>
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateApiKeyRequest() { }
        /// <summary>
        /// </summary>
        /// <param name="name">The name of the API key. (required).</param>
        /// <param name="apiId">The ID of the API this key is associated with. (required).</param>
        /// <param name="scopeIds">Array of scope IDs to associate with this API key..</param>
        /// <param name="userId">The ID of the user to associate with this API key (for user-level keys)..</param>
        /// <param name="orgCode">The organization code to associate with this API key (for organization-level keys)..</param>
        public CreateApiKeyRequest(string name = default(string), string apiId = default(string), List<string> scopeIds = default(List<string>), string userId = default(string), string orgCode = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateApiKeyRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "apiId" is required (not null)
            if (apiId == null)
            {
                throw new ArgumentNullException("apiId is a required property for CreateApiKeyRequest and cannot be null");
            }
            this.ApiId = apiId;
            this.ScopeIds = scopeIds;
            this.UserId = userId;
            this.OrgCode = orgCode;
        }

        /// <summary>
        /// The name of the API key.
        /// </summary>
        /// <value>The name of the API key.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the API this key is associated with.
        /// </summary>
        /// <value>The ID of the API this key is associated with.</value>
        [DataMember(Name = "api_id", IsRequired = true, EmitDefaultValue = true)]
        public string ApiId { get; set; }

        /// <summary>
        /// Array of scope IDs to associate with this API key.
        /// </summary>
        /// <value>Array of scope IDs to associate with this API key.</value>
        [DataMember(Name = "scope_ids", EmitDefaultValue = true)]
        public List<string> ScopeIds { get; set; }

        /// <summary>
        /// The ID of the user to associate with this API key (for user-level keys).
        /// </summary>
        /// <value>The ID of the user to associate with this API key (for user-level keys).</value>
        [DataMember(Name = "user_id", EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// The organization code to associate with this API key (for organization-level keys).
        /// </summary>
        /// <value>The organization code to associate with this API key (for organization-level keys).</value>
        [DataMember(Name = "org_code", EmitDefaultValue = true)]
        public string OrgCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateApiKeyRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ApiId: ").Append(ApiId).Append("\n");
            sb.Append("  ScopeIds: ").Append(ScopeIds).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  OrgCode: ").Append(OrgCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateApiKeyRequest);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(CreateApiKeyRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ApiId == input.ApiId ||
                    (this.ApiId != null &&
                    this.ApiId.Equals(input.ApiId))
                ) && 
                (
                    this.ScopeIds == input.ScopeIds ||
                    this.ScopeIds != null &&
                    input.ScopeIds != null &&
                    this.ScopeIds.SequenceEqual(input.ScopeIds)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.OrgCode == input.OrgCode ||
                    (this.OrgCode != null &&
                    this.OrgCode.Equals(input.OrgCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ApiId != null)
                {
                    hashCode = (hashCode * 59) + this.ApiId.GetHashCode();
                }
                if (this.ScopeIds != null)
                {
                    hashCode = (hashCode * 59) + this.ScopeIds.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.OrgCode != null)
                {
                    hashCode = (hashCode * 59) + this.OrgCode.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
