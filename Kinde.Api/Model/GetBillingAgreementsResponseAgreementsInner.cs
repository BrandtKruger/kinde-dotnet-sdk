/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    [DataContract(Name = "get_billing_agreements_response_agreements_inner")]
    public partial class GetBillingAgreementsResponseAgreementsInner : IEquatable<GetBillingAgreementsResponseAgreementsInner>
    {
        /// <summary>
        /// </summary>
        /// <param name="id">The friendly id of an agreement.</param>
        /// <param name="planCode">The plan code the billing customer is subscribed to.</param>
        /// <param name="expiresOn">The date the agreement expired (and was no longer active).</param>
        /// <param name="billingGroupId">The friendly id of the billing group this agreement&#39;s plan is part of.</param>
        /// <param name="entitlements">A list of billing entitlements that is part of this agreement.</param>
        public GetBillingAgreementsResponseAgreementsInner(string id = default(string), string planCode = default(string), DateTimeOffset expiresOn = default(DateTimeOffset), string billingGroupId = default(string), List<GetBillingAgreementsResponseAgreementsInnerEntitlementsInner> entitlements = default(List<GetBillingAgreementsResponseAgreementsInnerEntitlementsInner>))
        {
            this.Id = id;
            this.PlanCode = planCode;
            this.ExpiresOn = expiresOn;
            this.BillingGroupId = billingGroupId;
            this.Entitlements = entitlements;
        }

        /// <summary>
        /// The friendly id of an agreement
        /// </summary>
        /// <value>The friendly id of an agreement</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The plan code the billing customer is subscribed to
        /// </summary>
        /// <value>The plan code the billing customer is subscribed to</value>
        [DataMember(Name = "plan_code", EmitDefaultValue = false)]
        public string PlanCode { get; set; }

        /// <summary>
        /// The date the agreement expired (and was no longer active)
        /// </summary>
        /// <value>The date the agreement expired (and was no longer active)</value>
        /// <example>2024-11-18T13:32:03+11:00</example>
        [DataMember(Name = "expires_on", EmitDefaultValue = false)]
        public DateTimeOffset ExpiresOn { get; set; }

        /// <summary>
        /// The friendly id of the billing group this agreement&#39;s plan is part of
        /// </summary>
        /// <value>The friendly id of the billing group this agreement&#39;s plan is part of</value>
        [DataMember(Name = "billing_group_id", EmitDefaultValue = false)]
        public string BillingGroupId { get; set; }

        /// <summary>
        /// A list of billing entitlements that is part of this agreement
        /// </summary>
        /// <value>A list of billing entitlements that is part of this agreement</value>
        [DataMember(Name = "entitlements", EmitDefaultValue = false)]
        public List<GetBillingAgreementsResponseAgreementsInnerEntitlementsInner> Entitlements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetBillingAgreementsResponseAgreementsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PlanCode: ").Append(PlanCode).Append("\n");
            sb.Append("  ExpiresOn: ").Append(ExpiresOn).Append("\n");
            sb.Append("  BillingGroupId: ").Append(BillingGroupId).Append("\n");
            sb.Append("  Entitlements: ").Append(Entitlements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetBillingAgreementsResponseAgreementsInner);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(GetBillingAgreementsResponseAgreementsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PlanCode == input.PlanCode ||
                    (this.PlanCode != null &&
                    this.PlanCode.Equals(input.PlanCode))
                ) && 
                (
                    this.ExpiresOn == input.ExpiresOn ||
                    (this.ExpiresOn != null &&
                    this.ExpiresOn.Equals(input.ExpiresOn))
                ) && 
                (
                    this.BillingGroupId == input.BillingGroupId ||
                    (this.BillingGroupId != null &&
                    this.BillingGroupId.Equals(input.BillingGroupId))
                ) && 
                (
                    this.Entitlements == input.Entitlements ||
                    this.Entitlements != null &&
                    input.Entitlements != null &&
                    this.Entitlements.SequenceEqual(input.Entitlements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PlanCode != null)
                {
                    hashCode = (hashCode * 59) + this.PlanCode.GetHashCode();
                }
                if (this.ExpiresOn != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresOn.GetHashCode();
                }
                if (this.BillingGroupId != null)
                {
                    hashCode = (hashCode * 59) + this.BillingGroupId.GetHashCode();
                }
                if (this.Entitlements != null)
                {
                    hashCode = (hashCode * 59) + this.Entitlements.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
