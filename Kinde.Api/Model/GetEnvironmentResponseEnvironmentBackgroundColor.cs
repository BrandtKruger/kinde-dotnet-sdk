/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    [DataContract(Name = "get_environment_response_environment_background_color")]
    public partial class GetEnvironmentResponseEnvironmentBackgroundColor : IEquatable<GetEnvironmentResponseEnvironmentBackgroundColor>
    {
        /// <summary>
        /// </summary>
        /// <param name="raw">raw.</param>
        /// <param name="hex">hex.</param>
        /// <param name="hsl">hsl.</param>
        public GetEnvironmentResponseEnvironmentBackgroundColor(string raw = default(string), string hex = default(string), string hsl = default(string))
        {
            this.Raw = raw;
            this.Hex = hex;
            this.Hsl = hsl;
        }

        /// <summary>
        /// Gets or Sets Raw
        /// </summary>
        /// <example>#ffffff</example>
        [DataMember(Name = "raw", EmitDefaultValue = false)]
        public string Raw { get; set; }

        /// <summary>
        /// Gets or Sets Hex
        /// </summary>
        /// <example>#ffffff</example>
        [DataMember(Name = "hex", EmitDefaultValue = false)]
        public string Hex { get; set; }

        /// <summary>
        /// Gets or Sets Hsl
        /// </summary>
        /// <example>hsl(0, 0%, 100%)</example>
        [DataMember(Name = "hsl", EmitDefaultValue = false)]
        public string Hsl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEnvironmentResponseEnvironmentBackgroundColor {\n");
            sb.Append("  Raw: ").Append(Raw).Append("\n");
            sb.Append("  Hex: ").Append(Hex).Append("\n");
            sb.Append("  Hsl: ").Append(Hsl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetEnvironmentResponseEnvironmentBackgroundColor);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(GetEnvironmentResponseEnvironmentBackgroundColor input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Raw == input.Raw ||
                    (this.Raw != null &&
                    this.Raw.Equals(input.Raw))
                ) && 
                (
                    this.Hex == input.Hex ||
                    (this.Hex != null &&
                    this.Hex.Equals(input.Hex))
                ) && 
                (
                    this.Hsl == input.Hsl ||
                    (this.Hsl != null &&
                    this.Hsl.Equals(input.Hsl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Raw != null)
                {
                    hashCode = (hashCode * 59) + this.Raw.GetHashCode();
                }
                if (this.Hex != null)
                {
                    hashCode = (hashCode * 59) + this.Hex.GetHashCode();
                }
                if (this.Hsl != null)
                {
                    hashCode = (hashCode * 59) + this.Hsl.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
