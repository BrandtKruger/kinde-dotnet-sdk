/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    [DataContract(Name = "ReplaceMFA_request")]
    public partial class ReplaceMFARequest : IEquatable<ReplaceMFARequest>
    {
        /// <summary>
        /// Specifies whether MFA is required, optional, or not enforced.
        /// </summary>
        /// <value>Specifies whether MFA is required, optional, or not enforced.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PolicyEnum
        {
            /// <summary>
            /// Enum Required for value: required
            /// </summary>
            [EnumMember(Value = "required")]
            Required = 1,

            /// <summary>
            /// Enum Off for value: off
            /// </summary>
            [EnumMember(Value = "off")]
            Off = 2,

            /// <summary>
            /// Enum Optional for value: optional
            /// </summary>
            [EnumMember(Value = "optional")]
            Optional = 3
        }


        /// <summary>
        /// Specifies whether MFA is required, optional, or not enforced.
        /// </summary>
        /// <value>Specifies whether MFA is required, optional, or not enforced.</value>
        [DataMember(Name = "policy", IsRequired = true, EmitDefaultValue = true)]
        public PolicyEnum Policy { get; set; }
        /// <summary>
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnabledFactorsEnum
        {
            /// <summary>
            /// Enum Email for value: mfa:email
            /// </summary>
            [EnumMember(Value = "mfa:email")]
            Email = 1,

            /// <summary>
            /// Enum Sms for value: mfa:sms
            /// </summary>
            [EnumMember(Value = "mfa:sms")]
            Sms = 2,

            /// <summary>
            /// </summary>
            [EnumMember(Value = "mfa:authenticator_app")]
            AuthenticatorApp = 3
        }

        /// <summary>
        /// </summary>
        [JsonConstructorAttribute]
        protected ReplaceMFARequest() { }
        /// <summary>
        /// </summary>
        /// <param name="policy">Specifies whether MFA is required, optional, or not enforced. (required).</param>
        /// <param name="enabledFactors">The MFA methods to enable. (required).</param>
        public ReplaceMFARequest(PolicyEnum policy = default(PolicyEnum), List<EnabledFactorsEnum> enabledFactors = default(List<EnabledFactorsEnum>))
        {
            this.Policy = policy;
            // to ensure "enabledFactors" is required (not null)
            if (enabledFactors == null)
            {
                throw new ArgumentNullException("enabledFactors is a required property for ReplaceMFARequest and cannot be null");
            }
            this.EnabledFactors = enabledFactors;
        }

        /// <summary>
        /// The MFA methods to enable.
        /// </summary>
        /// <value>The MFA methods to enable.</value>
        [DataMember(Name = "enabled_factors", IsRequired = true, EmitDefaultValue = true)]
        public List<ReplaceMFARequest.EnabledFactorsEnum> EnabledFactors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReplaceMFARequest {\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  EnabledFactors: ").Append(EnabledFactors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReplaceMFARequest);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(ReplaceMFARequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Policy == input.Policy ||
                    this.Policy.Equals(input.Policy)
                ) && 
                (
                    this.EnabledFactors == input.EnabledFactors ||
                    this.EnabledFactors != null &&
                    input.EnabledFactors != null &&
                    this.EnabledFactors.SequenceEqual(input.EnabledFactors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Policy.GetHashCode();
                if (this.EnabledFactors != null)
                {
                    hashCode = (hashCode * 59) + this.EnabledFactors.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
