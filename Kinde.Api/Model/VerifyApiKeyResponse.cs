/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    [DataContract(Name = "verify_api_key_response")]
    public partial class VerifyApiKeyResponse : IEquatable<VerifyApiKeyResponse>
    {
        /// <summary>
        /// </summary>
        /// <param name="code">Response code..</param>
        /// <param name="message">Response message..</param>
        /// <param name="isValid">Whether the API key is valid..</param>
        /// <param name="keyId">The unique ID for the API key..</param>
        /// <param name="status">The status of the API key..</param>
        /// <param name="scopes">Array of scopes associated with this key..</param>
        /// <param name="orgCode">The organization code associated with this key..</param>
        /// <param name="userId">The user ID associated with this key..</param>
        /// <param name="lastVerifiedOn">When the API key was last verified..</param>
        public VerifyApiKeyResponse(string code = default(string), string message = default(string), bool isValid = default(bool), string keyId = default(string), string status = default(string), List<string> scopes = default(List<string>), string orgCode = default(string), string userId = default(string), DateTimeOffset? lastVerifiedOn = default(DateTimeOffset?), int verificationCount = default(int))
        {
            this.Code = code;
            this.Message = message;
            this.IsValid = isValid;
            this.KeyId = keyId;
            this.Status = status;
            this.Scopes = scopes;
            this.OrgCode = orgCode;
            this.UserId = userId;
            this.LastVerifiedOn = lastVerifiedOn;
            this.VerificationCount = verificationCount;
        }

        /// <summary>
        /// Response code.
        /// </summary>
        /// <value>Response code.</value>
        /// <example>API_KEY_VERIFIED</example>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Response message.
        /// </summary>
        /// <value>Response message.</value>
        /// <example>API key verified</example>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Whether the API key is valid.
        /// </summary>
        /// <value>Whether the API key is valid.</value>
        /// <example>true</example>
        [DataMember(Name = "is_valid", EmitDefaultValue = true)]
        public bool IsValid { get; set; }

        /// <summary>
        /// The unique ID for the API key.
        /// </summary>
        /// <value>The unique ID for the API key.</value>
        [DataMember(Name = "key_id", EmitDefaultValue = false)]
        public string KeyId { get; set; }

        /// <summary>
        /// The status of the API key.
        /// </summary>
        /// <value>The status of the API key.</value>
        /// <example>active</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Array of scopes associated with this key.
        /// </summary>
        /// <value>Array of scopes associated with this key.</value>
        /// <example>[&quot;read:users&quot;,&quot;write:users&quot;]</example>
        [DataMember(Name = "scopes", EmitDefaultValue = false)]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// The organization code associated with this key.
        /// </summary>
        /// <value>The organization code associated with this key.</value>
        /// <example>org_123</example>
        [DataMember(Name = "org_code", EmitDefaultValue = true)]
        public string OrgCode { get; set; }

        /// <summary>
        /// The user ID associated with this key.
        /// </summary>
        /// <value>The user ID associated with this key.</value>
        /// <example>user_456</example>
        [DataMember(Name = "user_id", EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// When the API key was last verified.
        /// </summary>
        /// <value>When the API key was last verified.</value>
        /// <example>2024-11-18T13:32:03+11:00</example>
        [DataMember(Name = "last_verified_on", EmitDefaultValue = true)]
        public DateTimeOffset? LastVerifiedOn { get; set; }

        /// <summary>
        /// Number of times this API key has been verified.
        /// </summary>
        /// <value>Number of times this API key has been verified.</value>
        /// <example>42</example>
        [DataMember(Name = "verification_count", EmitDefaultValue = false)]
        public int VerificationCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyApiKeyResponse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  KeyId: ").Append(KeyId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  OrgCode: ").Append(OrgCode).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  LastVerifiedOn: ").Append(LastVerifiedOn).Append("\n");
            sb.Append("  VerificationCount: ").Append(VerificationCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifyApiKeyResponse);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyApiKeyResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.IsValid == input.IsValid ||
                    this.IsValid.Equals(input.IsValid)
                ) && 
                (
                    this.KeyId == input.KeyId ||
                    (this.KeyId != null &&
                    this.KeyId.Equals(input.KeyId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    input.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                ) && 
                (
                    this.OrgCode == input.OrgCode ||
                    (this.OrgCode != null &&
                    this.OrgCode.Equals(input.OrgCode))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.LastVerifiedOn == input.LastVerifiedOn ||
                    (this.LastVerifiedOn != null &&
                    this.LastVerifiedOn.Equals(input.LastVerifiedOn))
                ) && 
                (
                    this.VerificationCount == input.VerificationCount ||
                    this.VerificationCount.Equals(input.VerificationCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsValid.GetHashCode();
                if (this.KeyId != null)
                {
                    hashCode = (hashCode * 59) + this.KeyId.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Scopes != null)
                {
                    hashCode = (hashCode * 59) + this.Scopes.GetHashCode();
                }
                if (this.OrgCode != null)
                {
                    hashCode = (hashCode * 59) + this.OrgCode.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.LastVerifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.LastVerifiedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VerificationCount.GetHashCode();
                return hashCode;
            }
        }

    }

}
