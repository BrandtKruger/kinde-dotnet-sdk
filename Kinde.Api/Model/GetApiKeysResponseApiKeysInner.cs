/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    [DataContract(Name = "get_api_keys_response_api_keys_inner")]
    public partial class GetApiKeysResponseApiKeysInner : IEquatable<GetApiKeysResponseApiKeysInner>
    {
        /// <summary>
        /// </summary>
        /// <param name="id">The unique ID for the API key..</param>
        /// <param name="name">The API key&#39;s name..</param>
        /// <param name="type">The type of API key..</param>
        /// <param name="status">The status of the API key..</param>
        /// <param name="keyPrefix">The first 6 characters of the API key for identification..</param>
        /// <param name="keySuffix">The last 4 characters of the API key for identification..</param>
        /// <param name="createdOn">When the API key was created..</param>
        /// <param name="lastVerifiedOn">When the API key was last verified..</param>
        /// <param name="lastVerifiedIp">The IP address from which the API key was last verified..</param>
        /// <param name="createdBy">The name of the user who created the API key..</param>
        /// <param name="apiIds">Array of API IDs associated with this key..</param>
        /// <param name="scopes">Array of scopes associated with this key..</param>
        public GetApiKeysResponseApiKeysInner(string id = default(string), string name = default(string), string type = default(string), string status = default(string), string keyPrefix = default(string), string keySuffix = default(string), DateTimeOffset createdOn = default(DateTimeOffset), DateTimeOffset? lastVerifiedOn = default(DateTimeOffset?), string lastVerifiedIp = default(string), string createdBy = default(string), List<string> apiIds = default(List<string>), List<string> scopes = default(List<string>))
        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.Status = status;
            this.KeyPrefix = keyPrefix;
            this.KeySuffix = keySuffix;
            this.CreatedOn = createdOn;
            this.LastVerifiedOn = lastVerifiedOn;
            this.LastVerifiedIp = lastVerifiedIp;
            this.CreatedBy = createdBy;
            this.ApiIds = apiIds;
            this.Scopes = scopes;
        }

        /// <summary>
        /// The unique ID for the API key.
        /// </summary>
        /// <value>The unique ID for the API key.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The API key&#39;s name.
        /// </summary>
        /// <value>The API key&#39;s name.</value>
        /// <example>My API Key</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The type of API key.
        /// </summary>
        /// <value>The type of API key.</value>
        /// <example>organization</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The status of the API key.
        /// </summary>
        /// <value>The status of the API key.</value>
        /// <example>active</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The first 6 characters of the API key for identification.
        /// </summary>
        /// <value>The first 6 characters of the API key for identification.</value>
        /// <example>kinde_</example>
        [DataMember(Name = "key_prefix", EmitDefaultValue = false)]
        public string KeyPrefix { get; set; }

        /// <summary>
        /// The last 4 characters of the API key for identification.
        /// </summary>
        /// <value>The last 4 characters of the API key for identification.</value>
        /// <example>abcd</example>
        [DataMember(Name = "key_suffix", EmitDefaultValue = true)]
        public string KeySuffix { get; set; }

        /// <summary>
        /// When the API key was created.
        /// </summary>
        /// <value>When the API key was created.</value>
        /// <example>2024-11-18T13:32:03+11:00</example>
        [DataMember(Name = "created_on", EmitDefaultValue = false)]
        public DateTimeOffset CreatedOn { get; set; }

        /// <summary>
        /// When the API key was last verified.
        /// </summary>
        /// <value>When the API key was last verified.</value>
        /// <example>2024-11-18T13:32:03+11:00</example>
        [DataMember(Name = "last_verified_on", EmitDefaultValue = true)]
        public DateTimeOffset? LastVerifiedOn { get; set; }

        /// <summary>
        /// The IP address from which the API key was last verified.
        /// </summary>
        /// <value>The IP address from which the API key was last verified.</value>
        /// <example>192.168.1.1</example>
        [DataMember(Name = "last_verified_ip", EmitDefaultValue = true)]
        public string LastVerifiedIp { get; set; }

        /// <summary>
        /// The name of the user who created the API key.
        /// </summary>
        /// <value>The name of the user who created the API key.</value>
        /// <example>John Doe</example>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Array of API IDs associated with this key.
        /// </summary>
        /// <value>Array of API IDs associated with this key.</value>
        /// <example>[&quot;api_123&quot;,&quot;api_456&quot;]</example>
        [DataMember(Name = "api_ids", EmitDefaultValue = false)]
        public List<string> ApiIds { get; set; }

        /// <summary>
        /// Array of scopes associated with this key.
        /// </summary>
        /// <value>Array of scopes associated with this key.</value>
        /// <example>[&quot;read:users&quot;,&quot;write:users&quot;]</example>
        [DataMember(Name = "scopes", EmitDefaultValue = false)]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetApiKeysResponseApiKeysInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  KeyPrefix: ").Append(KeyPrefix).Append("\n");
            sb.Append("  KeySuffix: ").Append(KeySuffix).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  LastVerifiedOn: ").Append(LastVerifiedOn).Append("\n");
            sb.Append("  LastVerifiedIp: ").Append(LastVerifiedIp).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ApiIds: ").Append(ApiIds).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetApiKeysResponseApiKeysInner);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(GetApiKeysResponseApiKeysInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.KeyPrefix == input.KeyPrefix ||
                    (this.KeyPrefix != null &&
                    this.KeyPrefix.Equals(input.KeyPrefix))
                ) && 
                (
                    this.KeySuffix == input.KeySuffix ||
                    (this.KeySuffix != null &&
                    this.KeySuffix.Equals(input.KeySuffix))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.LastVerifiedOn == input.LastVerifiedOn ||
                    (this.LastVerifiedOn != null &&
                    this.LastVerifiedOn.Equals(input.LastVerifiedOn))
                ) && 
                (
                    this.LastVerifiedIp == input.LastVerifiedIp ||
                    (this.LastVerifiedIp != null &&
                    this.LastVerifiedIp.Equals(input.LastVerifiedIp))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.ApiIds == input.ApiIds ||
                    this.ApiIds != null &&
                    input.ApiIds != null &&
                    this.ApiIds.SequenceEqual(input.ApiIds)
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    input.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.KeyPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.KeyPrefix.GetHashCode();
                }
                if (this.KeySuffix != null)
                {
                    hashCode = (hashCode * 59) + this.KeySuffix.GetHashCode();
                }
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.LastVerifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.LastVerifiedOn.GetHashCode();
                }
                if (this.LastVerifiedIp != null)
                {
                    hashCode = (hashCode * 59) + this.LastVerifiedIp.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.ApiIds != null)
                {
                    hashCode = (hashCode * 59) + this.ApiIds.GetHashCode();
                }
                if (this.Scopes != null)
                {
                    hashCode = (hashCode * 59) + this.Scopes.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
