/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetOrganizationResponse
    /// </summary>
    [DataContract(Name = "get_organization_response")]
    public partial class GetOrganizationResponse : IEquatable<GetOrganizationResponse>, IValidatableObject
    {
        /// <summary>
        /// Whether the environment is forced into light mode, dark mode or user preference
        /// </summary>
        /// <value>Whether the environment is forced into light mode, dark mode or user preference</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ThemeCodeEnum
        {
            /// <summary>
            /// Enum Light for value: light
            /// </summary>
            [EnumMember(Value = "light")]
            Light = 1,

            /// <summary>
            /// Enum Dark for value: dark
            /// </summary>
            [EnumMember(Value = "dark")]
            Dark = 2,

            /// <summary>
            /// Enum UserPreference for value: user_preference
            /// </summary>
            [EnumMember(Value = "user_preference")]
            UserPreference = 3
        }


        /// <summary>
        /// Whether the environment is forced into light mode, dark mode or user preference
        /// </summary>
        /// <value>Whether the environment is forced into light mode, dark mode or user preference</value>
        [DataMember(Name = "theme_code", EmitDefaultValue = false)]
        public ThemeCodeEnum? ThemeCode { get; set; }
        /// <summary>
        /// The color scheme for the environment used for meta tags based on the theme code
        /// </summary>
        /// <value>The color scheme for the environment used for meta tags based on the theme code</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColorSchemeEnum
        {
            /// <summary>
            /// Enum Light for value: light
            /// </summary>
            [EnumMember(Value = "light")]
            Light = 1,

            /// <summary>
            /// Enum Dark for value: dark
            /// </summary>
            [EnumMember(Value = "dark")]
            Dark = 2,

            /// <summary>
            /// Enum LightDark for value: light dark
            /// </summary>
            [EnumMember(Value = "light dark")]
            LightDark = 3
        }


        /// <summary>
        /// The color scheme for the environment used for meta tags based on the theme code
        /// </summary>
        /// <value>The color scheme for the environment used for meta tags based on the theme code</value>
        [DataMember(Name = "color_scheme", EmitDefaultValue = false)]
        public ColorSchemeEnum? ColorScheme { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOrganizationResponse" /> class.
        /// </summary>
        /// <param name="code">The unique identifier for the organization..</param>
        /// <param name="name">The organization&#39;s name..</param>
        /// <param name="handle">A unique handle for the organization - can be used for dynamic callback urls..</param>
        /// <param name="isDefault">Whether the organization is the default organization..</param>
        /// <param name="externalId">The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems..</param>
        /// <param name="isAutoMembershipEnabled">If users become members of this organization when the org code is supplied during authentication..</param>
        /// <param name="logo">The organization&#39;s logo URL..</param>
        /// <param name="logoDark">The organization&#39;s logo URL to be used for dark themes..</param>
        /// <param name="faviconSvg">The organization&#39;s SVG favicon URL. Optimal format for most browsers.</param>
        /// <param name="faviconFallback">The favicon URL to be used as a fallback in browsers that donâ€™t support SVG, add a PNG.</param>
        /// <param name="linkColor">linkColor.</param>
        /// <param name="backgroundColor">backgroundColor.</param>
        /// <param name="buttonColor">buttonColor.</param>
        /// <param name="buttonTextColor">buttonTextColor.</param>
        /// <param name="linkColorDark">linkColorDark.</param>
        /// <param name="backgroundColorDark">backgroundColorDark.</param>
        /// <param name="buttonTextColorDark">buttonTextColorDark.</param>
        /// <param name="buttonColorDark">buttonColorDark.</param>
        /// <param name="buttonBorderRadius">The border radius for buttons. Value is px, Kinde transforms to rem for rendering.</param>
        /// <param name="cardBorderRadius">The border radius for cards. Value is px, Kinde transforms to rem for rendering.</param>
        /// <param name="inputBorderRadius">The border radius for inputs. Value is px, Kinde transforms to rem for rendering.</param>
        /// <param name="themeCode">Whether the environment is forced into light mode, dark mode or user preference.</param>
        /// <param name="colorScheme">The color scheme for the environment used for meta tags based on the theme code.</param>
        /// <param name="createdOn">Date of organization creation in ISO 8601 format..</param>
        /// <param name="isAllowRegistrations">Deprecated - Use &#39;is_auto_membership_enabled&#39; instead.</param>
        public GetOrganizationResponse(string code = default(string), string name = default(string), string handle = default(string), bool isDefault = default(bool), string externalId = default(string), bool isAutoMembershipEnabled = default(bool), string logo = default(string), string logoDark = default(string), string faviconSvg = default(string), string faviconFallback = default(string), GetEnvironmentResponseEnvironmentLinkColor linkColor = default(GetEnvironmentResponseEnvironmentLinkColor), GetEnvironmentResponseEnvironmentBackgroundColor backgroundColor = default(GetEnvironmentResponseEnvironmentBackgroundColor), GetEnvironmentResponseEnvironmentLinkColor buttonColor = default(GetEnvironmentResponseEnvironmentLinkColor), GetEnvironmentResponseEnvironmentBackgroundColor buttonTextColor = default(GetEnvironmentResponseEnvironmentBackgroundColor), GetEnvironmentResponseEnvironmentLinkColor linkColorDark = default(GetEnvironmentResponseEnvironmentLinkColor), GetEnvironmentResponseEnvironmentLinkColor backgroundColorDark = default(GetEnvironmentResponseEnvironmentLinkColor), GetEnvironmentResponseEnvironmentLinkColor buttonTextColorDark = default(GetEnvironmentResponseEnvironmentLinkColor), GetEnvironmentResponseEnvironmentLinkColor buttonColorDark = default(GetEnvironmentResponseEnvironmentLinkColor), int? buttonBorderRadius = default(int?), int? cardBorderRadius = default(int?), int? inputBorderRadius = default(int?), ThemeCodeEnum? themeCode = default(ThemeCodeEnum?), ColorSchemeEnum? colorScheme = default(ColorSchemeEnum?), string createdOn = default(string), bool? isAllowRegistrations = default(bool?))
        {
            this.Code = code;
            this.Name = name;
            this.Handle = handle;
            this.IsDefault = isDefault;
            this.ExternalId = externalId;
            this.IsAutoMembershipEnabled = isAutoMembershipEnabled;
            this.Logo = logo;
            this.LogoDark = logoDark;
            this.FaviconSvg = faviconSvg;
            this.FaviconFallback = faviconFallback;
            this.LinkColor = linkColor;
            this.BackgroundColor = backgroundColor;
            this.ButtonColor = buttonColor;
            this.ButtonTextColor = buttonTextColor;
            this.LinkColorDark = linkColorDark;
            this.BackgroundColorDark = backgroundColorDark;
            this.ButtonTextColorDark = buttonTextColorDark;
            this.ButtonColorDark = buttonColorDark;
            this.ButtonBorderRadius = buttonBorderRadius;
            this.CardBorderRadius = cardBorderRadius;
            this.InputBorderRadius = inputBorderRadius;
            this.ThemeCode = themeCode;
            this.ColorScheme = colorScheme;
            this.CreatedOn = createdOn;
            this.IsAllowRegistrations = isAllowRegistrations;
        }

        /// <summary>
        /// The unique identifier for the organization.
        /// </summary>
        /// <value>The unique identifier for the organization.</value>
        /// <example>org_1ccfb819462</example>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// The organization&#39;s name.
        /// </summary>
        /// <value>The organization&#39;s name.</value>
        /// <example>Acme Corp</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A unique handle for the organization - can be used for dynamic callback urls.
        /// </summary>
        /// <value>A unique handle for the organization - can be used for dynamic callback urls.</value>
        /// <example>acme_corp</example>
        [DataMember(Name = "handle", EmitDefaultValue = true)]
        public string Handle { get; set; }

        /// <summary>
        /// Whether the organization is the default organization.
        /// </summary>
        /// <value>Whether the organization is the default organization.</value>
        /// <example>false</example>
        [DataMember(Name = "is_default", EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.
        /// </summary>
        /// <value>The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.</value>
        /// <example>some1234</example>
        [DataMember(Name = "external_id", EmitDefaultValue = true)]
        public string ExternalId { get; set; }

        /// <summary>
        /// If users become members of this organization when the org code is supplied during authentication.
        /// </summary>
        /// <value>If users become members of this organization when the org code is supplied during authentication.</value>
        /// <example>true</example>
        [DataMember(Name = "is_auto_membership_enabled", EmitDefaultValue = true)]
        public bool IsAutoMembershipEnabled { get; set; }

        /// <summary>
        /// The organization&#39;s logo URL.
        /// </summary>
        /// <value>The organization&#39;s logo URL.</value>
        /// <example>https://yoursubdomain.kinde.com/logo?org_code&#x3D;org_1ccfb819462&amp;cache&#x3D;311308b8ad3544bf8e572979f0e5748d</example>
        [DataMember(Name = "logo", EmitDefaultValue = true)]
        public string Logo { get; set; }

        /// <summary>
        /// The organization&#39;s logo URL to be used for dark themes.
        /// </summary>
        /// <value>The organization&#39;s logo URL to be used for dark themes.</value>
        /// <example>https://yoursubdomain.kinde.com/logo_dark?org_code&#x3D;org_1ccfb819462&amp;cache&#x3D;311308b8ad3544bf8e572979f0e5748d</example>
        [DataMember(Name = "logo_dark", EmitDefaultValue = true)]
        public string LogoDark { get; set; }

        /// <summary>
        /// The organization&#39;s SVG favicon URL. Optimal format for most browsers
        /// </summary>
        /// <value>The organization&#39;s SVG favicon URL. Optimal format for most browsers</value>
        /// <example>https://yoursubdomain.kinde.com/favicon_svg?org_code&#x3D;org_1ccfb819462&amp;cache&#x3D;311308b8ad3544bf8e572979f0e5748d</example>
        [DataMember(Name = "favicon_svg", EmitDefaultValue = true)]
        public string FaviconSvg { get; set; }

        /// <summary>
        /// The favicon URL to be used as a fallback in browsers that donâ€™t support SVG, add a PNG
        /// </summary>
        /// <value>The favicon URL to be used as a fallback in browsers that donâ€™t support SVG, add a PNG</value>
        /// <example>https://yoursubdomain.kinde.com/favicon_fallback?org_code&#x3D;org_1ccfb819462&amp;cache&#x3D;311308b8ad3544bf8e572979f0e5748d</example>
        [DataMember(Name = "favicon_fallback", EmitDefaultValue = true)]
        public string FaviconFallback { get; set; }

        /// <summary>
        /// Gets or Sets LinkColor
        /// </summary>
        [DataMember(Name = "link_color", EmitDefaultValue = true)]
        public GetEnvironmentResponseEnvironmentLinkColor LinkColor { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundColor
        /// </summary>
        [DataMember(Name = "background_color", EmitDefaultValue = true)]
        public GetEnvironmentResponseEnvironmentBackgroundColor BackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets ButtonColor
        /// </summary>
        [DataMember(Name = "button_color", EmitDefaultValue = true)]
        public GetEnvironmentResponseEnvironmentLinkColor ButtonColor { get; set; }

        /// <summary>
        /// Gets or Sets ButtonTextColor
        /// </summary>
        [DataMember(Name = "button_text_color", EmitDefaultValue = true)]
        public GetEnvironmentResponseEnvironmentBackgroundColor ButtonTextColor { get; set; }

        /// <summary>
        /// Gets or Sets LinkColorDark
        /// </summary>
        [DataMember(Name = "link_color_dark", EmitDefaultValue = true)]
        public GetEnvironmentResponseEnvironmentLinkColor LinkColorDark { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundColorDark
        /// </summary>
        [DataMember(Name = "background_color_dark", EmitDefaultValue = true)]
        public GetEnvironmentResponseEnvironmentLinkColor BackgroundColorDark { get; set; }

        /// <summary>
        /// Gets or Sets ButtonTextColorDark
        /// </summary>
        [DataMember(Name = "button_text_color_dark", EmitDefaultValue = true)]
        public GetEnvironmentResponseEnvironmentLinkColor ButtonTextColorDark { get; set; }

        /// <summary>
        /// Gets or Sets ButtonColorDark
        /// </summary>
        [DataMember(Name = "button_color_dark", EmitDefaultValue = true)]
        public GetEnvironmentResponseEnvironmentLinkColor ButtonColorDark { get; set; }

        /// <summary>
        /// The border radius for buttons. Value is px, Kinde transforms to rem for rendering
        /// </summary>
        /// <value>The border radius for buttons. Value is px, Kinde transforms to rem for rendering</value>
        /// <example>8</example>
        [DataMember(Name = "button_border_radius", EmitDefaultValue = true)]
        public int? ButtonBorderRadius { get; set; }

        /// <summary>
        /// The border radius for cards. Value is px, Kinde transforms to rem for rendering
        /// </summary>
        /// <value>The border radius for cards. Value is px, Kinde transforms to rem for rendering</value>
        /// <example>16</example>
        [DataMember(Name = "card_border_radius", EmitDefaultValue = true)]
        public int? CardBorderRadius { get; set; }

        /// <summary>
        /// The border radius for inputs. Value is px, Kinde transforms to rem for rendering
        /// </summary>
        /// <value>The border radius for inputs. Value is px, Kinde transforms to rem for rendering</value>
        /// <example>4</example>
        [DataMember(Name = "input_border_radius", EmitDefaultValue = true)]
        public int? InputBorderRadius { get; set; }

        /// <summary>
        /// Date of organization creation in ISO 8601 format.
        /// </summary>
        /// <value>Date of organization creation in ISO 8601 format.</value>
        /// <example>2021-01-01T00:00:00Z</example>
        [DataMember(Name = "created_on", EmitDefaultValue = false)]
        public string CreatedOn { get; set; }

        /// <summary>
        /// Deprecated - Use &#39;is_auto_membership_enabled&#39; instead
        /// </summary>
        /// <value>Deprecated - Use &#39;is_auto_membership_enabled&#39; instead</value>
        /// <example>true</example>
        [DataMember(Name = "is_allow_registrations", EmitDefaultValue = true)]
        [Obsolete]
        public bool? IsAllowRegistrations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetOrganizationResponse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  IsAutoMembershipEnabled: ").Append(IsAutoMembershipEnabled).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  LogoDark: ").Append(LogoDark).Append("\n");
            sb.Append("  FaviconSvg: ").Append(FaviconSvg).Append("\n");
            sb.Append("  FaviconFallback: ").Append(FaviconFallback).Append("\n");
            sb.Append("  LinkColor: ").Append(LinkColor).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  ButtonColor: ").Append(ButtonColor).Append("\n");
            sb.Append("  ButtonTextColor: ").Append(ButtonTextColor).Append("\n");
            sb.Append("  LinkColorDark: ").Append(LinkColorDark).Append("\n");
            sb.Append("  BackgroundColorDark: ").Append(BackgroundColorDark).Append("\n");
            sb.Append("  ButtonTextColorDark: ").Append(ButtonTextColorDark).Append("\n");
            sb.Append("  ButtonColorDark: ").Append(ButtonColorDark).Append("\n");
            sb.Append("  ButtonBorderRadius: ").Append(ButtonBorderRadius).Append("\n");
            sb.Append("  CardBorderRadius: ").Append(CardBorderRadius).Append("\n");
            sb.Append("  InputBorderRadius: ").Append(InputBorderRadius).Append("\n");
            sb.Append("  ThemeCode: ").Append(ThemeCode).Append("\n");
            sb.Append("  ColorScheme: ").Append(ColorScheme).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  IsAllowRegistrations: ").Append(IsAllowRegistrations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetOrganizationResponse);
        }

        /// <summary>
        /// Returns true if GetOrganizationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetOrganizationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetOrganizationResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Handle == input.Handle ||
                    (this.Handle != null &&
                    this.Handle.Equals(input.Handle))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    this.IsDefault.Equals(input.IsDefault)
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.IsAutoMembershipEnabled == input.IsAutoMembershipEnabled ||
                    this.IsAutoMembershipEnabled.Equals(input.IsAutoMembershipEnabled)
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.LogoDark == input.LogoDark ||
                    (this.LogoDark != null &&
                    this.LogoDark.Equals(input.LogoDark))
                ) && 
                (
                    this.FaviconSvg == input.FaviconSvg ||
                    (this.FaviconSvg != null &&
                    this.FaviconSvg.Equals(input.FaviconSvg))
                ) && 
                (
                    this.FaviconFallback == input.FaviconFallback ||
                    (this.FaviconFallback != null &&
                    this.FaviconFallback.Equals(input.FaviconFallback))
                ) && 
                (
                    this.LinkColor == input.LinkColor ||
                    (this.LinkColor != null &&
                    this.LinkColor.Equals(input.LinkColor))
                ) && 
                (
                    this.BackgroundColor == input.BackgroundColor ||
                    (this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(input.BackgroundColor))
                ) && 
                (
                    this.ButtonColor == input.ButtonColor ||
                    (this.ButtonColor != null &&
                    this.ButtonColor.Equals(input.ButtonColor))
                ) && 
                (
                    this.ButtonTextColor == input.ButtonTextColor ||
                    (this.ButtonTextColor != null &&
                    this.ButtonTextColor.Equals(input.ButtonTextColor))
                ) && 
                (
                    this.LinkColorDark == input.LinkColorDark ||
                    (this.LinkColorDark != null &&
                    this.LinkColorDark.Equals(input.LinkColorDark))
                ) && 
                (
                    this.BackgroundColorDark == input.BackgroundColorDark ||
                    (this.BackgroundColorDark != null &&
                    this.BackgroundColorDark.Equals(input.BackgroundColorDark))
                ) && 
                (
                    this.ButtonTextColorDark == input.ButtonTextColorDark ||
                    (this.ButtonTextColorDark != null &&
                    this.ButtonTextColorDark.Equals(input.ButtonTextColorDark))
                ) && 
                (
                    this.ButtonColorDark == input.ButtonColorDark ||
                    (this.ButtonColorDark != null &&
                    this.ButtonColorDark.Equals(input.ButtonColorDark))
                ) && 
                (
                    this.ButtonBorderRadius == input.ButtonBorderRadius ||
                    (this.ButtonBorderRadius != null &&
                    this.ButtonBorderRadius.Equals(input.ButtonBorderRadius))
                ) && 
                (
                    this.CardBorderRadius == input.CardBorderRadius ||
                    (this.CardBorderRadius != null &&
                    this.CardBorderRadius.Equals(input.CardBorderRadius))
                ) && 
                (
                    this.InputBorderRadius == input.InputBorderRadius ||
                    (this.InputBorderRadius != null &&
                    this.InputBorderRadius.Equals(input.InputBorderRadius))
                ) && 
                (
                    this.ThemeCode == input.ThemeCode ||
                    this.ThemeCode.Equals(input.ThemeCode)
                ) && 
                (
                    this.ColorScheme == input.ColorScheme ||
                    this.ColorScheme.Equals(input.ColorScheme)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.IsAllowRegistrations == input.IsAllowRegistrations ||
                    (this.IsAllowRegistrations != null &&
                    this.IsAllowRegistrations.Equals(input.IsAllowRegistrations))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Handle != null)
                {
                    hashCode = (hashCode * 59) + this.Handle.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDefault.GetHashCode();
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsAutoMembershipEnabled.GetHashCode();
                if (this.Logo != null)
                {
                    hashCode = (hashCode * 59) + this.Logo.GetHashCode();
                }
                if (this.LogoDark != null)
                {
                    hashCode = (hashCode * 59) + this.LogoDark.GetHashCode();
                }
                if (this.FaviconSvg != null)
                {
                    hashCode = (hashCode * 59) + this.FaviconSvg.GetHashCode();
                }
                if (this.FaviconFallback != null)
                {
                    hashCode = (hashCode * 59) + this.FaviconFallback.GetHashCode();
                }
                if (this.LinkColor != null)
                {
                    hashCode = (hashCode * 59) + this.LinkColor.GetHashCode();
                }
                if (this.BackgroundColor != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundColor.GetHashCode();
                }
                if (this.ButtonColor != null)
                {
                    hashCode = (hashCode * 59) + this.ButtonColor.GetHashCode();
                }
                if (this.ButtonTextColor != null)
                {
                    hashCode = (hashCode * 59) + this.ButtonTextColor.GetHashCode();
                }
                if (this.LinkColorDark != null)
                {
                    hashCode = (hashCode * 59) + this.LinkColorDark.GetHashCode();
                }
                if (this.BackgroundColorDark != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundColorDark.GetHashCode();
                }
                if (this.ButtonTextColorDark != null)
                {
                    hashCode = (hashCode * 59) + this.ButtonTextColorDark.GetHashCode();
                }
                if (this.ButtonColorDark != null)
                {
                    hashCode = (hashCode * 59) + this.ButtonColorDark.GetHashCode();
                }
                if (this.ButtonBorderRadius != null)
                {
                    hashCode = (hashCode * 59) + this.ButtonBorderRadius.GetHashCode();
                }
                if (this.CardBorderRadius != null)
                {
                    hashCode = (hashCode * 59) + this.CardBorderRadius.GetHashCode();
                }
                if (this.InputBorderRadius != null)
                {
                    hashCode = (hashCode * 59) + this.InputBorderRadius.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ThemeCode.GetHashCode();
                hashCode = (hashCode * 59) + this.ColorScheme.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.IsAllowRegistrations != null)
                {
                    hashCode = (hashCode * 59) + this.IsAllowRegistrations.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
