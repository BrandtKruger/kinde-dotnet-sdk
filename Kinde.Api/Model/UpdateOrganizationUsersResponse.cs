/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    [DataContract(Name = "update_organization_users_response")]
    public partial class UpdateOrganizationUsersResponse : IEquatable<UpdateOrganizationUsersResponse>
    {
        /// <summary>
        /// </summary>
        /// <param name="message">message.</param>
        /// <param name="code">code.</param>
        /// <param name="usersAdded">usersAdded.</param>
        /// <param name="usersUpdated">usersUpdated.</param>
        /// <param name="usersRemoved">usersRemoved.</param>
        public UpdateOrganizationUsersResponse(string message = default(string), string code = default(string), List<string> usersAdded = default(List<string>), List<string> usersUpdated = default(List<string>), List<string> usersRemoved = default(List<string>))
        {
            this.Message = message;
            this.Code = code;
            this.UsersAdded = usersAdded;
            this.UsersUpdated = usersUpdated;
            this.UsersRemoved = usersRemoved;
        }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        /// <example>Success</example>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        /// <example>OK</example>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// </summary>
        [DataMember(Name = "users_added", EmitDefaultValue = false)]
        public List<string> UsersAdded { get; set; }

        /// <summary>
        /// </summary>
        [DataMember(Name = "users_updated", EmitDefaultValue = false)]
        public List<string> UsersUpdated { get; set; }

        /// <summary>
        /// </summary>
        [DataMember(Name = "users_removed", EmitDefaultValue = false)]
        public List<string> UsersRemoved { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateOrganizationUsersResponse {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  UsersAdded: ").Append(UsersAdded).Append("\n");
            sb.Append("  UsersUpdated: ").Append(UsersUpdated).Append("\n");
            sb.Append("  UsersRemoved: ").Append(UsersRemoved).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateOrganizationUsersResponse);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateOrganizationUsersResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.UsersAdded == input.UsersAdded ||
                    this.UsersAdded != null &&
                    input.UsersAdded != null &&
                    this.UsersAdded.SequenceEqual(input.UsersAdded)
                ) && 
                (
                    this.UsersUpdated == input.UsersUpdated ||
                    this.UsersUpdated != null &&
                    input.UsersUpdated != null &&
                    this.UsersUpdated.SequenceEqual(input.UsersUpdated)
                ) && 
                (
                    this.UsersRemoved == input.UsersRemoved ||
                    this.UsersRemoved != null &&
                    input.UsersRemoved != null &&
                    this.UsersRemoved.SequenceEqual(input.UsersRemoved)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.UsersAdded != null)
                {
                    hashCode = (hashCode * 59) + this.UsersAdded.GetHashCode();
                }
                if (this.UsersUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.UsersUpdated.GetHashCode();
                }
                if (this.UsersRemoved != null)
                {
                    hashCode = (hashCode * 59) + this.UsersRemoved.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
