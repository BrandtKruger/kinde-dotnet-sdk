/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetApiResponseApiApplicationsInner
    /// </summary>
    [DataContract(Name = "get_api_response_api_applications_inner")]
    public partial class GetApiResponseApiApplicationsInner : IEquatable<GetApiResponseApiApplicationsInner>, IValidatableObject
    {
        /// <summary>
        /// The application&#39;s type.
        /// </summary>
        /// <value>The application&#39;s type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum MachineToMachineM2M for value: Machine to machine (M2M)
            /// </summary>
            [EnumMember(Value = "Machine to machine (M2M)")]
            MachineToMachineM2M = 1,

            /// <summary>
            /// Enum BackEndWeb for value: Back-end web
            /// </summary>
            [EnumMember(Value = "Back-end web")]
            BackEndWeb = 2,

            /// <summary>
            /// Enum FrontEndAndMobile for value: Front-end and mobile
            /// </summary>
            [EnumMember(Value = "Front-end and mobile")]
            FrontEndAndMobile = 3
        }


        /// <summary>
        /// The application&#39;s type.
        /// </summary>
        /// <value>The application&#39;s type.</value>
        /// <example>Machine to machine (M2M)</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetApiResponseApiApplicationsInner" /> class.
        /// </summary>
        /// <param name="id">The Client ID of the application..</param>
        /// <param name="name">The application&#39;s name..</param>
        /// <param name="type">The application&#39;s type..</param>
        /// <param name="isActive">Whether or not the application is authorized to access the API.</param>
        public GetApiResponseApiApplicationsInner(string id = default(string), string name = default(string), TypeEnum? type = default(TypeEnum?), bool? isActive = default(bool?))
        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.IsActive = isActive;
        }

        /// <summary>
        /// The Client ID of the application.
        /// </summary>
        /// <value>The Client ID of the application.</value>
        /// <example>3b0b5c6c8fcc464fab397f4969b5f482</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The application&#39;s name.
        /// </summary>
        /// <value>The application&#39;s name.</value>
        /// <example>My M2M app</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether or not the application is authorized to access the API
        /// </summary>
        /// <value>Whether or not the application is authorized to access the API</value>
        /// <example>true</example>
        [DataMember(Name = "is_active", EmitDefaultValue = true)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetApiResponseApiApplicationsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetApiResponseApiApplicationsInner);
        }

        /// <summary>
        /// Returns true if GetApiResponseApiApplicationsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of GetApiResponseApiApplicationsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetApiResponseApiApplicationsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.IsActive != null)
                {
                    hashCode = (hashCode * 59) + this.IsActive.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
