/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// UpdateOrganizationRequest
    /// </summary>
    [DataContract(Name = "updateOrganization_request")]
    public partial class UpdateOrganizationRequest : IEquatable<UpdateOrganizationRequest>, IValidatableObject
    {
        /// <summary>
        /// The organization&#39;s brand settings - theme/mode.
        /// </summary>
        /// <value>The organization&#39;s brand settings - theme/mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ThemeCodeEnum
        {
            /// <summary>
            /// Enum Light for value: light
            /// </summary>
            [EnumMember(Value = "light")]
            Light = 1,

            /// <summary>
            /// Enum Dark for value: dark
            /// </summary>
            [EnumMember(Value = "dark")]
            Dark = 2,

            /// <summary>
            /// Enum UserPreference for value: user_preference
            /// </summary>
            [EnumMember(Value = "user_preference")]
            UserPreference = 3
        }


        /// <summary>
        /// The organization&#39;s brand settings - theme/mode.
        /// </summary>
        /// <value>The organization&#39;s brand settings - theme/mode.</value>
        /// <example>light</example>
        [DataMember(Name = "theme_code", EmitDefaultValue = false)]
        public ThemeCodeEnum? ThemeCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateOrganizationRequest" /> class.
        /// </summary>
        /// <param name="name">The organization&#39;s name..</param>
        /// <param name="externalId">The organization&#39;s ID..</param>
        /// <param name="backgroundColor">The organization&#39;s brand settings - background color..</param>
        /// <param name="buttonColor">The organization&#39;s brand settings - button color..</param>
        /// <param name="buttonTextColor">The organization&#39;s brand settings - button text color..</param>
        /// <param name="linkColor">The organization&#39;s brand settings - link color..</param>
        /// <param name="backgroundColorDark">The organization&#39;s brand settings - dark mode background color..</param>
        /// <param name="buttonColorDark">The organization&#39;s brand settings - dark mode button color..</param>
        /// <param name="buttonTextColorDark">The organization&#39;s brand settings - dark mode button text color..</param>
        /// <param name="linkColorDark">The organization&#39;s brand settings - dark mode link color..</param>
        /// <param name="themeCode">The organization&#39;s brand settings - theme/mode..</param>
        /// <param name="handle">The organization&#39;s handle..</param>
        /// <param name="isAllowRegistrations">Deprecated - Use &#39;is_auto_membership_enabled&#39; instead..</param>
        /// <param name="isCustomAuthConnectionsEnabled">Enable custom auth connections for this organization..</param>
        /// <param name="isAutoJoinDomainList">Users can sign up to this organization..</param>
        /// <param name="allowedDomains">Domains allowed for self-sign up to this environment..</param>
        public UpdateOrganizationRequest(string name = default(string), string externalId = default(string), string backgroundColor = default(string), string buttonColor = default(string), string buttonTextColor = default(string), string linkColor = default(string), string backgroundColorDark = default(string), string buttonColorDark = default(string), string buttonTextColorDark = default(string), string linkColorDark = default(string), ThemeCodeEnum? themeCode = default(ThemeCodeEnum?), string handle = default(string), bool isAllowRegistrations = default(bool), bool isCustomAuthConnectionsEnabled = default(bool), bool isAutoJoinDomainList = default(bool), List<string> allowedDomains = default(List<string>))
        {
            this.Name = name;
            this.ExternalId = externalId;
            this.BackgroundColor = backgroundColor;
            this.ButtonColor = buttonColor;
            this.ButtonTextColor = buttonTextColor;
            this.LinkColor = linkColor;
            this.BackgroundColorDark = backgroundColorDark;
            this.ButtonColorDark = buttonColorDark;
            this.ButtonTextColorDark = buttonTextColorDark;
            this.LinkColorDark = linkColorDark;
            this.ThemeCode = themeCode;
            this.Handle = handle;
            this.IsAllowRegistrations = isAllowRegistrations;
            this.IsCustomAuthConnectionsEnabled = isCustomAuthConnectionsEnabled;
            this.IsAutoJoinDomainList = isAutoJoinDomainList;
            this.AllowedDomains = allowedDomains;
        }

        /// <summary>
        /// The organization&#39;s name.
        /// </summary>
        /// <value>The organization&#39;s name.</value>
        /// <example>Acme Corp</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The organization&#39;s ID.
        /// </summary>
        /// <value>The organization&#39;s ID.</value>
        /// <example>some1234</example>
        [DataMember(Name = "external_id", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - background color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - background color.</value>
        /// <example>#fff</example>
        [DataMember(Name = "background_color", EmitDefaultValue = false)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - button color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - button color.</value>
        /// <example>#fff</example>
        [DataMember(Name = "button_color", EmitDefaultValue = false)]
        public string ButtonColor { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - button text color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - button text color.</value>
        /// <example>#fff</example>
        [DataMember(Name = "button_text_color", EmitDefaultValue = false)]
        public string ButtonTextColor { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - link color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - link color.</value>
        /// <example>#fff</example>
        [DataMember(Name = "link_color", EmitDefaultValue = false)]
        public string LinkColor { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode background color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode background color.</value>
        /// <example>#000</example>
        [DataMember(Name = "background_color_dark", EmitDefaultValue = false)]
        public string BackgroundColorDark { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode button color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode button color.</value>
        /// <example>#000</example>
        [DataMember(Name = "button_color_dark", EmitDefaultValue = false)]
        public string ButtonColorDark { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode button text color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode button text color.</value>
        /// <example>#000</example>
        [DataMember(Name = "button_text_color_dark", EmitDefaultValue = false)]
        public string ButtonTextColorDark { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode link color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode link color.</value>
        /// <example>#000</example>
        [DataMember(Name = "link_color_dark", EmitDefaultValue = false)]
        public string LinkColorDark { get; set; }

        /// <summary>
        /// The organization&#39;s handle.
        /// </summary>
        /// <value>The organization&#39;s handle.</value>
        /// <example>acme_corp</example>
        [DataMember(Name = "handle", EmitDefaultValue = false)]
        public string Handle { get; set; }

        /// <summary>
        /// Deprecated - Use &#39;is_auto_membership_enabled&#39; instead.
        /// </summary>
        /// <value>Deprecated - Use &#39;is_auto_membership_enabled&#39; instead.</value>
        [DataMember(Name = "is_allow_registrations", EmitDefaultValue = true)]
        [Obsolete]
        public bool IsAllowRegistrations { get; set; }

        /// <summary>
        /// Enable custom auth connections for this organization.
        /// </summary>
        /// <value>Enable custom auth connections for this organization.</value>
        /// <example>true</example>
        [DataMember(Name = "is_custom_auth_connections_enabled", EmitDefaultValue = true)]
        public bool IsCustomAuthConnectionsEnabled { get; set; }

        /// <summary>
        /// Users can sign up to this organization.
        /// </summary>
        /// <value>Users can sign up to this organization.</value>
        /// <example>true</example>
        [DataMember(Name = "is_auto_join_domain_list", EmitDefaultValue = true)]
        public bool IsAutoJoinDomainList { get; set; }

        /// <summary>
        /// Domains allowed for self-sign up to this environment.
        /// </summary>
        /// <value>Domains allowed for self-sign up to this environment.</value>
        /// <example>[&quot;https://acme.kinde.com&quot;,&quot;https://acme.com&quot;]</example>
        [DataMember(Name = "allowed_domains", EmitDefaultValue = false)]
        public List<string> AllowedDomains { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateOrganizationRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  ButtonColor: ").Append(ButtonColor).Append("\n");
            sb.Append("  ButtonTextColor: ").Append(ButtonTextColor).Append("\n");
            sb.Append("  LinkColor: ").Append(LinkColor).Append("\n");
            sb.Append("  BackgroundColorDark: ").Append(BackgroundColorDark).Append("\n");
            sb.Append("  ButtonColorDark: ").Append(ButtonColorDark).Append("\n");
            sb.Append("  ButtonTextColorDark: ").Append(ButtonTextColorDark).Append("\n");
            sb.Append("  LinkColorDark: ").Append(LinkColorDark).Append("\n");
            sb.Append("  ThemeCode: ").Append(ThemeCode).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  IsAllowRegistrations: ").Append(IsAllowRegistrations).Append("\n");
            sb.Append("  IsCustomAuthConnectionsEnabled: ").Append(IsCustomAuthConnectionsEnabled).Append("\n");
            sb.Append("  IsAutoJoinDomainList: ").Append(IsAutoJoinDomainList).Append("\n");
            sb.Append("  AllowedDomains: ").Append(AllowedDomains).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateOrganizationRequest);
        }

        /// <summary>
        /// Returns true if UpdateOrganizationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateOrganizationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateOrganizationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.BackgroundColor == input.BackgroundColor ||
                    (this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(input.BackgroundColor))
                ) && 
                (
                    this.ButtonColor == input.ButtonColor ||
                    (this.ButtonColor != null &&
                    this.ButtonColor.Equals(input.ButtonColor))
                ) && 
                (
                    this.ButtonTextColor == input.ButtonTextColor ||
                    (this.ButtonTextColor != null &&
                    this.ButtonTextColor.Equals(input.ButtonTextColor))
                ) && 
                (
                    this.LinkColor == input.LinkColor ||
                    (this.LinkColor != null &&
                    this.LinkColor.Equals(input.LinkColor))
                ) && 
                (
                    this.BackgroundColorDark == input.BackgroundColorDark ||
                    (this.BackgroundColorDark != null &&
                    this.BackgroundColorDark.Equals(input.BackgroundColorDark))
                ) && 
                (
                    this.ButtonColorDark == input.ButtonColorDark ||
                    (this.ButtonColorDark != null &&
                    this.ButtonColorDark.Equals(input.ButtonColorDark))
                ) && 
                (
                    this.ButtonTextColorDark == input.ButtonTextColorDark ||
                    (this.ButtonTextColorDark != null &&
                    this.ButtonTextColorDark.Equals(input.ButtonTextColorDark))
                ) && 
                (
                    this.LinkColorDark == input.LinkColorDark ||
                    (this.LinkColorDark != null &&
                    this.LinkColorDark.Equals(input.LinkColorDark))
                ) && 
                (
                    this.ThemeCode == input.ThemeCode ||
                    this.ThemeCode.Equals(input.ThemeCode)
                ) && 
                (
                    this.Handle == input.Handle ||
                    (this.Handle != null &&
                    this.Handle.Equals(input.Handle))
                ) && 
                (
                    this.IsAllowRegistrations == input.IsAllowRegistrations ||
                    this.IsAllowRegistrations.Equals(input.IsAllowRegistrations)
                ) && 
                (
                    this.IsCustomAuthConnectionsEnabled == input.IsCustomAuthConnectionsEnabled ||
                    this.IsCustomAuthConnectionsEnabled.Equals(input.IsCustomAuthConnectionsEnabled)
                ) && 
                (
                    this.IsAutoJoinDomainList == input.IsAutoJoinDomainList ||
                    this.IsAutoJoinDomainList.Equals(input.IsAutoJoinDomainList)
                ) && 
                (
                    this.AllowedDomains == input.AllowedDomains ||
                    this.AllowedDomains != null &&
                    input.AllowedDomains != null &&
                    this.AllowedDomains.SequenceEqual(input.AllowedDomains)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                if (this.BackgroundColor != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundColor.GetHashCode();
                }
                if (this.ButtonColor != null)
                {
                    hashCode = (hashCode * 59) + this.ButtonColor.GetHashCode();
                }
                if (this.ButtonTextColor != null)
                {
                    hashCode = (hashCode * 59) + this.ButtonTextColor.GetHashCode();
                }
                if (this.LinkColor != null)
                {
                    hashCode = (hashCode * 59) + this.LinkColor.GetHashCode();
                }
                if (this.BackgroundColorDark != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundColorDark.GetHashCode();
                }
                if (this.ButtonColorDark != null)
                {
                    hashCode = (hashCode * 59) + this.ButtonColorDark.GetHashCode();
                }
                if (this.ButtonTextColorDark != null)
                {
                    hashCode = (hashCode * 59) + this.ButtonTextColorDark.GetHashCode();
                }
                if (this.LinkColorDark != null)
                {
                    hashCode = (hashCode * 59) + this.LinkColorDark.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ThemeCode.GetHashCode();
                if (this.Handle != null)
                {
                    hashCode = (hashCode * 59) + this.Handle.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsAllowRegistrations.GetHashCode();
                hashCode = (hashCode * 59) + this.IsCustomAuthConnectionsEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsAutoJoinDomainList.GetHashCode();
                if (this.AllowedDomains != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedDomains.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
