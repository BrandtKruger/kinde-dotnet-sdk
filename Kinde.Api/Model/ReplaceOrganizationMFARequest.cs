/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// ReplaceOrganizationMFARequest
    /// </summary>
    [DataContract(Name = "ReplaceOrganizationMFA_request")]
    public partial class ReplaceOrganizationMFARequest : IEquatable<ReplaceOrganizationMFARequest>, IValidatableObject
    {
        /// <summary>
        /// Defines EnabledFactors
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnabledFactorsEnum
        {
            /// <summary>
            /// Enum Email for value: mfa:email
            /// </summary>
            [EnumMember(Value = "mfa:email")]
            Email = 1,

            /// <summary>
            /// Enum Sms for value: mfa:sms
            /// </summary>
            [EnumMember(Value = "mfa:sms")]
            Sms = 2,

            /// <summary>
            /// Enum AuthenticatorApp for value: mfa:authenticator_app
            /// </summary>
            [EnumMember(Value = "mfa:authenticator_app")]
            AuthenticatorApp = 3
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplaceOrganizationMFARequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReplaceOrganizationMFARequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplaceOrganizationMFARequest" /> class.
        /// </summary>
        /// <param name="enabledFactors">The MFA methods to enable. (required).</param>
        public ReplaceOrganizationMFARequest(List<EnabledFactorsEnum> enabledFactors = default(List<EnabledFactorsEnum>))
        {
            // to ensure "enabledFactors" is required (not null)
            if (enabledFactors == null)
            {
                throw new ArgumentNullException("enabledFactors is a required property for ReplaceOrganizationMFARequest and cannot be null");
            }
            this.EnabledFactors = enabledFactors;
        }

        /// <summary>
        /// The MFA methods to enable.
        /// </summary>
        /// <value>The MFA methods to enable.</value>
        [DataMember(Name = "enabled_factors", IsRequired = true, EmitDefaultValue = true)]
        public List<ReplaceOrganizationMFARequest.EnabledFactorsEnum> EnabledFactors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReplaceOrganizationMFARequest {\n");
            sb.Append("  EnabledFactors: ").Append(EnabledFactors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReplaceOrganizationMFARequest);
        }

        /// <summary>
        /// Returns true if ReplaceOrganizationMFARequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReplaceOrganizationMFARequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplaceOrganizationMFARequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EnabledFactors == input.EnabledFactors ||
                    this.EnabledFactors != null &&
                    input.EnabledFactors != null &&
                    this.EnabledFactors.SequenceEqual(input.EnabledFactors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnabledFactors != null)
                {
                    hashCode = (hashCode * 59) + this.EnabledFactors.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
