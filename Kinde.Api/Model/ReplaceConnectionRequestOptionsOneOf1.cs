/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// SAML connection options (e.g., Cloudflare SAML).
    /// </summary>
    [DataContract(Name = "ReplaceConnection_request_options_oneOf_1")]
    public partial class ReplaceConnectionRequestOptionsOneOf1 : IEquatable<ReplaceConnectionRequestOptionsOneOf1>
    {
        /// <summary>
        /// </summary>
        /// <param name="samlEntityId">SAML Entity ID..</param>
        /// <param name="samlAcsUrl">Assertion Consumer Service URL..</param>
        /// <param name="upstreamParams">Additional upstream parameters to pass to the identity provider..</param>
        public ReplaceConnectionRequestOptionsOneOf1(List<string> homeRealmDomains = default(List<string>), string samlEntityId = default(string), string samlAcsUrl = default(string), string samlIdpMetadataUrl = default(string), string samlEmailKeyAttr = default(string), string samlFirstNameKeyAttr = default(string), string samlLastNameKeyAttr = default(string), bool isCreateMissingUser = default(bool), bool isForceShowSsoButton = default(bool), Dictionary<string, Object> upstreamParams = default(Dictionary<string, Object>), string samlSigningCertificate = default(string), string samlSigningPrivateKey = default(string))
        {
            this.HomeRealmDomains = homeRealmDomains;
            this.SamlEntityId = samlEntityId;
            this.SamlAcsUrl = samlAcsUrl;
            this.SamlIdpMetadataUrl = samlIdpMetadataUrl;
            this.SamlEmailKeyAttr = samlEmailKeyAttr;
            this.SamlFirstNameKeyAttr = samlFirstNameKeyAttr;
            this.SamlLastNameKeyAttr = samlLastNameKeyAttr;
            this.IsCreateMissingUser = isCreateMissingUser;
            this.IsForceShowSsoButton = isForceShowSsoButton;
            this.UpstreamParams = upstreamParams;
            this.SamlSigningCertificate = samlSigningCertificate;
            this.SamlSigningPrivateKey = samlSigningPrivateKey;
        }

        /// <summary>
        /// List of domains to restrict authentication.
        /// </summary>
        /// <value>List of domains to restrict authentication.</value>
        /// <example>[&quot;@kinde.com&quot;,&quot;@kinde.io&quot;]</example>
        [DataMember(Name = "home_realm_domains", EmitDefaultValue = false)]
        public List<string> HomeRealmDomains { get; set; }

        /// <summary>
        /// SAML Entity ID.
        /// </summary>
        /// <value>SAML Entity ID.</value>
        /// <example>https://kinde.com</example>
        [DataMember(Name = "saml_entity_id", EmitDefaultValue = false)]
        public string SamlEntityId { get; set; }

        /// <summary>
        /// Assertion Consumer Service URL.
        /// </summary>
        /// <value>Assertion Consumer Service URL.</value>
        /// <example>https://kinde.com/saml/acs</example>
        [DataMember(Name = "saml_acs_url", EmitDefaultValue = false)]
        public string SamlAcsUrl { get; set; }

        /// <summary>
        /// URL for the IdP metadata.
        /// </summary>
        /// <value>URL for the IdP metadata.</value>
        [DataMember(Name = "saml_idp_metadata_url", EmitDefaultValue = false)]
        public string SamlIdpMetadataUrl { get; set; }

        /// <summary>
        /// Attribute key for the user’s email.
        /// </summary>
        /// <value>Attribute key for the user’s email.</value>
        /// <example>email</example>
        [DataMember(Name = "saml_email_key_attr", EmitDefaultValue = false)]
        public string SamlEmailKeyAttr { get; set; }

        /// <summary>
        /// Attribute key for the user’s first name.
        /// </summary>
        /// <value>Attribute key for the user’s first name.</value>
        /// <example>given_name</example>
        [DataMember(Name = "saml_first_name_key_attr", EmitDefaultValue = false)]
        public string SamlFirstNameKeyAttr { get; set; }

        /// <summary>
        /// Attribute key for the user’s last name.
        /// </summary>
        /// <value>Attribute key for the user’s last name.</value>
        /// <example>family_name</example>
        [DataMember(Name = "saml_last_name_key_attr", EmitDefaultValue = false)]
        public string SamlLastNameKeyAttr { get; set; }

        /// <summary>
        /// Create user if they don’t exist.
        /// </summary>
        /// <value>Create user if they don’t exist.</value>
        /// <example>true</example>
        [DataMember(Name = "is_create_missing_user", EmitDefaultValue = true)]
        public bool IsCreateMissingUser { get; set; }

        /// <summary>
        /// Force showing the SSO button for this connection.
        /// </summary>
        /// <value>Force showing the SSO button for this connection.</value>
        /// <example>false</example>
        [DataMember(Name = "is_force_show_sso_button", EmitDefaultValue = true)]
        public bool IsForceShowSsoButton { get; set; }

        /// <summary>
        /// Additional upstream parameters to pass to the identity provider.
        /// </summary>
        /// <value>Additional upstream parameters to pass to the identity provider.</value>
        /// <example>{&quot;prompt&quot;:{&quot;value&quot;:&quot;select_account&quot;}}</example>
        [DataMember(Name = "upstream_params", EmitDefaultValue = false)]
        public Dictionary<string, Object> UpstreamParams { get; set; }

        /// <summary>
        /// Certificate for signing SAML requests.
        /// </summary>
        /// <value>Certificate for signing SAML requests.</value>
        [DataMember(Name = "saml_signing_certificate", EmitDefaultValue = false)]
        public string SamlSigningCertificate { get; set; }

        /// <summary>
        /// Private key associated with the signing certificate.
        /// </summary>
        /// <value>Private key associated with the signing certificate.</value>
        [DataMember(Name = "saml_signing_private_key", EmitDefaultValue = false)]
        public string SamlSigningPrivateKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReplaceConnectionRequestOptionsOneOf1 {\n");
            sb.Append("  HomeRealmDomains: ").Append(HomeRealmDomains).Append("\n");
            sb.Append("  SamlEntityId: ").Append(SamlEntityId).Append("\n");
            sb.Append("  SamlAcsUrl: ").Append(SamlAcsUrl).Append("\n");
            sb.Append("  SamlIdpMetadataUrl: ").Append(SamlIdpMetadataUrl).Append("\n");
            sb.Append("  SamlEmailKeyAttr: ").Append(SamlEmailKeyAttr).Append("\n");
            sb.Append("  SamlFirstNameKeyAttr: ").Append(SamlFirstNameKeyAttr).Append("\n");
            sb.Append("  SamlLastNameKeyAttr: ").Append(SamlLastNameKeyAttr).Append("\n");
            sb.Append("  IsCreateMissingUser: ").Append(IsCreateMissingUser).Append("\n");
            sb.Append("  IsForceShowSsoButton: ").Append(IsForceShowSsoButton).Append("\n");
            sb.Append("  UpstreamParams: ").Append(UpstreamParams).Append("\n");
            sb.Append("  SamlSigningCertificate: ").Append(SamlSigningCertificate).Append("\n");
            sb.Append("  SamlSigningPrivateKey: ").Append(SamlSigningPrivateKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReplaceConnectionRequestOptionsOneOf1);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(ReplaceConnectionRequestOptionsOneOf1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HomeRealmDomains == input.HomeRealmDomains ||
                    this.HomeRealmDomains != null &&
                    input.HomeRealmDomains != null &&
                    this.HomeRealmDomains.SequenceEqual(input.HomeRealmDomains)
                ) && 
                (
                    this.SamlEntityId == input.SamlEntityId ||
                    (this.SamlEntityId != null &&
                    this.SamlEntityId.Equals(input.SamlEntityId))
                ) && 
                (
                    this.SamlAcsUrl == input.SamlAcsUrl ||
                    (this.SamlAcsUrl != null &&
                    this.SamlAcsUrl.Equals(input.SamlAcsUrl))
                ) && 
                (
                    this.SamlIdpMetadataUrl == input.SamlIdpMetadataUrl ||
                    (this.SamlIdpMetadataUrl != null &&
                    this.SamlIdpMetadataUrl.Equals(input.SamlIdpMetadataUrl))
                ) && 
                (
                    this.SamlEmailKeyAttr == input.SamlEmailKeyAttr ||
                    (this.SamlEmailKeyAttr != null &&
                    this.SamlEmailKeyAttr.Equals(input.SamlEmailKeyAttr))
                ) && 
                (
                    this.SamlFirstNameKeyAttr == input.SamlFirstNameKeyAttr ||
                    (this.SamlFirstNameKeyAttr != null &&
                    this.SamlFirstNameKeyAttr.Equals(input.SamlFirstNameKeyAttr))
                ) && 
                (
                    this.SamlLastNameKeyAttr == input.SamlLastNameKeyAttr ||
                    (this.SamlLastNameKeyAttr != null &&
                    this.SamlLastNameKeyAttr.Equals(input.SamlLastNameKeyAttr))
                ) && 
                (
                    this.IsCreateMissingUser == input.IsCreateMissingUser ||
                    this.IsCreateMissingUser.Equals(input.IsCreateMissingUser)
                ) && 
                (
                    this.IsForceShowSsoButton == input.IsForceShowSsoButton ||
                    this.IsForceShowSsoButton.Equals(input.IsForceShowSsoButton)
                ) && 
                (
                    this.UpstreamParams == input.UpstreamParams ||
                    this.UpstreamParams != null &&
                    input.UpstreamParams != null &&
                    this.UpstreamParams.SequenceEqual(input.UpstreamParams)
                ) && 
                (
                    this.SamlSigningCertificate == input.SamlSigningCertificate ||
                    (this.SamlSigningCertificate != null &&
                    this.SamlSigningCertificate.Equals(input.SamlSigningCertificate))
                ) && 
                (
                    this.SamlSigningPrivateKey == input.SamlSigningPrivateKey ||
                    (this.SamlSigningPrivateKey != null &&
                    this.SamlSigningPrivateKey.Equals(input.SamlSigningPrivateKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HomeRealmDomains != null)
                {
                    hashCode = (hashCode * 59) + this.HomeRealmDomains.GetHashCode();
                }
                if (this.SamlEntityId != null)
                {
                    hashCode = (hashCode * 59) + this.SamlEntityId.GetHashCode();
                }
                if (this.SamlAcsUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SamlAcsUrl.GetHashCode();
                }
                if (this.SamlIdpMetadataUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SamlIdpMetadataUrl.GetHashCode();
                }
                if (this.SamlEmailKeyAttr != null)
                {
                    hashCode = (hashCode * 59) + this.SamlEmailKeyAttr.GetHashCode();
                }
                if (this.SamlFirstNameKeyAttr != null)
                {
                    hashCode = (hashCode * 59) + this.SamlFirstNameKeyAttr.GetHashCode();
                }
                if (this.SamlLastNameKeyAttr != null)
                {
                    hashCode = (hashCode * 59) + this.SamlLastNameKeyAttr.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCreateMissingUser.GetHashCode();
                hashCode = (hashCode * 59) + this.IsForceShowSsoButton.GetHashCode();
                if (this.UpstreamParams != null)
                {
                    hashCode = (hashCode * 59) + this.UpstreamParams.GetHashCode();
                }
                if (this.SamlSigningCertificate != null)
                {
                    hashCode = (hashCode * 59) + this.SamlSigningCertificate.GetHashCode();
                }
                if (this.SamlSigningPrivateKey != null)
                {
                    hashCode = (hashCode * 59) + this.SamlSigningPrivateKey.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
