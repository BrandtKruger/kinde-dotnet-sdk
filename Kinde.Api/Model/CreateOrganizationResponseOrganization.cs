/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    [DataContract(Name = "create_organization_response_organization")]
    public partial class CreateOrganizationResponseOrganization : IEquatable<CreateOrganizationResponseOrganization>
    {
        /// <summary>
        /// </summary>
        /// <param name="code">The organization&#39;s unique code..</param>
        public CreateOrganizationResponseOrganization(string code = default(string), string billingCustomerId = default(string))
        {
            this.Code = code;
            this.BillingCustomerId = billingCustomerId;
        }

        /// <summary>
        /// The organization&#39;s unique code.
        /// </summary>
        /// <value>The organization&#39;s unique code.</value>
        /// <example>org_1ccfb819462</example>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// The billing customer id if the organization was created with the is_create_billing_customer as true
        /// </summary>
        /// <value>The billing customer id if the organization was created with the is_create_billing_customer as true</value>
        /// <example>customer_1245adbc6789</example>
        [DataMember(Name = "billing_customer_id", EmitDefaultValue = false)]
        public string BillingCustomerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateOrganizationResponseOrganization {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  BillingCustomerId: ").Append(BillingCustomerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateOrganizationResponseOrganization);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrganizationResponseOrganization input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.BillingCustomerId == input.BillingCustomerId ||
                    (this.BillingCustomerId != null &&
                    this.BillingCustomerId.Equals(input.BillingCustomerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.BillingCustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.BillingCustomerId.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
