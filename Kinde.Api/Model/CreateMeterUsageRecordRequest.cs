/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    [DataContract(Name = "createMeterUsageRecord_request")]
    public partial class CreateMeterUsageRecordRequest : IEquatable<CreateMeterUsageRecordRequest>
    {
        /// <summary>
        /// Absolutes overrides the current usage
        /// </summary>
        /// <value>Absolutes overrides the current usage</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MeterTypeCodeEnum
        {
            /// <summary>
            /// Enum Absolute for value: absolute
            /// </summary>
            [EnumMember(Value = "absolute")]
            Absolute = 1,

            /// <summary>
            /// Enum Delta for value: delta
            /// </summary>
            [EnumMember(Value = "delta")]
            Delta = 2
        }


        /// <summary>
        /// Absolutes overrides the current usage
        /// </summary>
        /// <value>Absolutes overrides the current usage</value>
        [DataMember(Name = "meter_type_code", EmitDefaultValue = false)]
        public MeterTypeCodeEnum? MeterTypeCode { get; set; }
        /// <summary>
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateMeterUsageRecordRequest() { }
        /// <summary>
        /// </summary>
        /// <param name="meterValue">The value of usage to record (required).</param>
        /// <param name="meterTypeCode">Absolutes overrides the current usage.</param>
        public CreateMeterUsageRecordRequest(string customerAgreementId = default(string), string billingFeatureCode = default(string), string meterValue = default(string), DateTimeOffset meterUsageTimestamp = default(DateTimeOffset), MeterTypeCodeEnum? meterTypeCode = default(MeterTypeCodeEnum?))
        {
            // to ensure "customerAgreementId" is required (not null)
            if (customerAgreementId == null)
            {
                throw new ArgumentNullException("customerAgreementId is a required property for CreateMeterUsageRecordRequest and cannot be null");
            }
            this.CustomerAgreementId = customerAgreementId;
            // to ensure "billingFeatureCode" is required (not null)
            if (billingFeatureCode == null)
            {
                throw new ArgumentNullException("billingFeatureCode is a required property for CreateMeterUsageRecordRequest and cannot be null");
            }
            this.BillingFeatureCode = billingFeatureCode;
            // to ensure "meterValue" is required (not null)
            if (meterValue == null)
            {
                throw new ArgumentNullException("meterValue is a required property for CreateMeterUsageRecordRequest and cannot be null");
            }
            this.MeterValue = meterValue;
            this.MeterUsageTimestamp = meterUsageTimestamp;
            this.MeterTypeCode = meterTypeCode;
        }

        /// <summary>
        /// The billing agreement against which to record usage
        /// </summary>
        /// <value>The billing agreement against which to record usage</value>
        [DataMember(Name = "customer_agreement_id", IsRequired = true, EmitDefaultValue = true)]
        public string CustomerAgreementId { get; set; }

        /// <summary>
        /// The code of the feature within the agreement against which to record usage
        /// </summary>
        /// <value>The code of the feature within the agreement against which to record usage</value>
        /// <example>pro_gym</example>
        [DataMember(Name = "billing_feature_code", IsRequired = true, EmitDefaultValue = true)]
        public string BillingFeatureCode { get; set; }

        /// <summary>
        /// The value of usage to record
        /// </summary>
        /// <value>The value of usage to record</value>
        /// <example>pro_gym</example>
        [DataMember(Name = "meter_value", IsRequired = true, EmitDefaultValue = true)]
        public string MeterValue { get; set; }

        /// <summary>
        /// The date and time the usage needs to be recorded for (defaults to current date/time)
        /// </summary>
        /// <value>The date and time the usage needs to be recorded for (defaults to current date/time)</value>
        /// <example>2024-11-18T13:32:03+11:00</example>
        [DataMember(Name = "meter_usage_timestamp", EmitDefaultValue = false)]
        public DateTimeOffset MeterUsageTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateMeterUsageRecordRequest {\n");
            sb.Append("  CustomerAgreementId: ").Append(CustomerAgreementId).Append("\n");
            sb.Append("  BillingFeatureCode: ").Append(BillingFeatureCode).Append("\n");
            sb.Append("  MeterValue: ").Append(MeterValue).Append("\n");
            sb.Append("  MeterUsageTimestamp: ").Append(MeterUsageTimestamp).Append("\n");
            sb.Append("  MeterTypeCode: ").Append(MeterTypeCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateMeterUsageRecordRequest);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(CreateMeterUsageRecordRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerAgreementId == input.CustomerAgreementId ||
                    (this.CustomerAgreementId != null &&
                    this.CustomerAgreementId.Equals(input.CustomerAgreementId))
                ) && 
                (
                    this.BillingFeatureCode == input.BillingFeatureCode ||
                    (this.BillingFeatureCode != null &&
                    this.BillingFeatureCode.Equals(input.BillingFeatureCode))
                ) && 
                (
                    this.MeterValue == input.MeterValue ||
                    (this.MeterValue != null &&
                    this.MeterValue.Equals(input.MeterValue))
                ) && 
                (
                    this.MeterUsageTimestamp == input.MeterUsageTimestamp ||
                    (this.MeterUsageTimestamp != null &&
                    this.MeterUsageTimestamp.Equals(input.MeterUsageTimestamp))
                ) && 
                (
                    this.MeterTypeCode == input.MeterTypeCode ||
                    this.MeterTypeCode.Equals(input.MeterTypeCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerAgreementId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerAgreementId.GetHashCode();
                }
                if (this.BillingFeatureCode != null)
                {
                    hashCode = (hashCode * 59) + this.BillingFeatureCode.GetHashCode();
                }
                if (this.MeterValue != null)
                {
                    hashCode = (hashCode * 59) + this.MeterValue.GetHashCode();
                }
                if (this.MeterUsageTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.MeterUsageTimestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MeterTypeCode.GetHashCode();
                return hashCode;
            }
        }

    }

}
