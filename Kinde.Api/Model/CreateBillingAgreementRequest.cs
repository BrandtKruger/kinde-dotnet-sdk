/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// CreateBillingAgreementRequest
    /// </summary>
    [DataContract(Name = "createBillingAgreement_request")]
    public partial class CreateBillingAgreementRequest : IEquatable<CreateBillingAgreementRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBillingAgreementRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateBillingAgreementRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBillingAgreementRequest" /> class.
        /// </summary>
        /// <param name="customerId">The ID of the billing customer to create a new agreement for (required).</param>
        /// <param name="planCode">The code of the billing plan the new agreement will be based on (required).</param>
        /// <param name="isInvoiceNow">Generate a final invoice for any un-invoiced metered usage..</param>
        /// <param name="isProrate">Generate a proration invoice item that credits remaining unused features..</param>
        public CreateBillingAgreementRequest(string customerId = default(string), string planCode = default(string), bool isInvoiceNow = default(bool), bool isProrate = default(bool))
        {
            // to ensure "customerId" is required (not null)
            if (customerId == null)
            {
                throw new ArgumentNullException("customerId is a required property for CreateBillingAgreementRequest and cannot be null");
            }
            this.CustomerId = customerId;
            // to ensure "planCode" is required (not null)
            if (planCode == null)
            {
                throw new ArgumentNullException("planCode is a required property for CreateBillingAgreementRequest and cannot be null");
            }
            this.PlanCode = planCode;
            this.IsInvoiceNow = isInvoiceNow;
            this.IsProrate = isProrate;
        }

        /// <summary>
        /// The ID of the billing customer to create a new agreement for
        /// </summary>
        /// <value>The ID of the billing customer to create a new agreement for</value>
        /// <example>customer_0195ac80a14c2ca2cec97d026d864de0</example>
        [DataMember(Name = "customer_id", IsRequired = true, EmitDefaultValue = true)]
        public string CustomerId { get; set; }

        /// <summary>
        /// The code of the billing plan the new agreement will be based on
        /// </summary>
        /// <value>The code of the billing plan the new agreement will be based on</value>
        /// <example>pro</example>
        [DataMember(Name = "plan_code", IsRequired = true, EmitDefaultValue = true)]
        public string PlanCode { get; set; }

        /// <summary>
        /// Generate a final invoice for any un-invoiced metered usage.
        /// </summary>
        /// <value>Generate a final invoice for any un-invoiced metered usage.</value>
        /// <example>true</example>
        [DataMember(Name = "is_invoice_now", EmitDefaultValue = true)]
        public bool IsInvoiceNow { get; set; }

        /// <summary>
        /// Generate a proration invoice item that credits remaining unused features.
        /// </summary>
        /// <value>Generate a proration invoice item that credits remaining unused features.</value>
        /// <example>true</example>
        [DataMember(Name = "is_prorate", EmitDefaultValue = true)]
        public bool IsProrate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateBillingAgreementRequest {\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  PlanCode: ").Append(PlanCode).Append("\n");
            sb.Append("  IsInvoiceNow: ").Append(IsInvoiceNow).Append("\n");
            sb.Append("  IsProrate: ").Append(IsProrate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateBillingAgreementRequest);
        }

        /// <summary>
        /// Returns true if CreateBillingAgreementRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateBillingAgreementRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateBillingAgreementRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.PlanCode == input.PlanCode ||
                    (this.PlanCode != null &&
                    this.PlanCode.Equals(input.PlanCode))
                ) && 
                (
                    this.IsInvoiceNow == input.IsInvoiceNow ||
                    this.IsInvoiceNow.Equals(input.IsInvoiceNow)
                ) && 
                (
                    this.IsProrate == input.IsProrate ||
                    this.IsProrate.Equals(input.IsProrate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerId.GetHashCode();
                }
                if (this.PlanCode != null)
                {
                    hashCode = (hashCode * 59) + this.PlanCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsInvoiceNow.GetHashCode();
                hashCode = (hashCode * 59) + this.IsProrate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
