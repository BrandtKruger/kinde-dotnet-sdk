/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    [DataContract(Name = "get_business_response_business")]
    public partial class GetBusinessResponseBusiness : IEquatable<GetBusinessResponseBusiness>
    {
        /// <summary>
        /// </summary>
        /// <param name="code">The unique ID for the business..</param>
        /// <param name="name">Your business&#39;s name..</param>
        /// <param name="phone">Phone number associated with business..</param>
        /// <param name="email">Email address associated with business..</param>
        /// <param name="industry">The industry your business is in..</param>
        /// <param name="timezone">The timezone your business is in..</param>
        /// <param name="privacyUrl">Your Privacy policy URL..</param>
        /// <param name="termsUrl">Your Terms and Conditions URL..</param>
        /// <param name="hasClickwrap">Whether your business uses clickwrap agreements..</param>
        /// <param name="createdOn">Date of business creation in ISO 8601 format..</param>
        public GetBusinessResponseBusiness(string code = default(string), string name = default(string), string phone = default(string), string email = default(string), string industry = default(string), string timezone = default(string), string privacyUrl = default(string), string termsUrl = default(string), bool hasClickwrap = default(bool), bool hasKindeBranding = default(bool), string createdOn = default(string))
        {
            this.Code = code;
            this.Name = name;
            this.Phone = phone;
            this.Email = email;
            this.Industry = industry;
            this.Timezone = timezone;
            this.PrivacyUrl = privacyUrl;
            this.TermsUrl = termsUrl;
            this.HasClickwrap = hasClickwrap;
            this.HasKindeBranding = hasKindeBranding;
            this.CreatedOn = createdOn;
        }

        /// <summary>
        /// The unique ID for the business.
        /// </summary>
        /// <value>The unique ID for the business.</value>
        /// <example>bus_c69fb73b091</example>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Your business&#39;s name.
        /// </summary>
        /// <value>Your business&#39;s name.</value>
        /// <example>Tailsforce Ltd</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Phone number associated with business.
        /// </summary>
        /// <value>Phone number associated with business.</value>
        /// <example>555-555-5555</example>
        [DataMember(Name = "phone", EmitDefaultValue = true)]
        public string Phone { get; set; }

        /// <summary>
        /// Email address associated with business.
        /// </summary>
        /// <value>Email address associated with business.</value>
        /// <example>sally@example.com</example>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// The industry your business is in.
        /// </summary>
        /// <value>The industry your business is in.</value>
        /// <example>Healthcare &amp; Medical</example>
        [DataMember(Name = "industry", EmitDefaultValue = true)]
        public string Industry { get; set; }

        /// <summary>
        /// The timezone your business is in.
        /// </summary>
        /// <value>The timezone your business is in.</value>
        /// <example>Los Angeles (Pacific Standard Time)</example>
        [DataMember(Name = "timezone", EmitDefaultValue = true)]
        public string Timezone { get; set; }

        /// <summary>
        /// Your Privacy policy URL.
        /// </summary>
        /// <value>Your Privacy policy URL.</value>
        /// <example>https://example.com/privacy</example>
        [DataMember(Name = "privacy_url", EmitDefaultValue = true)]
        public string PrivacyUrl { get; set; }

        /// <summary>
        /// Your Terms and Conditions URL.
        /// </summary>
        /// <value>Your Terms and Conditions URL.</value>
        /// <example>https://example.com/terms</example>
        [DataMember(Name = "terms_url", EmitDefaultValue = true)]
        public string TermsUrl { get; set; }

        /// <summary>
        /// Whether your business uses clickwrap agreements.
        /// </summary>
        /// <value>Whether your business uses clickwrap agreements.</value>
        /// <example>false</example>
        [DataMember(Name = "has_clickwrap", EmitDefaultValue = true)]
        public bool HasClickwrap { get; set; }

        /// <summary>
        /// Whether your business shows Kinde branding.
        /// </summary>
        /// <value>Whether your business shows Kinde branding.</value>
        /// <example>true</example>
        [DataMember(Name = "has_kinde_branding", EmitDefaultValue = true)]
        public bool HasKindeBranding { get; set; }

        /// <summary>
        /// Date of business creation in ISO 8601 format.
        /// </summary>
        /// <value>Date of business creation in ISO 8601 format.</value>
        /// <example>2021-01-01T00:00:00Z</example>
        [DataMember(Name = "created_on", EmitDefaultValue = false)]
        public string CreatedOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetBusinessResponseBusiness {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Industry: ").Append(Industry).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  PrivacyUrl: ").Append(PrivacyUrl).Append("\n");
            sb.Append("  TermsUrl: ").Append(TermsUrl).Append("\n");
            sb.Append("  HasClickwrap: ").Append(HasClickwrap).Append("\n");
            sb.Append("  HasKindeBranding: ").Append(HasKindeBranding).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetBusinessResponseBusiness);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(GetBusinessResponseBusiness input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Industry == input.Industry ||
                    (this.Industry != null &&
                    this.Industry.Equals(input.Industry))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.PrivacyUrl == input.PrivacyUrl ||
                    (this.PrivacyUrl != null &&
                    this.PrivacyUrl.Equals(input.PrivacyUrl))
                ) && 
                (
                    this.TermsUrl == input.TermsUrl ||
                    (this.TermsUrl != null &&
                    this.TermsUrl.Equals(input.TermsUrl))
                ) && 
                (
                    this.HasClickwrap == input.HasClickwrap ||
                    this.HasClickwrap.Equals(input.HasClickwrap)
                ) && 
                (
                    this.HasKindeBranding == input.HasKindeBranding ||
                    this.HasKindeBranding.Equals(input.HasKindeBranding)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Industry != null)
                {
                    hashCode = (hashCode * 59) + this.Industry.GetHashCode();
                }
                if (this.Timezone != null)
                {
                    hashCode = (hashCode * 59) + this.Timezone.GetHashCode();
                }
                if (this.PrivacyUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PrivacyUrl.GetHashCode();
                }
                if (this.TermsUrl != null)
                {
                    hashCode = (hashCode * 59) + this.TermsUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasClickwrap.GetHashCode();
                hashCode = (hashCode * 59) + this.HasKindeBranding.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
