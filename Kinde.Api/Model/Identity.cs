/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// Identity
    /// </summary>
    [DataContract(Name = "identity")]
    public partial class Identity : IEquatable<Identity>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Identity" /> class.
        /// </summary>
        /// <param name="id">The unique ID for the identity.</param>
        /// <param name="type">The type of identity.</param>
        /// <param name="isConfirmed">Whether the identity is confirmed.</param>
        /// <param name="createdOn">Date of user creation in ISO 8601 format.</param>
        /// <param name="lastLoginOn">Date of last login in ISO 8601 format.</param>
        /// <param name="totalLogins">totalLogins.</param>
        /// <param name="name">The value of the identity.</param>
        /// <param name="email">The associated email of the identity.</param>
        /// <param name="isPrimary">Whether the identity is the primary identity for the user.</param>
        public Identity(string id = default(string), string type = default(string), bool isConfirmed = default(bool), string createdOn = default(string), string lastLoginOn = default(string), int totalLogins = default(int), string name = default(string), string email = default(string), bool? isPrimary = default(bool?))
        {
            this.Id = id;
            this.Type = type;
            this.IsConfirmed = isConfirmed;
            this.CreatedOn = createdOn;
            this.LastLoginOn = lastLoginOn;
            this.TotalLogins = totalLogins;
            this.Name = name;
            this.Email = email;
            this.IsPrimary = isPrimary;
        }

        /// <summary>
        /// The unique ID for the identity
        /// </summary>
        /// <value>The unique ID for the identity</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The type of identity
        /// </summary>
        /// <value>The type of identity</value>
        /// <example>email</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Whether the identity is confirmed
        /// </summary>
        /// <value>Whether the identity is confirmed</value>
        /// <example>true</example>
        [DataMember(Name = "is_confirmed", EmitDefaultValue = true)]
        public bool IsConfirmed { get; set; }

        /// <summary>
        /// Date of user creation in ISO 8601 format
        /// </summary>
        /// <value>Date of user creation in ISO 8601 format</value>
        /// <example>2025-01-01T00:00:00Z</example>
        [DataMember(Name = "created_on", EmitDefaultValue = false)]
        public string CreatedOn { get; set; }

        /// <summary>
        /// Date of last login in ISO 8601 format
        /// </summary>
        /// <value>Date of last login in ISO 8601 format</value>
        /// <example>2025-01-05T00:00:00Z</example>
        [DataMember(Name = "last_login_on", EmitDefaultValue = false)]
        public string LastLoginOn { get; set; }

        /// <summary>
        /// </summary>
        /// <example>20</example>
        [DataMember(Name = "total_logins", EmitDefaultValue = false)]
        public int TotalLogins { get; set; }

        /// <summary>
        /// The value of the identity
        /// </summary>
        /// <value>The value of the identity</value>
        /// <example>sally@example.com</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The associated email of the identity
        /// </summary>
        /// <value>The associated email of the identity</value>
        /// <example>sally@example.com</example>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Whether the identity is the primary identity for the user
        /// </summary>
        /// <value>Whether the identity is the primary identity for the user</value>
        /// <example>true</example>
        [DataMember(Name = "is_primary", EmitDefaultValue = true)]
        public bool? IsPrimary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Identity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsConfirmed: ").Append(IsConfirmed).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  LastLoginOn: ").Append(LastLoginOn).Append("\n");
            sb.Append("  TotalLogins: ").Append(TotalLogins).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Identity);
        }

        /// <summary>
        /// Returns true if Identity instances are equal
        /// </summary>
        /// <param name="input">Instance of Identity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Identity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.IsConfirmed == input.IsConfirmed ||
                    this.IsConfirmed.Equals(input.IsConfirmed)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.LastLoginOn == input.LastLoginOn ||
                    (this.LastLoginOn != null &&
                    this.LastLoginOn.Equals(input.LastLoginOn))
                ) && 
                (
                    this.TotalLogins == input.TotalLogins ||
                    this.TotalLogins.Equals(input.TotalLogins)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsConfirmed.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.LastLoginOn != null)
                {
                    hashCode = (hashCode * 59) + this.LastLoginOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalLogins.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.IsPrimary != null)
                {
                    hashCode = (hashCode * 59) + this.IsPrimary.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
