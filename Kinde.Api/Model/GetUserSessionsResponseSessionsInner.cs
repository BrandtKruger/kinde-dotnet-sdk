/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetUserSessionsResponseSessionsInner
    /// </summary>
    [DataContract(Name = "get_user_sessions_response_sessions_inner")]
    public partial class GetUserSessionsResponseSessionsInner : IEquatable<GetUserSessionsResponseSessionsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserSessionsResponseSessionsInner" /> class.
        /// </summary>
        /// <param name="userId">The unique identifier of the user associated with the session..</param>
        /// <param name="orgCode">The organization code associated with the session, if applicable..</param>
        /// <param name="clientId">The client ID used to initiate the session..</param>
        /// <param name="expiresOn">The timestamp indicating when the session will expire..</param>
        /// <param name="sessionId">The unique identifier of the session..</param>
        /// <param name="startedOn">The timestamp when the session was initiated..</param>
        /// <param name="updatedOn">The timestamp of the last update to the session..</param>
        /// <param name="connectionId">The identifier of the connection through which the session was established..</param>
        /// <param name="lastIpAddress">The last known IP address of the user during this session..</param>
        /// <param name="lastUserAgent">The last known user agent (browser or app) used during this session..</param>
        /// <param name="initialIpAddress">The IP address from which the session was initially started..</param>
        /// <param name="initialUserAgent">The user agent (browser or app) used when the session was first created..</param>
        public GetUserSessionsResponseSessionsInner(string userId = default(string), string orgCode = default(string), string clientId = default(string), DateTime expiresOn = default(DateTime), string sessionId = default(string), DateTime startedOn = default(DateTime), DateTime updatedOn = default(DateTime), string connectionId = default(string), string lastIpAddress = default(string), string lastUserAgent = default(string), string initialIpAddress = default(string), string initialUserAgent = default(string))
        {
            this.UserId = userId;
            this.OrgCode = orgCode;
            this.ClientId = clientId;
            this.ExpiresOn = expiresOn;
            this.SessionId = sessionId;
            this.StartedOn = startedOn;
            this.UpdatedOn = updatedOn;
            this.ConnectionId = connectionId;
            this.LastIpAddress = lastIpAddress;
            this.LastUserAgent = lastUserAgent;
            this.InitialIpAddress = initialIpAddress;
            this.InitialUserAgent = initialUserAgent;
        }

        /// <summary>
        /// The unique identifier of the user associated with the session.
        /// </summary>
        /// <value>The unique identifier of the user associated with the session.</value>
        /// <example>kp_5fc30d0547734f30aca617450202169f</example>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// The organization code associated with the session, if applicable.
        /// </summary>
        /// <value>The organization code associated with the session, if applicable.</value>
        /// <example>org_1ccfb819462</example>
        [DataMember(Name = "org_code", EmitDefaultValue = true)]
        public string OrgCode { get; set; }

        /// <summary>
        /// The client ID used to initiate the session.
        /// </summary>
        /// <value>The client ID used to initiate the session.</value>
        /// <example>3b0b5c6c8fcc464fab397f4969b5f482</example>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// The timestamp indicating when the session will expire.
        /// </summary>
        /// <value>The timestamp indicating when the session will expire.</value>
        /// <example>2025-04-02T13:04:20.315701+11:00</example>
        [DataMember(Name = "expires_on", EmitDefaultValue = false)]
        public DateTime ExpiresOn { get; set; }

        /// <summary>
        /// The unique identifier of the session.
        /// </summary>
        /// <value>The unique identifier of the session.</value>
        /// <example>session_0xc75ec12fe8434ffc9d527794f00692e5</example>
        [DataMember(Name = "session_id", EmitDefaultValue = false)]
        public string SessionId { get; set; }

        /// <summary>
        /// The timestamp when the session was initiated.
        /// </summary>
        /// <value>The timestamp when the session was initiated.</value>
        /// <example>2025-04-01T13:04:20.315701+11:00</example>
        [DataMember(Name = "started_on", EmitDefaultValue = false)]
        public DateTime StartedOn { get; set; }

        /// <summary>
        /// The timestamp of the last update to the session.
        /// </summary>
        /// <value>The timestamp of the last update to the session.</value>
        /// <example>2025-04-01T13:04:20+11:00</example>
        [DataMember(Name = "updated_on", EmitDefaultValue = false)]
        public DateTime UpdatedOn { get; set; }

        /// <summary>
        /// The identifier of the connection through which the session was established.
        /// </summary>
        /// <value>The identifier of the connection through which the session was established.</value>
        /// <example>conn_75ab8ec0faae4f73bae9fc64daf120c9</example>
        [DataMember(Name = "connection_id", EmitDefaultValue = false)]
        public string ConnectionId { get; set; }

        /// <summary>
        /// The last known IP address of the user during this session.
        /// </summary>
        /// <value>The last known IP address of the user during this session.</value>
        /// <example>192.168.65.1</example>
        [DataMember(Name = "last_ip_address", EmitDefaultValue = false)]
        public string LastIpAddress { get; set; }

        /// <summary>
        /// The last known user agent (browser or app) used during this session.
        /// </summary>
        /// <value>The last known user agent (browser or app) used during this session.</value>
        /// <example>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</example>
        [DataMember(Name = "last_user_agent", EmitDefaultValue = false)]
        public string LastUserAgent { get; set; }

        /// <summary>
        /// The IP address from which the session was initially started.
        /// </summary>
        /// <value>The IP address from which the session was initially started.</value>
        /// <example>192.168.65.1</example>
        [DataMember(Name = "initial_ip_address", EmitDefaultValue = false)]
        public string InitialIpAddress { get; set; }

        /// <summary>
        /// The user agent (browser or app) used when the session was first created.
        /// </summary>
        /// <value>The user agent (browser or app) used when the session was first created.</value>
        /// <example>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</example>
        [DataMember(Name = "initial_user_agent", EmitDefaultValue = false)]
        public string InitialUserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserSessionsResponseSessionsInner {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  OrgCode: ").Append(OrgCode).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ExpiresOn: ").Append(ExpiresOn).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  StartedOn: ").Append(StartedOn).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("  ConnectionId: ").Append(ConnectionId).Append("\n");
            sb.Append("  LastIpAddress: ").Append(LastIpAddress).Append("\n");
            sb.Append("  LastUserAgent: ").Append(LastUserAgent).Append("\n");
            sb.Append("  InitialIpAddress: ").Append(InitialIpAddress).Append("\n");
            sb.Append("  InitialUserAgent: ").Append(InitialUserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUserSessionsResponseSessionsInner);
        }

        /// <summary>
        /// Returns true if GetUserSessionsResponseSessionsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUserSessionsResponseSessionsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUserSessionsResponseSessionsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.OrgCode == input.OrgCode ||
                    (this.OrgCode != null &&
                    this.OrgCode.Equals(input.OrgCode))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ExpiresOn == input.ExpiresOn ||
                    (this.ExpiresOn != null &&
                    this.ExpiresOn.Equals(input.ExpiresOn))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.StartedOn == input.StartedOn ||
                    (this.StartedOn != null &&
                    this.StartedOn.Equals(input.StartedOn))
                ) && 
                (
                    this.UpdatedOn == input.UpdatedOn ||
                    (this.UpdatedOn != null &&
                    this.UpdatedOn.Equals(input.UpdatedOn))
                ) && 
                (
                    this.ConnectionId == input.ConnectionId ||
                    (this.ConnectionId != null &&
                    this.ConnectionId.Equals(input.ConnectionId))
                ) && 
                (
                    this.LastIpAddress == input.LastIpAddress ||
                    (this.LastIpAddress != null &&
                    this.LastIpAddress.Equals(input.LastIpAddress))
                ) && 
                (
                    this.LastUserAgent == input.LastUserAgent ||
                    (this.LastUserAgent != null &&
                    this.LastUserAgent.Equals(input.LastUserAgent))
                ) && 
                (
                    this.InitialIpAddress == input.InitialIpAddress ||
                    (this.InitialIpAddress != null &&
                    this.InitialIpAddress.Equals(input.InitialIpAddress))
                ) && 
                (
                    this.InitialUserAgent == input.InitialUserAgent ||
                    (this.InitialUserAgent != null &&
                    this.InitialUserAgent.Equals(input.InitialUserAgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.OrgCode != null)
                {
                    hashCode = (hashCode * 59) + this.OrgCode.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ExpiresOn != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresOn.GetHashCode();
                }
                if (this.SessionId != null)
                {
                    hashCode = (hashCode * 59) + this.SessionId.GetHashCode();
                }
                if (this.StartedOn != null)
                {
                    hashCode = (hashCode * 59) + this.StartedOn.GetHashCode();
                }
                if (this.UpdatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedOn.GetHashCode();
                }
                if (this.ConnectionId != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionId.GetHashCode();
                }
                if (this.LastIpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.LastIpAddress.GetHashCode();
                }
                if (this.LastUserAgent != null)
                {
                    hashCode = (hashCode * 59) + this.LastUserAgent.GetHashCode();
                }
                if (this.InitialIpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.InitialIpAddress.GetHashCode();
                }
                if (this.InitialUserAgent != null)
                {
                    hashCode = (hashCode * 59) + this.InitialUserAgent.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
