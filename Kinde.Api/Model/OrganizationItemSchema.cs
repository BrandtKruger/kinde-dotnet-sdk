/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// OrganizationItemSchema
    /// </summary>
    [DataContract(Name = "organization_item_schema")]
    public partial class OrganizationItemSchema : IEquatable<OrganizationItemSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationItemSchema" /> class.
        /// </summary>
        /// <param name="code">The unique identifier for the organization..</param>
        /// <param name="name">The organization&#39;s name..</param>
        /// <param name="handle">A unique handle for the organization - can be used for dynamic callback urls..</param>
        /// <param name="isDefault">Whether the organization is the default organization..</param>
        /// <param name="externalId">The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems..</param>
        /// <param name="isAutoMembershipEnabled">If users become members of this organization when the org code is supplied during authentication..</param>
        public OrganizationItemSchema(string code = default(string), string name = default(string), string handle = default(string), bool isDefault = default(bool), string externalId = default(string), bool isAutoMembershipEnabled = default(bool))
        {
            this.Code = code;
            this.Name = name;
            this.Handle = handle;
            this.IsDefault = isDefault;
            this.ExternalId = externalId;
            this.IsAutoMembershipEnabled = isAutoMembershipEnabled;
        }

        /// <summary>
        /// The unique identifier for the organization.
        /// </summary>
        /// <value>The unique identifier for the organization.</value>
        /// <example>org_1ccfb819462</example>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// The organization&#39;s name.
        /// </summary>
        /// <value>The organization&#39;s name.</value>
        /// <example>Acme Corp</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A unique handle for the organization - can be used for dynamic callback urls.
        /// </summary>
        /// <value>A unique handle for the organization - can be used for dynamic callback urls.</value>
        /// <example>acme_corp</example>
        [DataMember(Name = "handle", EmitDefaultValue = true)]
        public string Handle { get; set; }

        /// <summary>
        /// Whether the organization is the default organization.
        /// </summary>
        /// <value>Whether the organization is the default organization.</value>
        /// <example>false</example>
        [DataMember(Name = "is_default", EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.
        /// </summary>
        /// <value>The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.</value>
        /// <example>some1234</example>
        [DataMember(Name = "external_id", EmitDefaultValue = true)]
        public string ExternalId { get; set; }

        /// <summary>
        /// If users become members of this organization when the org code is supplied during authentication.
        /// </summary>
        /// <value>If users become members of this organization when the org code is supplied during authentication.</value>
        /// <example>true</example>
        [DataMember(Name = "is_auto_membership_enabled", EmitDefaultValue = true)]
        public bool IsAutoMembershipEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationItemSchema {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  IsAutoMembershipEnabled: ").Append(IsAutoMembershipEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationItemSchema);
        }

        /// <summary>
        /// Returns true if OrganizationItemSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationItemSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationItemSchema input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Handle == input.Handle ||
                    (this.Handle != null &&
                    this.Handle.Equals(input.Handle))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    this.IsDefault.Equals(input.IsDefault)
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.IsAutoMembershipEnabled == input.IsAutoMembershipEnabled ||
                    this.IsAutoMembershipEnabled.Equals(input.IsAutoMembershipEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Handle != null)
                {
                    hashCode = (hashCode * 59) + this.Handle.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDefault.GetHashCode();
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsAutoMembershipEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
