/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetUserMfaResponseMfa
    /// </summary>
    [DataContract(Name = "get_user_mfa_response_mfa")]
    public partial class GetUserMfaResponseMfa : IEquatable<GetUserMfaResponseMfa>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserMfaResponseMfa" /> class.
        /// </summary>
        /// <param name="id">The MFA&#39;s identifier..</param>
        /// <param name="type">The type of MFA (e.g. email, SMS, authenticator app)..</param>
        /// <param name="createdOn">The timestamp when the MFA was created..</param>
        /// <param name="name">The identifier used for MFA (e.g. email address, phone number)..</param>
        /// <param name="isVerified">Whether the MFA is verified or not..</param>
        /// <param name="usageCount">The number of times MFA has been used..</param>
        /// <param name="lastUsedOn">The timestamp when the MFA was last used..</param>
        public GetUserMfaResponseMfa(string id = default(string), string type = default(string), DateTime createdOn = default(DateTime), string name = default(string), bool isVerified = default(bool), int usageCount = default(int), DateTime lastUsedOn = default(DateTime))
        {
            this.Id = id;
            this.Type = type;
            this.CreatedOn = createdOn;
            this.Name = name;
            this.IsVerified = isVerified;
            this.UsageCount = usageCount;
            this.LastUsedOn = lastUsedOn;
        }

        /// <summary>
        /// The MFA&#39;s identifier.
        /// </summary>
        /// <value>The MFA&#39;s identifier.</value>
        /// <example>mfa_01933d1ca1f093e7fad48ebcdb65a871</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The type of MFA (e.g. email, SMS, authenticator app).
        /// </summary>
        /// <value>The type of MFA (e.g. email, SMS, authenticator app).</value>
        /// <example>email</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The timestamp when the MFA was created.
        /// </summary>
        /// <value>The timestamp when the MFA was created.</value>
        /// <example>2024-11-18T13:31:46.795085+11:00</example>
        [DataMember(Name = "created_on", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// The identifier used for MFA (e.g. email address, phone number).
        /// </summary>
        /// <value>The identifier used for MFA (e.g. email address, phone number).</value>
        /// <example>sally@gmail.com</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the MFA is verified or not.
        /// </summary>
        /// <value>Whether the MFA is verified or not.</value>
        /// <example>true</example>
        [DataMember(Name = "is_verified", EmitDefaultValue = true)]
        public bool IsVerified { get; set; }

        /// <summary>
        /// The number of times MFA has been used.
        /// </summary>
        /// <value>The number of times MFA has been used.</value>
        /// <example>2</example>
        [DataMember(Name = "usage_count", EmitDefaultValue = false)]
        public int UsageCount { get; set; }

        /// <summary>
        /// The timestamp when the MFA was last used.
        /// </summary>
        /// <value>The timestamp when the MFA was last used.</value>
        /// <example>2024-11-18T13:32:07.225380+11:00</example>
        [DataMember(Name = "last_used_on", EmitDefaultValue = false)]
        public DateTime LastUsedOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserMfaResponseMfa {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  UsageCount: ").Append(UsageCount).Append("\n");
            sb.Append("  LastUsedOn: ").Append(LastUsedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUserMfaResponseMfa);
        }

        /// <summary>
        /// Returns true if GetUserMfaResponseMfa instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUserMfaResponseMfa to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUserMfaResponseMfa input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IsVerified == input.IsVerified ||
                    this.IsVerified.Equals(input.IsVerified)
                ) && 
                (
                    this.UsageCount == input.UsageCount ||
                    this.UsageCount.Equals(input.UsageCount)
                ) && 
                (
                    this.LastUsedOn == input.LastUsedOn ||
                    (this.LastUsedOn != null &&
                    this.LastUsedOn.Equals(input.LastUsedOn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsVerified.GetHashCode();
                hashCode = (hashCode * 59) + this.UsageCount.GetHashCode();
                if (this.LastUsedOn != null)
                {
                    hashCode = (hashCode * 59) + this.LastUsedOn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
