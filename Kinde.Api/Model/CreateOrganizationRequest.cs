/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    [DataContract(Name = "createOrganization_request")]
    public partial class CreateOrganizationRequest : IEquatable<CreateOrganizationRequest>
    {
        /// <summary>
        /// Value of the feature flag.
        /// </summary>
        /// <value>Value of the feature flag.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InnerEnum
        {
            /// <summary>
            /// Enum Str for value: str
            /// </summary>
            [EnumMember(Value = "str")]
            Str = 1,

            /// <summary>
            /// Enum Int for value: int
            /// </summary>
            [EnumMember(Value = "int")]
            Int = 2,

            /// <summary>
            /// Enum Bool for value: bool
            /// </summary>
            [EnumMember(Value = "bool")]
            Bool = 3
        }

        /// <summary>
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateOrganizationRequest() { }
        /// <summary>
        /// </summary>
        /// <param name="name">The organization&#39;s name. (required).</param>
        /// <param name="featureFlags">The organization&#39;s feature flag settings..</param>
        /// <param name="externalId">The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems..</param>
        /// <param name="buttonColor">The organization&#39;s brand settings - button color..</param>
        /// <param name="linkColor">The organization&#39;s brand settings - link color..</param>
        /// <param name="linkColorDark">The organization&#39;s brand settings - dark mode link color..</param>
        /// <param name="themeCode">The organization&#39;s brand settings - theme/mode &#39;light&#39; | &#39;dark&#39; | &#39;user_preference&#39;..</param>
        /// <param name="handle">A unique handle for the organization - can be used for dynamic callback urls..</param>
        /// <param name="senderName">The name of the organization that will be used in emails.</param>
        /// <param name="senderEmail">The email address that will be used in emails. Requires custom SMTP to be set up..</param>
        /// <param name="billingEmail">The email address used for billing purposes for the organization.</param>
        public CreateOrganizationRequest(string name = default(string), Dictionary<string, InnerEnum> featureFlags = default(Dictionary<string, InnerEnum>), string externalId = default(string), string backgroundColor = default(string), string buttonColor = default(string), string buttonTextColor = default(string), string linkColor = default(string), string backgroundColorDark = default(string), string buttonColorDark = default(string), string buttonTextColorDark = default(string), string linkColorDark = default(string), string themeCode = default(string), string handle = default(string), bool isAllowRegistrations = default(bool), string senderName = default(string), string senderEmail = default(string), bool isCreateBillingCustomer = default(bool), string billingEmail = default(string), string billingPlanCode = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateOrganizationRequest and cannot be null");
            }
            this.Name = name;
            this.FeatureFlags = featureFlags;
            this.ExternalId = externalId;
            this.BackgroundColor = backgroundColor;
            this.ButtonColor = buttonColor;
            this.ButtonTextColor = buttonTextColor;
            this.LinkColor = linkColor;
            this.BackgroundColorDark = backgroundColorDark;
            this.ButtonColorDark = buttonColorDark;
            this.ButtonTextColorDark = buttonTextColorDark;
            this.LinkColorDark = linkColorDark;
            this.ThemeCode = themeCode;
            this.Handle = handle;
            this.IsAllowRegistrations = isAllowRegistrations;
            this.SenderName = senderName;
            this.SenderEmail = senderEmail;
            this.IsCreateBillingCustomer = isCreateBillingCustomer;
            this.BillingEmail = billingEmail;
            this.BillingPlanCode = billingPlanCode;
        }

        /// <summary>
        /// The organization&#39;s name.
        /// </summary>
        /// <value>The organization&#39;s name.</value>
        /// <example>Acme Corp</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The organization&#39;s feature flag settings.
        /// </summary>
        /// <value>The organization&#39;s feature flag settings.</value>
        [DataMember(Name = "feature_flags", EmitDefaultValue = false)]
        public Dictionary<string, CreateOrganizationRequest.InnerEnum> FeatureFlags { get; set; }

        /// <summary>
        /// The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.
        /// </summary>
        /// <value>The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.</value>
        /// <example>some1234</example>
        [DataMember(Name = "external_id", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - background color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - background color.</value>
        [DataMember(Name = "background_color", EmitDefaultValue = false)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - button color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - button color.</value>
        [DataMember(Name = "button_color", EmitDefaultValue = false)]
        public string ButtonColor { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - button text color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - button text color.</value>
        [DataMember(Name = "button_text_color", EmitDefaultValue = false)]
        public string ButtonTextColor { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - link color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - link color.</value>
        [DataMember(Name = "link_color", EmitDefaultValue = false)]
        public string LinkColor { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode background color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode background color.</value>
        [DataMember(Name = "background_color_dark", EmitDefaultValue = false)]
        public string BackgroundColorDark { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode button color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode button color.</value>
        [DataMember(Name = "button_color_dark", EmitDefaultValue = false)]
        public string ButtonColorDark { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode button text color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode button text color.</value>
        [DataMember(Name = "button_text_color_dark", EmitDefaultValue = false)]
        public string ButtonTextColorDark { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode link color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode link color.</value>
        [DataMember(Name = "link_color_dark", EmitDefaultValue = false)]
        public string LinkColorDark { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - theme/mode &#39;light&#39; | &#39;dark&#39; | &#39;user_preference&#39;.
        /// </summary>
        /// <value>The organization&#39;s brand settings - theme/mode &#39;light&#39; | &#39;dark&#39; | &#39;user_preference&#39;.</value>
        [DataMember(Name = "theme_code", EmitDefaultValue = false)]
        public string ThemeCode { get; set; }

        /// <summary>
        /// A unique handle for the organization - can be used for dynamic callback urls.
        /// </summary>
        /// <value>A unique handle for the organization - can be used for dynamic callback urls.</value>
        /// <example>acme_corp</example>
        [DataMember(Name = "handle", EmitDefaultValue = false)]
        public string Handle { get; set; }

        /// <summary>
        /// If users become members of this organization when the org code is supplied during authentication.
        /// </summary>
        /// <value>If users become members of this organization when the org code is supplied during authentication.</value>
        /// <example>true</example>
        [DataMember(Name = "is_allow_registrations", EmitDefaultValue = true)]
        public bool IsAllowRegistrations { get; set; }

        /// <summary>
        /// The name of the organization that will be used in emails
        /// </summary>
        /// <value>The name of the organization that will be used in emails</value>
        /// <example>Acme Corp</example>
        [DataMember(Name = "sender_name", EmitDefaultValue = true)]
        public string SenderName { get; set; }

        /// <summary>
        /// The email address that will be used in emails. Requires custom SMTP to be set up.
        /// </summary>
        /// <value>The email address that will be used in emails. Requires custom SMTP to be set up.</value>
        /// <example>hello@acmecorp.com</example>
        [DataMember(Name = "sender_email", EmitDefaultValue = true)]
        public string SenderEmail { get; set; }

        /// <summary>
        /// </summary>
        /// <value>If a billing customer is also created for this organization</value>
        /// <example>false</example>
        [DataMember(Name = "is_create_billing_customer", EmitDefaultValue = true)]
        public bool IsCreateBillingCustomer { get; set; }

        /// <summary>
        /// </summary>
        /// <value>The email address used for billing purposes for the organization</value>
        /// <example>billing@acmecorp.com</example>
        [DataMember(Name = "billing_email", EmitDefaultValue = false)]
        public string BillingEmail { get; set; }

        /// <summary>
        /// The billing plan to put the customer on. If not specified, the default plan is used
        /// </summary>
        /// <value>The billing plan to put the customer on. If not specified, the default plan is used</value>
        /// <example>pro</example>
        [DataMember(Name = "billing_plan_code", EmitDefaultValue = false)]
        public string BillingPlanCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateOrganizationRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FeatureFlags: ").Append(FeatureFlags).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  ButtonColor: ").Append(ButtonColor).Append("\n");
            sb.Append("  ButtonTextColor: ").Append(ButtonTextColor).Append("\n");
            sb.Append("  LinkColor: ").Append(LinkColor).Append("\n");
            sb.Append("  BackgroundColorDark: ").Append(BackgroundColorDark).Append("\n");
            sb.Append("  ButtonColorDark: ").Append(ButtonColorDark).Append("\n");
            sb.Append("  ButtonTextColorDark: ").Append(ButtonTextColorDark).Append("\n");
            sb.Append("  LinkColorDark: ").Append(LinkColorDark).Append("\n");
            sb.Append("  ThemeCode: ").Append(ThemeCode).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  IsAllowRegistrations: ").Append(IsAllowRegistrations).Append("\n");
            sb.Append("  SenderName: ").Append(SenderName).Append("\n");
            sb.Append("  SenderEmail: ").Append(SenderEmail).Append("\n");
            sb.Append("  IsCreateBillingCustomer: ").Append(IsCreateBillingCustomer).Append("\n");
            sb.Append("  BillingEmail: ").Append(BillingEmail).Append("\n");
            sb.Append("  BillingPlanCode: ").Append(BillingPlanCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateOrganizationRequest);
        }

        /// <summary>
        /// </summary>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrganizationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FeatureFlags == input.FeatureFlags ||
                    this.FeatureFlags != null &&
                    input.FeatureFlags != null &&
                    this.FeatureFlags.SequenceEqual(input.FeatureFlags)
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.BackgroundColor == input.BackgroundColor ||
                    (this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(input.BackgroundColor))
                ) && 
                (
                    this.ButtonColor == input.ButtonColor ||
                    (this.ButtonColor != null &&
                    this.ButtonColor.Equals(input.ButtonColor))
                ) && 
                (
                    this.ButtonTextColor == input.ButtonTextColor ||
                    (this.ButtonTextColor != null &&
                    this.ButtonTextColor.Equals(input.ButtonTextColor))
                ) && 
                (
                    this.LinkColor == input.LinkColor ||
                    (this.LinkColor != null &&
                    this.LinkColor.Equals(input.LinkColor))
                ) && 
                (
                    this.BackgroundColorDark == input.BackgroundColorDark ||
                    (this.BackgroundColorDark != null &&
                    this.BackgroundColorDark.Equals(input.BackgroundColorDark))
                ) && 
                (
                    this.ButtonColorDark == input.ButtonColorDark ||
                    (this.ButtonColorDark != null &&
                    this.ButtonColorDark.Equals(input.ButtonColorDark))
                ) && 
                (
                    this.ButtonTextColorDark == input.ButtonTextColorDark ||
                    (this.ButtonTextColorDark != null &&
                    this.ButtonTextColorDark.Equals(input.ButtonTextColorDark))
                ) && 
                (
                    this.LinkColorDark == input.LinkColorDark ||
                    (this.LinkColorDark != null &&
                    this.LinkColorDark.Equals(input.LinkColorDark))
                ) && 
                (
                    this.ThemeCode == input.ThemeCode ||
                    (this.ThemeCode != null &&
                    this.ThemeCode.Equals(input.ThemeCode))
                ) && 
                (
                    this.Handle == input.Handle ||
                    (this.Handle != null &&
                    this.Handle.Equals(input.Handle))
                ) && 
                (
                    this.IsAllowRegistrations == input.IsAllowRegistrations ||
                    this.IsAllowRegistrations.Equals(input.IsAllowRegistrations)
                ) && 
                (
                    this.SenderName == input.SenderName ||
                    (this.SenderName != null &&
                    this.SenderName.Equals(input.SenderName))
                ) && 
                (
                    this.SenderEmail == input.SenderEmail ||
                    (this.SenderEmail != null &&
                    this.SenderEmail.Equals(input.SenderEmail))
                ) && 
                (
                    this.IsCreateBillingCustomer == input.IsCreateBillingCustomer ||
                    this.IsCreateBillingCustomer.Equals(input.IsCreateBillingCustomer)
                ) && 
                (
                    this.BillingEmail == input.BillingEmail ||
                    (this.BillingEmail != null &&
                    this.BillingEmail.Equals(input.BillingEmail))
                ) && 
                (
                    this.BillingPlanCode == input.BillingPlanCode ||
                    (this.BillingPlanCode != null &&
                    this.BillingPlanCode.Equals(input.BillingPlanCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.FeatureFlags != null)
                {
                    hashCode = (hashCode * 59) + this.FeatureFlags.GetHashCode();
                }
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                if (this.BackgroundColor != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundColor.GetHashCode();
                }
                if (this.ButtonColor != null)
                {
                    hashCode = (hashCode * 59) + this.ButtonColor.GetHashCode();
                }
                if (this.ButtonTextColor != null)
                {
                    hashCode = (hashCode * 59) + this.ButtonTextColor.GetHashCode();
                }
                if (this.LinkColor != null)
                {
                    hashCode = (hashCode * 59) + this.LinkColor.GetHashCode();
                }
                if (this.BackgroundColorDark != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundColorDark.GetHashCode();
                }
                if (this.ButtonColorDark != null)
                {
                    hashCode = (hashCode * 59) + this.ButtonColorDark.GetHashCode();
                }
                if (this.ButtonTextColorDark != null)
                {
                    hashCode = (hashCode * 59) + this.ButtonTextColorDark.GetHashCode();
                }
                if (this.LinkColorDark != null)
                {
                    hashCode = (hashCode * 59) + this.LinkColorDark.GetHashCode();
                }
                if (this.ThemeCode != null)
                {
                    hashCode = (hashCode * 59) + this.ThemeCode.GetHashCode();
                }
                if (this.Handle != null)
                {
                    hashCode = (hashCode * 59) + this.Handle.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsAllowRegistrations.GetHashCode();
                if (this.SenderName != null)
                {
                    hashCode = (hashCode * 59) + this.SenderName.GetHashCode();
                }
                if (this.SenderEmail != null)
                {
                    hashCode = (hashCode * 59) + this.SenderEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCreateBillingCustomer.GetHashCode();
                if (this.BillingEmail != null)
                {
                    hashCode = (hashCode * 59) + this.BillingEmail.GetHashCode();
                }
                if (this.BillingPlanCode != null)
                {
                    hashCode = (hashCode * 59) + this.BillingPlanCode.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
