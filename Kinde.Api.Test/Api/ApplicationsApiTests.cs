/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Kinde.Api.Client;
using Kinde.Api.Api;
// uncomment below to import models
//using Kinde.Api.Model;

namespace Kinde.Api.Test.Api
{
    /// <summary>
    ///  Class for testing ApplicationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ApplicationsApiTests : IDisposable
    {
        private ApplicationsApi instance;

        public ApplicationsApiTests()
        {
            instance = new ApplicationsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ApplicationsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ApplicationsApi
            //Assert.IsType<ApplicationsApi>(instance);
        }

        /// <summary>
        /// Test CreateApplication
        /// </summary>
        [Fact]
        public void CreateApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateApplicationRequest createApplicationRequest = null;
            //var response = instance.CreateApplication(createApplicationRequest);
            //Assert.IsType<CreateApplicationResponse>(response);
        }

        /// <summary>
        /// Test DeleteApplication
        /// </summary>
        [Fact]
        public void DeleteApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.DeleteApplication(applicationId);
            //Assert.IsType<SuccessResponse>(response);
        }

        /// <summary>
        /// Test EnableConnection
        /// </summary>
        [Fact]
        public void EnableConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string connectionId = null;
            //instance.EnableConnection(applicationId, connectionId);
        }

        /// <summary>
        /// Test GetApplication
        /// </summary>
        [Fact]
        public void GetApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.GetApplication(applicationId);
            //Assert.IsType<GetApplicationResponse>(response);
        }

        /// <summary>
        /// Test GetApplicationConnections
        /// </summary>
        [Fact]
        public void GetApplicationConnectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.GetApplicationConnections(applicationId);
            //Assert.IsType<GetConnectionsResponse>(response);
        }

        /// <summary>
        /// Test GetApplicationPropertyValues
        /// </summary>
        [Fact]
        public void GetApplicationPropertyValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.GetApplicationPropertyValues(applicationId);
            //Assert.IsType<GetPropertyValuesResponse>(response);
        }

        /// <summary>
        /// Test GetApplications
        /// </summary>
        [Fact]
        public void GetApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? sort = null;
            //int? pageSize = null;
            //string? nextToken = null;
            //var response = instance.GetApplications(sort, pageSize, nextToken);
            //Assert.IsType<GetApplicationsResponse>(response);
        }

        /// <summary>
        /// Test RemoveConnection
        /// </summary>
        [Fact]
        public void RemoveConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string connectionId = null;
            //var response = instance.RemoveConnection(applicationId, connectionId);
            //Assert.IsType<SuccessResponse>(response);
        }

        /// <summary>
        /// Test UpdateApplication
        /// </summary>
        [Fact]
        public void UpdateApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //UpdateApplicationRequest? updateApplicationRequest = null;
            //instance.UpdateApplication(applicationId, updateApplicationRequest);
        }

        /// <summary>
        /// Test UpdateApplicationTokens
        /// </summary>
        [Fact]
        public void UpdateApplicationTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //UpdateApplicationTokensRequest updateApplicationTokensRequest = null;
            //var response = instance.UpdateApplicationTokens(applicationId, updateApplicationTokensRequest);
            //Assert.IsType<SuccessResponse>(response);
        }

        /// <summary>
        /// Test UpdateApplicationsProperty
        /// </summary>
        [Fact]
        public void UpdateApplicationsPropertyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string propertyKey = null;
            //UpdateApplicationsPropertyRequest updateApplicationsPropertyRequest = null;
            //var response = instance.UpdateApplicationsProperty(applicationId, propertyKey, updateApplicationsPropertyRequest);
            //Assert.IsType<SuccessResponse>(response);
        }
    }
}
