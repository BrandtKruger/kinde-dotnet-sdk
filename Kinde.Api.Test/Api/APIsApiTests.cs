/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Kinde.Api.Client;
using Kinde.Api.Api;
// uncomment below to import models
//using Kinde.Api.Model;

namespace Kinde.Api.Test.Api
{
    /// <summary>
    ///  Class for testing APIsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class APIsApiTests : IDisposable
    {
        private APIsApi instance;

        public APIsApiTests()
        {
            instance = new APIsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of APIsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' APIsApi
            //Assert.IsType<APIsApi>(instance);
        }

        /// <summary>
        /// Test AddAPIApplicationScope
        /// </summary>
        [Fact]
        public void AddAPIApplicationScopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiId = null;
            //string applicationId = null;
            //string scopeId = null;
            //instance.AddAPIApplicationScope(apiId, applicationId, scopeId);
        }

        /// <summary>
        /// Test AddAPIScope
        /// </summary>
        [Fact]
        public void AddAPIScopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiId = null;
            //AddAPIScopeRequest addAPIScopeRequest = null;
            //var response = instance.AddAPIScope(apiId, addAPIScopeRequest);
            //Assert.IsType<CreateApiScopesResponse>(response);
        }

        /// <summary>
        /// Test AddAPIs
        /// </summary>
        [Fact]
        public void AddAPIsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddAPIsRequest addAPIsRequest = null;
            //var response = instance.AddAPIs(addAPIsRequest);
            //Assert.IsType<CreateApisResponse>(response);
        }

        /// <summary>
        /// Test DeleteAPI
        /// </summary>
        [Fact]
        public void DeleteAPITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiId = null;
            //var response = instance.DeleteAPI(apiId);
            //Assert.IsType<DeleteApiResponse>(response);
        }

        /// <summary>
        /// Test DeleteAPIAppliationScope
        /// </summary>
        [Fact]
        public void DeleteAPIAppliationScopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiId = null;
            //string applicationId = null;
            //string scopeId = null;
            //instance.DeleteAPIAppliationScope(apiId, applicationId, scopeId);
        }

        /// <summary>
        /// Test DeleteAPIScope
        /// </summary>
        [Fact]
        public void DeleteAPIScopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiId = null;
            //string scopeId = null;
            //instance.DeleteAPIScope(apiId, scopeId);
        }

        /// <summary>
        /// Test GetAPI
        /// </summary>
        [Fact]
        public void GetAPITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiId = null;
            //var response = instance.GetAPI(apiId);
            //Assert.IsType<GetApiResponse>(response);
        }

        /// <summary>
        /// Test GetAPIScope
        /// </summary>
        [Fact]
        public void GetAPIScopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiId = null;
            //string scopeId = null;
            //var response = instance.GetAPIScope(apiId, scopeId);
            //Assert.IsType<GetApiScopeResponse>(response);
        }

        /// <summary>
        /// Test GetAPIScopes
        /// </summary>
        [Fact]
        public void GetAPIScopesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiId = null;
            //var response = instance.GetAPIScopes(apiId);
            //Assert.IsType<GetApiScopesResponse>(response);
        }

        /// <summary>
        /// Test GetAPIs
        /// </summary>
        [Fact]
        public void GetAPIsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string expand = null;
            //var response = instance.GetAPIs(expand);
            //Assert.IsType<GetApisResponse>(response);
        }

        /// <summary>
        /// Test UpdateAPIApplications
        /// </summary>
        [Fact]
        public void UpdateAPIApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiId = null;
            //UpdateAPIApplicationsRequest updateAPIApplicationsRequest = null;
            //var response = instance.UpdateAPIApplications(apiId, updateAPIApplicationsRequest);
            //Assert.IsType<AuthorizeAppApiResponse>(response);
        }

        /// <summary>
        /// Test UpdateAPIScope
        /// </summary>
        [Fact]
        public void UpdateAPIScopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiId = null;
            //string scopeId = null;
            //UpdateAPIScopeRequest updateAPIScopeRequest = null;
            //instance.UpdateAPIScope(apiId, scopeId, updateAPIScopeRequest);
        }
    }
}
