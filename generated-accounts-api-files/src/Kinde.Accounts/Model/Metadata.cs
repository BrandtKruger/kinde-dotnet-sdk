/*
 * Kinde Accounts API
 *
 * API for querying the current user's permissions, roles, entitlements, and feature flags
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kinde.Accounts.Client.OpenAPIDateConverter;

namespace Kinde.Accounts.Model
{
    /// <summary>
    /// Metadata
    /// </summary>
    [DataContract(Name = "Metadata")]
    public partial class Metadata : IEquatable<Metadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Metadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Metadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Metadata" /> class.
        /// </summary>
        /// <param name="hasMore">Whether there are more items to fetch (required).</param>
        /// <param name="nextPageStartingAfter">Token for the next page (required).</param>
        public Metadata(bool hasMore = default(bool), string nextPageStartingAfter = default(string))
        {
            this.HasMore = hasMore;
            // to ensure "nextPageStartingAfter" is required (not null)
            if (nextPageStartingAfter == null)
            {
                throw new ArgumentNullException("nextPageStartingAfter is a required property for Metadata and cannot be null");
            }
            this.NextPageStartingAfter = nextPageStartingAfter;
        }

        /// <summary>
        /// Whether there are more items to fetch
        /// </summary>
        /// <value>Whether there are more items to fetch</value>
        [DataMember(Name = "has_more", IsRequired = true, EmitDefaultValue = true)]
        public bool HasMore { get; set; }

        /// <summary>
        /// Token for the next page
        /// </summary>
        /// <value>Token for the next page</value>
        [DataMember(Name = "next_page_starting_after", IsRequired = true, EmitDefaultValue = true)]
        public string NextPageStartingAfter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Metadata {\n");
            sb.Append("  HasMore: ").Append(HasMore).Append("\n");
            sb.Append("  NextPageStartingAfter: ").Append(NextPageStartingAfter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Metadata);
        }

        /// <summary>
        /// Returns true if Metadata instances are equal
        /// </summary>
        /// <param name="input">Instance of Metadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Metadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HasMore == input.HasMore ||
                    this.HasMore.Equals(input.HasMore)
                ) && 
                (
                    this.NextPageStartingAfter == input.NextPageStartingAfter ||
                    (this.NextPageStartingAfter != null &&
                    this.NextPageStartingAfter.Equals(input.NextPageStartingAfter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.HasMore.GetHashCode();
                if (this.NextPageStartingAfter != null)
                {
                    hashCode = (hashCode * 59) + this.NextPageStartingAfter.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
