/*
 * Kinde Accounts API
 *
 * API for querying the current user's permissions, roles, entitlements, and feature flags
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kinde.Accounts.Client.OpenAPIDateConverter;

namespace Kinde.Accounts.Model
{
    /// <summary>
    /// Entitlement
    /// </summary>
    [DataContract(Name = "Entitlement")]
    public partial class Entitlement : IEquatable<Entitlement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Entitlement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Entitlement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Entitlement" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the entitlement (required).</param>
        /// <param name="fixedCharge">Fixed charge amount (required).</param>
        /// <param name="priceName">Name of the price (required).</param>
        /// <param name="unitAmount">Unit amount (required).</param>
        /// <param name="featureKey">Key of the feature (required).</param>
        /// <param name="featureName">Name of the feature (required).</param>
        /// <param name="entitlementLimitMax">Maximum entitlement limit (required).</param>
        /// <param name="entitlementLimitMin">Minimum entitlement limit (required).</param>
        public Entitlement(string id = default(string), decimal fixedCharge = default(decimal), string priceName = default(string), decimal unitAmount = default(decimal), string featureKey = default(string), string featureName = default(string), decimal entitlementLimitMax = default(decimal), decimal entitlementLimitMin = default(decimal))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Entitlement and cannot be null");
            }
            this.Id = id;
            this.FixedCharge = fixedCharge;
            // to ensure "priceName" is required (not null)
            if (priceName == null)
            {
                throw new ArgumentNullException("priceName is a required property for Entitlement and cannot be null");
            }
            this.PriceName = priceName;
            this.UnitAmount = unitAmount;
            // to ensure "featureKey" is required (not null)
            if (featureKey == null)
            {
                throw new ArgumentNullException("featureKey is a required property for Entitlement and cannot be null");
            }
            this.FeatureKey = featureKey;
            // to ensure "featureName" is required (not null)
            if (featureName == null)
            {
                throw new ArgumentNullException("featureName is a required property for Entitlement and cannot be null");
            }
            this.FeatureName = featureName;
            this.EntitlementLimitMax = entitlementLimitMax;
            this.EntitlementLimitMin = entitlementLimitMin;
        }

        /// <summary>
        /// Unique identifier for the entitlement
        /// </summary>
        /// <value>Unique identifier for the entitlement</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Fixed charge amount
        /// </summary>
        /// <value>Fixed charge amount</value>
        [DataMember(Name = "fixed_charge", IsRequired = true, EmitDefaultValue = true)]
        public decimal FixedCharge { get; set; }

        /// <summary>
        /// Name of the price
        /// </summary>
        /// <value>Name of the price</value>
        [DataMember(Name = "price_name", IsRequired = true, EmitDefaultValue = true)]
        public string PriceName { get; set; }

        /// <summary>
        /// Unit amount
        /// </summary>
        /// <value>Unit amount</value>
        [DataMember(Name = "unit_amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal UnitAmount { get; set; }

        /// <summary>
        /// Key of the feature
        /// </summary>
        /// <value>Key of the feature</value>
        [DataMember(Name = "feature_key", IsRequired = true, EmitDefaultValue = true)]
        public string FeatureKey { get; set; }

        /// <summary>
        /// Name of the feature
        /// </summary>
        /// <value>Name of the feature</value>
        [DataMember(Name = "feature_name", IsRequired = true, EmitDefaultValue = true)]
        public string FeatureName { get; set; }

        /// <summary>
        /// Maximum entitlement limit
        /// </summary>
        /// <value>Maximum entitlement limit</value>
        [DataMember(Name = "entitlement_limit_max", IsRequired = true, EmitDefaultValue = true)]
        public decimal EntitlementLimitMax { get; set; }

        /// <summary>
        /// Minimum entitlement limit
        /// </summary>
        /// <value>Minimum entitlement limit</value>
        [DataMember(Name = "entitlement_limit_min", IsRequired = true, EmitDefaultValue = true)]
        public decimal EntitlementLimitMin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Entitlement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FixedCharge: ").Append(FixedCharge).Append("\n");
            sb.Append("  PriceName: ").Append(PriceName).Append("\n");
            sb.Append("  UnitAmount: ").Append(UnitAmount).Append("\n");
            sb.Append("  FeatureKey: ").Append(FeatureKey).Append("\n");
            sb.Append("  FeatureName: ").Append(FeatureName).Append("\n");
            sb.Append("  EntitlementLimitMax: ").Append(EntitlementLimitMax).Append("\n");
            sb.Append("  EntitlementLimitMin: ").Append(EntitlementLimitMin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Entitlement);
        }

        /// <summary>
        /// Returns true if Entitlement instances are equal
        /// </summary>
        /// <param name="input">Instance of Entitlement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Entitlement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FixedCharge == input.FixedCharge ||
                    this.FixedCharge.Equals(input.FixedCharge)
                ) && 
                (
                    this.PriceName == input.PriceName ||
                    (this.PriceName != null &&
                    this.PriceName.Equals(input.PriceName))
                ) && 
                (
                    this.UnitAmount == input.UnitAmount ||
                    this.UnitAmount.Equals(input.UnitAmount)
                ) && 
                (
                    this.FeatureKey == input.FeatureKey ||
                    (this.FeatureKey != null &&
                    this.FeatureKey.Equals(input.FeatureKey))
                ) && 
                (
                    this.FeatureName == input.FeatureName ||
                    (this.FeatureName != null &&
                    this.FeatureName.Equals(input.FeatureName))
                ) && 
                (
                    this.EntitlementLimitMax == input.EntitlementLimitMax ||
                    this.EntitlementLimitMax.Equals(input.EntitlementLimitMax)
                ) && 
                (
                    this.EntitlementLimitMin == input.EntitlementLimitMin ||
                    this.EntitlementLimitMin.Equals(input.EntitlementLimitMin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FixedCharge.GetHashCode();
                if (this.PriceName != null)
                {
                    hashCode = (hashCode * 59) + this.PriceName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnitAmount.GetHashCode();
                if (this.FeatureKey != null)
                {
                    hashCode = (hashCode * 59) + this.FeatureKey.GetHashCode();
                }
                if (this.FeatureName != null)
                {
                    hashCode = (hashCode * 59) + this.FeatureName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EntitlementLimitMax.GetHashCode();
                hashCode = (hashCode * 59) + this.EntitlementLimitMin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
