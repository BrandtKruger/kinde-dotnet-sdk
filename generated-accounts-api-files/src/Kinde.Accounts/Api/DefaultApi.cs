/*
 * Kinde Accounts API
 *
 * API for querying the current user's permissions, roles, entitlements, and feature flags
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Kinde.Accounts.Client;
using Kinde.Accounts.Model;

namespace Kinde.Accounts.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get current organization
        /// </summary>
        /// <remarks>
        /// Retrieve the current organization information
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrentOrganizationResponse</returns>
        CurrentOrganizationResponse GetCurrentOrganization(int operationIndex = 0);

        /// <summary>
        /// Get current organization
        /// </summary>
        /// <remarks>
        /// Retrieve the current organization information
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrentOrganizationResponse</returns>
        ApiResponse<CurrentOrganizationResponse> GetCurrentOrganizationWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get specific entitlement
        /// </summary>
        /// <remarks>
        /// Retrieve a specific entitlement by key
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The entitlement key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EntitlementResponse</returns>
        EntitlementResponse GetEntitlement(string key, int operationIndex = 0);

        /// <summary>
        /// Get specific entitlement
        /// </summary>
        /// <remarks>
        /// Retrieve a specific entitlement by key
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The entitlement key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EntitlementResponse</returns>
        ApiResponse<EntitlementResponse> GetEntitlementWithHttpInfo(string key, int operationIndex = 0);
        /// <summary>
        /// Get all entitlements
        /// </summary>
        /// <remarks>
        /// Retrieve all entitlements for the current user&#39;s organization
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EntitlementsResponse</returns>
        EntitlementsResponse GetEntitlements(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get all entitlements
        /// </summary>
        /// <remarks>
        /// Retrieve all entitlements for the current user&#39;s organization
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EntitlementsResponse</returns>
        ApiResponse<EntitlementsResponse> GetEntitlementsWithHttpInfo(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get specific feature flag
        /// </summary>
        /// <remarks>
        /// Retrieve a specific feature flag by key
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The feature flag key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureFlagResponse</returns>
        FeatureFlagResponse GetFeatureFlag(string key, int operationIndex = 0);

        /// <summary>
        /// Get specific feature flag
        /// </summary>
        /// <remarks>
        /// Retrieve a specific feature flag by key
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The feature flag key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureFlagResponse</returns>
        ApiResponse<FeatureFlagResponse> GetFeatureFlagWithHttpInfo(string key, int operationIndex = 0);
        /// <summary>
        /// Get all feature flags
        /// </summary>
        /// <remarks>
        /// Retrieve all feature flags for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureFlagsResponse</returns>
        FeatureFlagsResponse GetFeatureFlags(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get all feature flags
        /// </summary>
        /// <remarks>
        /// Retrieve all feature flags for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureFlagsResponse</returns>
        ApiResponse<FeatureFlagsResponse> GetFeatureFlagsWithHttpInfo(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get specific permission
        /// </summary>
        /// <remarks>
        /// Retrieve a specific permission by key
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The permission key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionResponse</returns>
        PermissionResponse GetPermission(string key, int operationIndex = 0);

        /// <summary>
        /// Get specific permission
        /// </summary>
        /// <remarks>
        /// Retrieve a specific permission by key
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The permission key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionResponse</returns>
        ApiResponse<PermissionResponse> GetPermissionWithHttpInfo(string key, int operationIndex = 0);
        /// <summary>
        /// Get all permissions
        /// </summary>
        /// <remarks>
        /// Retrieve all permissions for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionsResponse</returns>
        PermissionsResponse GetPermissions(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get all permissions
        /// </summary>
        /// <remarks>
        /// Retrieve all permissions for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionsResponse</returns>
        ApiResponse<PermissionsResponse> GetPermissionsWithHttpInfo(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get all roles
        /// </summary>
        /// <remarks>
        /// Retrieve all roles for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RolesResponse</returns>
        RolesResponse GetRoles(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get all roles
        /// </summary>
        /// <remarks>
        /// Retrieve all roles for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RolesResponse</returns>
        ApiResponse<RolesResponse> GetRolesWithHttpInfo(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get user organizations
        /// </summary>
        /// <remarks>
        /// Retrieve all organizations for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserOrganizationsResponse</returns>
        UserOrganizationsResponse GetUserOrganizations(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get user organizations
        /// </summary>
        /// <remarks>
        /// Retrieve all organizations for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserOrganizationsResponse</returns>
        ApiResponse<UserOrganizationsResponse> GetUserOrganizationsWithHttpInfo(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get user profile
        /// </summary>
        /// <remarks>
        /// Retrieve the current user&#39;s profile information
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserProfileResponse</returns>
        UserProfileResponse GetUserProfile(int operationIndex = 0);

        /// <summary>
        /// Get user profile
        /// </summary>
        /// <remarks>
        /// Retrieve the current user&#39;s profile information
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserProfileResponse</returns>
        ApiResponse<UserProfileResponse> GetUserProfileWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get current organization
        /// </summary>
        /// <remarks>
        /// Retrieve the current organization information
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrentOrganizationResponse</returns>
        System.Threading.Tasks.Task<CurrentOrganizationResponse> GetCurrentOrganizationAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get current organization
        /// </summary>
        /// <remarks>
        /// Retrieve the current organization information
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrentOrganizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrentOrganizationResponse>> GetCurrentOrganizationWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get specific entitlement
        /// </summary>
        /// <remarks>
        /// Retrieve a specific entitlement by key
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The entitlement key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntitlementResponse</returns>
        System.Threading.Tasks.Task<EntitlementResponse> GetEntitlementAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get specific entitlement
        /// </summary>
        /// <remarks>
        /// Retrieve a specific entitlement by key
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The entitlement key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntitlementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntitlementResponse>> GetEntitlementWithHttpInfoAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all entitlements
        /// </summary>
        /// <remarks>
        /// Retrieve all entitlements for the current user&#39;s organization
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntitlementsResponse</returns>
        System.Threading.Tasks.Task<EntitlementsResponse> GetEntitlementsAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all entitlements
        /// </summary>
        /// <remarks>
        /// Retrieve all entitlements for the current user&#39;s organization
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntitlementsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntitlementsResponse>> GetEntitlementsWithHttpInfoAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get specific feature flag
        /// </summary>
        /// <remarks>
        /// Retrieve a specific feature flag by key
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The feature flag key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureFlagResponse</returns>
        System.Threading.Tasks.Task<FeatureFlagResponse> GetFeatureFlagAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get specific feature flag
        /// </summary>
        /// <remarks>
        /// Retrieve a specific feature flag by key
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The feature flag key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureFlagResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureFlagResponse>> GetFeatureFlagWithHttpInfoAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all feature flags
        /// </summary>
        /// <remarks>
        /// Retrieve all feature flags for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureFlagsResponse</returns>
        System.Threading.Tasks.Task<FeatureFlagsResponse> GetFeatureFlagsAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all feature flags
        /// </summary>
        /// <remarks>
        /// Retrieve all feature flags for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureFlagsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureFlagsResponse>> GetFeatureFlagsWithHttpInfoAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get specific permission
        /// </summary>
        /// <remarks>
        /// Retrieve a specific permission by key
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The permission key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionResponse</returns>
        System.Threading.Tasks.Task<PermissionResponse> GetPermissionAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get specific permission
        /// </summary>
        /// <remarks>
        /// Retrieve a specific permission by key
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The permission key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionResponse>> GetPermissionWithHttpInfoAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all permissions
        /// </summary>
        /// <remarks>
        /// Retrieve all permissions for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionsResponse</returns>
        System.Threading.Tasks.Task<PermissionsResponse> GetPermissionsAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all permissions
        /// </summary>
        /// <remarks>
        /// Retrieve all permissions for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionsResponse>> GetPermissionsWithHttpInfoAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all roles
        /// </summary>
        /// <remarks>
        /// Retrieve all roles for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RolesResponse</returns>
        System.Threading.Tasks.Task<RolesResponse> GetRolesAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all roles
        /// </summary>
        /// <remarks>
        /// Retrieve all roles for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RolesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RolesResponse>> GetRolesWithHttpInfoAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get user organizations
        /// </summary>
        /// <remarks>
        /// Retrieve all organizations for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserOrganizationsResponse</returns>
        System.Threading.Tasks.Task<UserOrganizationsResponse> GetUserOrganizationsAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get user organizations
        /// </summary>
        /// <remarks>
        /// Retrieve all organizations for the current user
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserOrganizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserOrganizationsResponse>> GetUserOrganizationsWithHttpInfoAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get user profile
        /// </summary>
        /// <remarks>
        /// Retrieve the current user&#39;s profile information
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserProfileResponse</returns>
        System.Threading.Tasks.Task<UserProfileResponse> GetUserProfileAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get user profile
        /// </summary>
        /// <remarks>
        /// Retrieve the current user&#39;s profile information
        /// </remarks>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProfileResponse>> GetUserProfileWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Kinde.Accounts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = Kinde.Accounts.Client.Configuration.MergeConfigurations(
                Kinde.Accounts.Client.GlobalConfiguration.Instance,
                new Kinde.Accounts.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Kinde.Accounts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kinde.Accounts.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Kinde.Accounts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Kinde.Accounts.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kinde.Accounts.Client.Configuration.MergeConfigurations(
                Kinde.Accounts.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Kinde.Accounts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kinde.Accounts.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Kinde.Accounts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(Kinde.Accounts.Client.ISynchronousClient client, Kinde.Accounts.Client.IAsynchronousClient asyncClient, Kinde.Accounts.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kinde.Accounts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kinde.Accounts.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kinde.Accounts.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kinde.Accounts.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kinde.Accounts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get current organization Retrieve the current organization information
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrentOrganizationResponse</returns>
        public CurrentOrganizationResponse GetCurrentOrganization(int operationIndex = 0)
        {
            Kinde.Accounts.Client.ApiResponse<CurrentOrganizationResponse> localVarResponse = GetCurrentOrganizationWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current organization Retrieve the current organization information
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrentOrganizationResponse</returns>
        public Kinde.Accounts.Client.ApiResponse<CurrentOrganizationResponse> GetCurrentOrganizationWithHttpInfo(int operationIndex = 0)
        {
            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetCurrentOrganization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CurrentOrganizationResponse>("/current_organization", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current organization Retrieve the current organization information
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrentOrganizationResponse</returns>
        public async System.Threading.Tasks.Task<CurrentOrganizationResponse> GetCurrentOrganizationAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Accounts.Client.ApiResponse<CurrentOrganizationResponse> localVarResponse = await GetCurrentOrganizationWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current organization Retrieve the current organization information
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrentOrganizationResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Accounts.Client.ApiResponse<CurrentOrganizationResponse>> GetCurrentOrganizationWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetCurrentOrganization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CurrentOrganizationResponse>("/current_organization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specific entitlement Retrieve a specific entitlement by key
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The entitlement key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EntitlementResponse</returns>
        public EntitlementResponse GetEntitlement(string key, int operationIndex = 0)
        {
            Kinde.Accounts.Client.ApiResponse<EntitlementResponse> localVarResponse = GetEntitlementWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific entitlement Retrieve a specific entitlement by key
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The entitlement key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EntitlementResponse</returns>
        public Kinde.Accounts.Client.ApiResponse<EntitlementResponse> GetEntitlementWithHttpInfo(string key, int operationIndex = 0)
        {
            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new Kinde.Accounts.Client.ApiException(400, "Missing required parameter 'key' when calling DefaultApi->GetEntitlement");
            }

            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("key", Kinde.Accounts.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetEntitlement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EntitlementResponse>("/entitlement/{key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntitlement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specific entitlement Retrieve a specific entitlement by key
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The entitlement key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntitlementResponse</returns>
        public async System.Threading.Tasks.Task<EntitlementResponse> GetEntitlementAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Accounts.Client.ApiResponse<EntitlementResponse> localVarResponse = await GetEntitlementWithHttpInfoAsync(key, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific entitlement Retrieve a specific entitlement by key
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The entitlement key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntitlementResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Accounts.Client.ApiResponse<EntitlementResponse>> GetEntitlementWithHttpInfoAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new Kinde.Accounts.Client.ApiException(400, "Missing required parameter 'key' when calling DefaultApi->GetEntitlement");
            }


            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("key", Kinde.Accounts.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetEntitlement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EntitlementResponse>("/entitlement/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntitlement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all entitlements Retrieve all entitlements for the current user&#39;s organization
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EntitlementsResponse</returns>
        public EntitlementsResponse GetEntitlements(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Kinde.Accounts.Client.ApiResponse<EntitlementsResponse> localVarResponse = GetEntitlementsWithHttpInfo(startingAfter, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all entitlements Retrieve all entitlements for the current user&#39;s organization
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EntitlementsResponse</returns>
        public Kinde.Accounts.Client.ApiResponse<EntitlementsResponse> GetEntitlementsWithHttpInfo(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startingAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "starting_after", startingAfter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetEntitlements";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EntitlementsResponse>("/entitlements", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntitlements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all entitlements Retrieve all entitlements for the current user&#39;s organization
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntitlementsResponse</returns>
        public async System.Threading.Tasks.Task<EntitlementsResponse> GetEntitlementsAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Accounts.Client.ApiResponse<EntitlementsResponse> localVarResponse = await GetEntitlementsWithHttpInfoAsync(startingAfter, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all entitlements Retrieve all entitlements for the current user&#39;s organization
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntitlementsResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Accounts.Client.ApiResponse<EntitlementsResponse>> GetEntitlementsWithHttpInfoAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startingAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "starting_after", startingAfter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetEntitlements";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EntitlementsResponse>("/entitlements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntitlements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specific feature flag Retrieve a specific feature flag by key
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The feature flag key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureFlagResponse</returns>
        public FeatureFlagResponse GetFeatureFlag(string key, int operationIndex = 0)
        {
            Kinde.Accounts.Client.ApiResponse<FeatureFlagResponse> localVarResponse = GetFeatureFlagWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific feature flag Retrieve a specific feature flag by key
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The feature flag key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureFlagResponse</returns>
        public Kinde.Accounts.Client.ApiResponse<FeatureFlagResponse> GetFeatureFlagWithHttpInfo(string key, int operationIndex = 0)
        {
            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new Kinde.Accounts.Client.ApiException(400, "Missing required parameter 'key' when calling DefaultApi->GetFeatureFlag");
            }

            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("key", Kinde.Accounts.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetFeatureFlag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureFlagResponse>("/feature_flags/{key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeatureFlag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specific feature flag Retrieve a specific feature flag by key
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The feature flag key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureFlagResponse</returns>
        public async System.Threading.Tasks.Task<FeatureFlagResponse> GetFeatureFlagAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Accounts.Client.ApiResponse<FeatureFlagResponse> localVarResponse = await GetFeatureFlagWithHttpInfoAsync(key, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific feature flag Retrieve a specific feature flag by key
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The feature flag key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureFlagResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Accounts.Client.ApiResponse<FeatureFlagResponse>> GetFeatureFlagWithHttpInfoAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new Kinde.Accounts.Client.ApiException(400, "Missing required parameter 'key' when calling DefaultApi->GetFeatureFlag");
            }


            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("key", Kinde.Accounts.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetFeatureFlag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeatureFlagResponse>("/feature_flags/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeatureFlag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all feature flags Retrieve all feature flags for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureFlagsResponse</returns>
        public FeatureFlagsResponse GetFeatureFlags(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Kinde.Accounts.Client.ApiResponse<FeatureFlagsResponse> localVarResponse = GetFeatureFlagsWithHttpInfo(startingAfter, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all feature flags Retrieve all feature flags for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureFlagsResponse</returns>
        public Kinde.Accounts.Client.ApiResponse<FeatureFlagsResponse> GetFeatureFlagsWithHttpInfo(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startingAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "starting_after", startingAfter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetFeatureFlags";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureFlagsResponse>("/feature_flags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeatureFlags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all feature flags Retrieve all feature flags for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureFlagsResponse</returns>
        public async System.Threading.Tasks.Task<FeatureFlagsResponse> GetFeatureFlagsAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Accounts.Client.ApiResponse<FeatureFlagsResponse> localVarResponse = await GetFeatureFlagsWithHttpInfoAsync(startingAfter, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all feature flags Retrieve all feature flags for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureFlagsResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Accounts.Client.ApiResponse<FeatureFlagsResponse>> GetFeatureFlagsWithHttpInfoAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startingAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "starting_after", startingAfter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetFeatureFlags";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeatureFlagsResponse>("/feature_flags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeatureFlags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specific permission Retrieve a specific permission by key
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The permission key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionResponse</returns>
        public PermissionResponse GetPermission(string key, int operationIndex = 0)
        {
            Kinde.Accounts.Client.ApiResponse<PermissionResponse> localVarResponse = GetPermissionWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific permission Retrieve a specific permission by key
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The permission key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionResponse</returns>
        public Kinde.Accounts.Client.ApiResponse<PermissionResponse> GetPermissionWithHttpInfo(string key, int operationIndex = 0)
        {
            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new Kinde.Accounts.Client.ApiException(400, "Missing required parameter 'key' when calling DefaultApi->GetPermission");
            }

            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("key", Kinde.Accounts.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetPermission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PermissionResponse>("/permission/{key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPermission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specific permission Retrieve a specific permission by key
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The permission key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionResponse</returns>
        public async System.Threading.Tasks.Task<PermissionResponse> GetPermissionAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Accounts.Client.ApiResponse<PermissionResponse> localVarResponse = await GetPermissionWithHttpInfoAsync(key, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific permission Retrieve a specific permission by key
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The permission key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Accounts.Client.ApiResponse<PermissionResponse>> GetPermissionWithHttpInfoAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new Kinde.Accounts.Client.ApiException(400, "Missing required parameter 'key' when calling DefaultApi->GetPermission");
            }


            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("key", Kinde.Accounts.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetPermission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PermissionResponse>("/permission/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPermission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all permissions Retrieve all permissions for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionsResponse</returns>
        public PermissionsResponse GetPermissions(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Kinde.Accounts.Client.ApiResponse<PermissionsResponse> localVarResponse = GetPermissionsWithHttpInfo(startingAfter, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all permissions Retrieve all permissions for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionsResponse</returns>
        public Kinde.Accounts.Client.ApiResponse<PermissionsResponse> GetPermissionsWithHttpInfo(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startingAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "starting_after", startingAfter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PermissionsResponse>("/permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all permissions Retrieve all permissions for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionsResponse</returns>
        public async System.Threading.Tasks.Task<PermissionsResponse> GetPermissionsAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Accounts.Client.ApiResponse<PermissionsResponse> localVarResponse = await GetPermissionsWithHttpInfoAsync(startingAfter, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all permissions Retrieve all permissions for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionsResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Accounts.Client.ApiResponse<PermissionsResponse>> GetPermissionsWithHttpInfoAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startingAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "starting_after", startingAfter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PermissionsResponse>("/permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all roles Retrieve all roles for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RolesResponse</returns>
        public RolesResponse GetRoles(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Kinde.Accounts.Client.ApiResponse<RolesResponse> localVarResponse = GetRolesWithHttpInfo(startingAfter, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all roles Retrieve all roles for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RolesResponse</returns>
        public Kinde.Accounts.Client.ApiResponse<RolesResponse> GetRolesWithHttpInfo(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startingAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "starting_after", startingAfter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RolesResponse>("/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all roles Retrieve all roles for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RolesResponse</returns>
        public async System.Threading.Tasks.Task<RolesResponse> GetRolesAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Accounts.Client.ApiResponse<RolesResponse> localVarResponse = await GetRolesWithHttpInfoAsync(startingAfter, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all roles Retrieve all roles for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (1-1000, server may cap this) (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RolesResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Accounts.Client.ApiResponse<RolesResponse>> GetRolesWithHttpInfoAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startingAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "starting_after", startingAfter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RolesResponse>("/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user organizations Retrieve all organizations for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserOrganizationsResponse</returns>
        public UserOrganizationsResponse GetUserOrganizations(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Kinde.Accounts.Client.ApiResponse<UserOrganizationsResponse> localVarResponse = GetUserOrganizationsWithHttpInfo(startingAfter, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user organizations Retrieve all organizations for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserOrganizationsResponse</returns>
        public Kinde.Accounts.Client.ApiResponse<UserOrganizationsResponse> GetUserOrganizationsWithHttpInfo(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startingAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "starting_after", startingAfter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetUserOrganizations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserOrganizationsResponse>("/user_organizations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserOrganizations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user organizations Retrieve all organizations for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserOrganizationsResponse</returns>
        public async System.Threading.Tasks.Task<UserOrganizationsResponse> GetUserOrganizationsAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Accounts.Client.ApiResponse<UserOrganizationsResponse> localVarResponse = await GetUserOrganizationsWithHttpInfoAsync(startingAfter, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user organizations Retrieve all organizations for the current user
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter">Cursor for fetching the next page (use the value returned by metadata.next_page_starting_after) (optional)</param>
        /// <param name="limit">Maximum number of items to return (server may cap this) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserOrganizationsResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Accounts.Client.ApiResponse<UserOrganizationsResponse>> GetUserOrganizationsWithHttpInfoAsync(string? startingAfter = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startingAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "starting_after", startingAfter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Accounts.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetUserOrganizations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserOrganizationsResponse>("/user_organizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserOrganizations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user profile Retrieve the current user&#39;s profile information
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserProfileResponse</returns>
        public UserProfileResponse GetUserProfile(int operationIndex = 0)
        {
            Kinde.Accounts.Client.ApiResponse<UserProfileResponse> localVarResponse = GetUserProfileWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user profile Retrieve the current user&#39;s profile information
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserProfileResponse</returns>
        public Kinde.Accounts.Client.ApiResponse<UserProfileResponse> GetUserProfileWithHttpInfo(int operationIndex = 0)
        {
            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetUserProfile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserProfileResponse>("/user_profile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user profile Retrieve the current user&#39;s profile information
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserProfileResponse</returns>
        public async System.Threading.Tasks.Task<UserProfileResponse> GetUserProfileAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Accounts.Client.ApiResponse<UserProfileResponse> localVarResponse = await GetUserProfileWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user profile Retrieve the current user&#39;s profile information
        /// </summary>
        /// <exception cref="Kinde.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Accounts.Client.ApiResponse<UserProfileResponse>> GetUserProfileWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Accounts.Client.RequestOptions localVarRequestOptions = new Kinde.Accounts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Accounts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Accounts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetUserProfile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserProfileResponse>("/user_profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
