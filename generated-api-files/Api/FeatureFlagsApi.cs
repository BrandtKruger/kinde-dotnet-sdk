/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Kinde.Api.Client;
using Kinde.Api.Model;

namespace Kinde.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeatureFlagsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Feature Flag
        /// </summary>
        /// <remarks>
        /// Create feature flag.  &lt;div&gt;   &lt;code&gt;create:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeatureFlagRequest">Flag details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse CreateFeatureFlag(CreateFeatureFlagRequest createFeatureFlagRequest, int operationIndex = 0);

        /// <summary>
        /// Create Feature Flag
        /// </summary>
        /// <remarks>
        /// Create feature flag.  &lt;div&gt;   &lt;code&gt;create:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeatureFlagRequest">Flag details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> CreateFeatureFlagWithHttpInfo(CreateFeatureFlagRequest createFeatureFlagRequest, int operationIndex = 0);
        /// <summary>
        /// Delete Feature Flag
        /// </summary>
        /// <remarks>
        /// Delete feature flag  &lt;div&gt;   &lt;code&gt;delete:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse DeleteFeatureFlag(string featureFlagKey, int operationIndex = 0);

        /// <summary>
        /// Delete Feature Flag
        /// </summary>
        /// <remarks>
        /// Delete feature flag  &lt;div&gt;   &lt;code&gt;delete:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> DeleteFeatureFlagWithHttpInfo(string featureFlagKey, int operationIndex = 0);
        /// <summary>
        /// Replace Feature Flag
        /// </summary>
        /// <remarks>
        /// Update feature flag.  &lt;div&gt;   &lt;code&gt;update:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The key identifier for the feature flag.</param>
        /// <param name="name">The name of the flag.</param>
        /// <param name="description">Description of the flag purpose.</param>
        /// <param name="type">The variable type</param>
        /// <param name="allowOverrideLevel">Allow the flag to be overridden at a different level.</param>
        /// <param name="defaultValue">Default value for the flag used by environments and organizations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse UpdateFeatureFlag(string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue, int operationIndex = 0);

        /// <summary>
        /// Replace Feature Flag
        /// </summary>
        /// <remarks>
        /// Update feature flag.  &lt;div&gt;   &lt;code&gt;update:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The key identifier for the feature flag.</param>
        /// <param name="name">The name of the flag.</param>
        /// <param name="description">Description of the flag purpose.</param>
        /// <param name="type">The variable type</param>
        /// <param name="allowOverrideLevel">Allow the flag to be overridden at a different level.</param>
        /// <param name="defaultValue">Default value for the flag used by environments and organizations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> UpdateFeatureFlagWithHttpInfo(string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeatureFlagsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Feature Flag
        /// </summary>
        /// <remarks>
        /// Create feature flag.  &lt;div&gt;   &lt;code&gt;create:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeatureFlagRequest">Flag details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> CreateFeatureFlagAsync(CreateFeatureFlagRequest createFeatureFlagRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Feature Flag
        /// </summary>
        /// <remarks>
        /// Create feature flag.  &lt;div&gt;   &lt;code&gt;create:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeatureFlagRequest">Flag details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> CreateFeatureFlagWithHttpInfoAsync(CreateFeatureFlagRequest createFeatureFlagRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Feature Flag
        /// </summary>
        /// <remarks>
        /// Delete feature flag  &lt;div&gt;   &lt;code&gt;delete:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> DeleteFeatureFlagAsync(string featureFlagKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Feature Flag
        /// </summary>
        /// <remarks>
        /// Delete feature flag  &lt;div&gt;   &lt;code&gt;delete:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> DeleteFeatureFlagWithHttpInfoAsync(string featureFlagKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace Feature Flag
        /// </summary>
        /// <remarks>
        /// Update feature flag.  &lt;div&gt;   &lt;code&gt;update:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The key identifier for the feature flag.</param>
        /// <param name="name">The name of the flag.</param>
        /// <param name="description">Description of the flag purpose.</param>
        /// <param name="type">The variable type</param>
        /// <param name="allowOverrideLevel">Allow the flag to be overridden at a different level.</param>
        /// <param name="defaultValue">Default value for the flag used by environments and organizations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> UpdateFeatureFlagAsync(string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace Feature Flag
        /// </summary>
        /// <remarks>
        /// Update feature flag.  &lt;div&gt;   &lt;code&gt;update:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The key identifier for the feature flag.</param>
        /// <param name="name">The name of the flag.</param>
        /// <param name="description">Description of the flag purpose.</param>
        /// <param name="type">The variable type</param>
        /// <param name="allowOverrideLevel">Allow the flag to be overridden at a different level.</param>
        /// <param name="defaultValue">Default value for the flag used by environments and organizations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> UpdateFeatureFlagWithHttpInfoAsync(string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeatureFlagsApi : IFeatureFlagsApiSync, IFeatureFlagsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FeatureFlagsApi : IFeatureFlagsApi
    {
        private Kinde.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeatureFlagsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeatureFlagsApi(string basePath)
        {
            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                new Kinde.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlagsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FeatureFlagsApi(Kinde.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlagsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FeatureFlagsApi(Kinde.Api.Client.ISynchronousClient client, Kinde.Api.Client.IAsynchronousClient asyncClient, Kinde.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kinde.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kinde.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kinde.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kinde.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Feature Flag Create feature flag.  &lt;div&gt;   &lt;code&gt;create:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeatureFlagRequest">Flag details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse CreateFeatureFlag(CreateFeatureFlagRequest createFeatureFlagRequest, int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = CreateFeatureFlagWithHttpInfo(createFeatureFlagRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Feature Flag Create feature flag.  &lt;div&gt;   &lt;code&gt;create:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeatureFlagRequest">Flag details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.Api.Client.ApiResponse<SuccessResponse> CreateFeatureFlagWithHttpInfo(CreateFeatureFlagRequest createFeatureFlagRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createFeatureFlagRequest' is set
            if (createFeatureFlagRequest == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'createFeatureFlagRequest' when calling FeatureFlagsApi->CreateFeatureFlag");
            }

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFeatureFlagRequest;

            localVarRequestOptions.Operation = "FeatureFlagsApi.CreateFeatureFlag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SuccessResponse>("/api/v1/feature_flags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFeatureFlag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Feature Flag Create feature flag.  &lt;div&gt;   &lt;code&gt;create:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeatureFlagRequest">Flag details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> CreateFeatureFlagAsync(CreateFeatureFlagRequest createFeatureFlagRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = await CreateFeatureFlagWithHttpInfoAsync(createFeatureFlagRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Feature Flag Create feature flag.  &lt;div&gt;   &lt;code&gt;create:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeatureFlagRequest">Flag details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<SuccessResponse>> CreateFeatureFlagWithHttpInfoAsync(CreateFeatureFlagRequest createFeatureFlagRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createFeatureFlagRequest' is set
            if (createFeatureFlagRequest == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'createFeatureFlagRequest' when calling FeatureFlagsApi->CreateFeatureFlag");
            }


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFeatureFlagRequest;

            localVarRequestOptions.Operation = "FeatureFlagsApi.CreateFeatureFlag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SuccessResponse>("/api/v1/feature_flags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFeatureFlag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Feature Flag Delete feature flag  &lt;div&gt;   &lt;code&gt;delete:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse DeleteFeatureFlag(string featureFlagKey, int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = DeleteFeatureFlagWithHttpInfo(featureFlagKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Feature Flag Delete feature flag  &lt;div&gt;   &lt;code&gt;delete:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.Api.Client.ApiResponse<SuccessResponse> DeleteFeatureFlagWithHttpInfo(string featureFlagKey, int operationIndex = 0)
        {
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'featureFlagKey' when calling FeatureFlagsApi->DeleteFeatureFlag");
            }

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feature_flag_key", Kinde.Api.Client.ClientUtils.ParameterToString(featureFlagKey)); // path parameter

            localVarRequestOptions.Operation = "FeatureFlagsApi.DeleteFeatureFlag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SuccessResponse>("/api/v1/feature_flags/{feature_flag_key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFeatureFlag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Feature Flag Delete feature flag  &lt;div&gt;   &lt;code&gt;delete:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> DeleteFeatureFlagAsync(string featureFlagKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = await DeleteFeatureFlagWithHttpInfoAsync(featureFlagKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Feature Flag Delete feature flag  &lt;div&gt;   &lt;code&gt;delete:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<SuccessResponse>> DeleteFeatureFlagWithHttpInfoAsync(string featureFlagKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'featureFlagKey' when calling FeatureFlagsApi->DeleteFeatureFlag");
            }


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feature_flag_key", Kinde.Api.Client.ClientUtils.ParameterToString(featureFlagKey)); // path parameter

            localVarRequestOptions.Operation = "FeatureFlagsApi.DeleteFeatureFlag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SuccessResponse>("/api/v1/feature_flags/{feature_flag_key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFeatureFlag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Feature Flag Update feature flag.  &lt;div&gt;   &lt;code&gt;update:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The key identifier for the feature flag.</param>
        /// <param name="name">The name of the flag.</param>
        /// <param name="description">Description of the flag purpose.</param>
        /// <param name="type">The variable type</param>
        /// <param name="allowOverrideLevel">Allow the flag to be overridden at a different level.</param>
        /// <param name="defaultValue">Default value for the flag used by environments and organizations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse UpdateFeatureFlag(string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue, int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = UpdateFeatureFlagWithHttpInfo(featureFlagKey, name, description, type, allowOverrideLevel, defaultValue);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Feature Flag Update feature flag.  &lt;div&gt;   &lt;code&gt;update:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The key identifier for the feature flag.</param>
        /// <param name="name">The name of the flag.</param>
        /// <param name="description">Description of the flag purpose.</param>
        /// <param name="type">The variable type</param>
        /// <param name="allowOverrideLevel">Allow the flag to be overridden at a different level.</param>
        /// <param name="defaultValue">Default value for the flag used by environments and organizations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.Api.Client.ApiResponse<SuccessResponse> UpdateFeatureFlagWithHttpInfo(string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue, int operationIndex = 0)
        {
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'featureFlagKey' when calling FeatureFlagsApi->UpdateFeatureFlag");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'name' when calling FeatureFlagsApi->UpdateFeatureFlag");
            }

            // verify the required parameter 'description' is set
            if (description == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'description' when calling FeatureFlagsApi->UpdateFeatureFlag");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'type' when calling FeatureFlagsApi->UpdateFeatureFlag");
            }

            // verify the required parameter 'allowOverrideLevel' is set
            if (allowOverrideLevel == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'allowOverrideLevel' when calling FeatureFlagsApi->UpdateFeatureFlag");
            }

            // verify the required parameter 'defaultValue' is set
            if (defaultValue == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'defaultValue' when calling FeatureFlagsApi->UpdateFeatureFlag");
            }

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feature_flag_key", Kinde.Api.Client.ClientUtils.ParameterToString(featureFlagKey)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "allow_override_level", allowOverrideLevel));
            localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "default_value", defaultValue));

            localVarRequestOptions.Operation = "FeatureFlagsApi.UpdateFeatureFlag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SuccessResponse>("/api/v1/feature_flags/{feature_flag_key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFeatureFlag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Feature Flag Update feature flag.  &lt;div&gt;   &lt;code&gt;update:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The key identifier for the feature flag.</param>
        /// <param name="name">The name of the flag.</param>
        /// <param name="description">Description of the flag purpose.</param>
        /// <param name="type">The variable type</param>
        /// <param name="allowOverrideLevel">Allow the flag to be overridden at a different level.</param>
        /// <param name="defaultValue">Default value for the flag used by environments and organizations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> UpdateFeatureFlagAsync(string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<SuccessResponse> localVarResponse = await UpdateFeatureFlagWithHttpInfoAsync(featureFlagKey, name, description, type, allowOverrideLevel, defaultValue, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Feature Flag Update feature flag.  &lt;div&gt;   &lt;code&gt;update:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The key identifier for the feature flag.</param>
        /// <param name="name">The name of the flag.</param>
        /// <param name="description">Description of the flag purpose.</param>
        /// <param name="type">The variable type</param>
        /// <param name="allowOverrideLevel">Allow the flag to be overridden at a different level.</param>
        /// <param name="defaultValue">Default value for the flag used by environments and organizations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<SuccessResponse>> UpdateFeatureFlagWithHttpInfoAsync(string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'featureFlagKey' when calling FeatureFlagsApi->UpdateFeatureFlag");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'name' when calling FeatureFlagsApi->UpdateFeatureFlag");
            }

            // verify the required parameter 'description' is set
            if (description == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'description' when calling FeatureFlagsApi->UpdateFeatureFlag");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'type' when calling FeatureFlagsApi->UpdateFeatureFlag");
            }

            // verify the required parameter 'allowOverrideLevel' is set
            if (allowOverrideLevel == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'allowOverrideLevel' when calling FeatureFlagsApi->UpdateFeatureFlag");
            }

            // verify the required parameter 'defaultValue' is set
            if (defaultValue == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'defaultValue' when calling FeatureFlagsApi->UpdateFeatureFlag");
            }


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feature_flag_key", Kinde.Api.Client.ClientUtils.ParameterToString(featureFlagKey)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "allow_override_level", allowOverrideLevel));
            localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "default_value", defaultValue));

            localVarRequestOptions.Operation = "FeatureFlagsApi.UpdateFeatureFlag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SuccessResponse>("/api/v1/feature_flags/{feature_flag_key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFeatureFlag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
