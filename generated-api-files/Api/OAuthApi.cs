/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Kinde.Api.Client;
using Kinde.Api.Model;

namespace Kinde.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuthApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get user profile
        /// </summary>
        /// <remarks>
        /// This endpoint returns a user&#39;s ID, names, profile picture URL and email of the currently logged in user. 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserProfileV2</returns>
        UserProfileV2 GetUserProfileV2(int operationIndex = 0);

        /// <summary>
        /// Get user profile
        /// </summary>
        /// <remarks>
        /// This endpoint returns a user&#39;s ID, names, profile picture URL and email of the currently logged in user. 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserProfileV2</returns>
        ApiResponse<UserProfileV2> GetUserProfileV2WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Introspect
        /// </summary>
        /// <remarks>
        /// Retrieve information about the provided token.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to be introspected.</param>
        /// <param name="tokenTypeHint">A hint about the token type being queried in the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenIntrospect</returns>
        TokenIntrospect TokenIntrospection(string token, string? tokenTypeHint = default(string?), int operationIndex = 0);

        /// <summary>
        /// Introspect
        /// </summary>
        /// <remarks>
        /// Retrieve information about the provided token.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to be introspected.</param>
        /// <param name="tokenTypeHint">A hint about the token type being queried in the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenIntrospect</returns>
        ApiResponse<TokenIntrospect> TokenIntrospectionWithHttpInfo(string token, string? tokenTypeHint = default(string?), int operationIndex = 0);
        /// <summary>
        /// Revoke token
        /// </summary>
        /// <remarks>
        /// Use this endpoint to invalidate an access or refresh token. The token will no longer be valid for use.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; of your application.</param>
        /// <param name="token">The token to be revoked.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; of your application. Required for backend apps only. (optional)</param>
        /// <param name="tokenTypeHint">The type of token to be revoked. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void TokenRevocation(string clientId, string token, string? clientSecret = default(string?), string? tokenTypeHint = default(string?), int operationIndex = 0);

        /// <summary>
        /// Revoke token
        /// </summary>
        /// <remarks>
        /// Use this endpoint to invalidate an access or refresh token. The token will no longer be valid for use.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; of your application.</param>
        /// <param name="token">The token to be revoked.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; of your application. Required for backend apps only. (optional)</param>
        /// <param name="tokenTypeHint">The type of token to be revoked. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TokenRevocationWithHttpInfo(string clientId, string token, string? clientSecret = default(string?), string? tokenTypeHint = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuthApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get user profile
        /// </summary>
        /// <remarks>
        /// This endpoint returns a user&#39;s ID, names, profile picture URL and email of the currently logged in user. 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserProfileV2</returns>
        System.Threading.Tasks.Task<UserProfileV2> GetUserProfileV2Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get user profile
        /// </summary>
        /// <remarks>
        /// This endpoint returns a user&#39;s ID, names, profile picture URL and email of the currently logged in user. 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserProfileV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProfileV2>> GetUserProfileV2WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Introspect
        /// </summary>
        /// <remarks>
        /// Retrieve information about the provided token.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to be introspected.</param>
        /// <param name="tokenTypeHint">A hint about the token type being queried in the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenIntrospect</returns>
        System.Threading.Tasks.Task<TokenIntrospect> TokenIntrospectionAsync(string token, string? tokenTypeHint = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Introspect
        /// </summary>
        /// <remarks>
        /// Retrieve information about the provided token.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to be introspected.</param>
        /// <param name="tokenTypeHint">A hint about the token type being queried in the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenIntrospect)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenIntrospect>> TokenIntrospectionWithHttpInfoAsync(string token, string? tokenTypeHint = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke token
        /// </summary>
        /// <remarks>
        /// Use this endpoint to invalidate an access or refresh token. The token will no longer be valid for use.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; of your application.</param>
        /// <param name="token">The token to be revoked.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; of your application. Required for backend apps only. (optional)</param>
        /// <param name="tokenTypeHint">The type of token to be revoked. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TokenRevocationAsync(string clientId, string token, string? clientSecret = default(string?), string? tokenTypeHint = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke token
        /// </summary>
        /// <remarks>
        /// Use this endpoint to invalidate an access or refresh token. The token will no longer be valid for use.
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; of your application.</param>
        /// <param name="token">The token to be revoked.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; of your application. Required for backend apps only. (optional)</param>
        /// <param name="tokenTypeHint">The type of token to be revoked. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TokenRevocationWithHttpInfoAsync(string clientId, string token, string? clientSecret = default(string?), string? tokenTypeHint = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuthApi : IOAuthApiSync, IOAuthApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OAuthApi : IOAuthApi
    {
        private Kinde.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuthApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuthApi(string basePath)
        {
            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                new Kinde.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OAuthApi(Kinde.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OAuthApi(Kinde.Api.Client.ISynchronousClient client, Kinde.Api.Client.IAsynchronousClient asyncClient, Kinde.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kinde.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kinde.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kinde.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kinde.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get user profile This endpoint returns a user&#39;s ID, names, profile picture URL and email of the currently logged in user. 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserProfileV2</returns>
        public UserProfileV2 GetUserProfileV2(int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<UserProfileV2> localVarResponse = GetUserProfileV2WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user profile This endpoint returns a user&#39;s ID, names, profile picture URL and email of the currently logged in user. 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserProfileV2</returns>
        public Kinde.Api.Client.ApiResponse<UserProfileV2> GetUserProfileV2WithHttpInfo(int operationIndex = 0)
        {
            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OAuthApi.GetUserProfileV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserProfileV2>("/oauth2/v2/user_profile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserProfileV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user profile This endpoint returns a user&#39;s ID, names, profile picture URL and email of the currently logged in user. 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserProfileV2</returns>
        public async System.Threading.Tasks.Task<UserProfileV2> GetUserProfileV2Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<UserProfileV2> localVarResponse = await GetUserProfileV2WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user profile This endpoint returns a user&#39;s ID, names, profile picture URL and email of the currently logged in user. 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserProfileV2)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<UserProfileV2>> GetUserProfileV2WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OAuthApi.GetUserProfileV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserProfileV2>("/oauth2/v2/user_profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserProfileV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Introspect Retrieve information about the provided token.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to be introspected.</param>
        /// <param name="tokenTypeHint">A hint about the token type being queried in the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenIntrospect</returns>
        public TokenIntrospect TokenIntrospection(string token, string? tokenTypeHint = default(string?), int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<TokenIntrospect> localVarResponse = TokenIntrospectionWithHttpInfo(token, tokenTypeHint);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Introspect Retrieve information about the provided token.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to be introspected.</param>
        /// <param name="tokenTypeHint">A hint about the token type being queried in the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenIntrospect</returns>
        public Kinde.Api.Client.ApiResponse<TokenIntrospect> TokenIntrospectionWithHttpInfo(string token, string? tokenTypeHint = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'token' when calling OAuthApi->TokenIntrospection");
            }

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("token", Kinde.Api.Client.ClientUtils.ParameterToString(token)); // form parameter
            if (tokenTypeHint != null)
            {
                localVarRequestOptions.FormParameters.Add("token_type_hint", Kinde.Api.Client.ClientUtils.ParameterToString(tokenTypeHint)); // form parameter
            }

            localVarRequestOptions.Operation = "OAuthApi.TokenIntrospection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TokenIntrospect>("/oauth2/introspect", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenIntrospection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Introspect Retrieve information about the provided token.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to be introspected.</param>
        /// <param name="tokenTypeHint">A hint about the token type being queried in the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenIntrospect</returns>
        public async System.Threading.Tasks.Task<TokenIntrospect> TokenIntrospectionAsync(string token, string? tokenTypeHint = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<TokenIntrospect> localVarResponse = await TokenIntrospectionWithHttpInfoAsync(token, tokenTypeHint, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Introspect Retrieve information about the provided token.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to be introspected.</param>
        /// <param name="tokenTypeHint">A hint about the token type being queried in the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenIntrospect)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<TokenIntrospect>> TokenIntrospectionWithHttpInfoAsync(string token, string? tokenTypeHint = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'token' when calling OAuthApi->TokenIntrospection");
            }


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("token", Kinde.Api.Client.ClientUtils.ParameterToString(token)); // form parameter
            if (tokenTypeHint != null)
            {
                localVarRequestOptions.FormParameters.Add("token_type_hint", Kinde.Api.Client.ClientUtils.ParameterToString(tokenTypeHint)); // form parameter
            }

            localVarRequestOptions.Operation = "OAuthApi.TokenIntrospection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TokenIntrospect>("/oauth2/introspect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenIntrospection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke token Use this endpoint to invalidate an access or refresh token. The token will no longer be valid for use.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; of your application.</param>
        /// <param name="token">The token to be revoked.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; of your application. Required for backend apps only. (optional)</param>
        /// <param name="tokenTypeHint">The type of token to be revoked. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void TokenRevocation(string clientId, string token, string? clientSecret = default(string?), string? tokenTypeHint = default(string?), int operationIndex = 0)
        {
            TokenRevocationWithHttpInfo(clientId, token, clientSecret, tokenTypeHint);
        }

        /// <summary>
        /// Revoke token Use this endpoint to invalidate an access or refresh token. The token will no longer be valid for use.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; of your application.</param>
        /// <param name="token">The token to be revoked.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; of your application. Required for backend apps only. (optional)</param>
        /// <param name="tokenTypeHint">The type of token to be revoked. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Kinde.Api.Client.ApiResponse<Object> TokenRevocationWithHttpInfo(string clientId, string token, string? clientSecret = default(string?), string? tokenTypeHint = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'clientId' when calling OAuthApi->TokenRevocation");
            }

            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'token' when calling OAuthApi->TokenRevocation");
            }

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("client_id", Kinde.Api.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", Kinde.Api.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("token", Kinde.Api.Client.ClientUtils.ParameterToString(token)); // form parameter
            if (tokenTypeHint != null)
            {
                localVarRequestOptions.FormParameters.Add("token_type_hint", Kinde.Api.Client.ClientUtils.ParameterToString(tokenTypeHint)); // form parameter
            }

            localVarRequestOptions.Operation = "OAuthApi.TokenRevocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/oauth2/revoke", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenRevocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke token Use this endpoint to invalidate an access or refresh token. The token will no longer be valid for use.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; of your application.</param>
        /// <param name="token">The token to be revoked.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; of your application. Required for backend apps only. (optional)</param>
        /// <param name="tokenTypeHint">The type of token to be revoked. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TokenRevocationAsync(string clientId, string token, string? clientSecret = default(string?), string? tokenTypeHint = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await TokenRevocationWithHttpInfoAsync(clientId, token, clientSecret, tokenTypeHint, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke token Use this endpoint to invalidate an access or refresh token. The token will no longer be valid for use.
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; of your application.</param>
        /// <param name="token">The token to be revoked.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; of your application. Required for backend apps only. (optional)</param>
        /// <param name="tokenTypeHint">The type of token to be revoked. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<Object>> TokenRevocationWithHttpInfoAsync(string clientId, string token, string? clientSecret = default(string?), string? tokenTypeHint = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'clientId' when calling OAuthApi->TokenRevocation");
            }

            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'token' when calling OAuthApi->TokenRevocation");
            }


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("client_id", Kinde.Api.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", Kinde.Api.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("token", Kinde.Api.Client.ClientUtils.ParameterToString(token)); // form parameter
            if (tokenTypeHint != null)
            {
                localVarRequestOptions.FormParameters.Add("token_type_hint", Kinde.Api.Client.ClientUtils.ParameterToString(tokenTypeHint)); // form parameter
            }

            localVarRequestOptions.Operation = "OAuthApi.TokenRevocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/oauth2/revoke", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenRevocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
