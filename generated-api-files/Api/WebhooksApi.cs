/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Kinde.Api.Client;
using Kinde.Api.Model;

namespace Kinde.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Webhook
        /// </summary>
        /// <remarks>
        /// Create a webhook  &lt;div&gt;   &lt;code&gt;create:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebHookRequest">Webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateWebhookResponse</returns>
        CreateWebhookResponse CreateWebHook(CreateWebHookRequest createWebHookRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Webhook
        /// </summary>
        /// <remarks>
        /// Create a webhook  &lt;div&gt;   &lt;code&gt;create:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebHookRequest">Webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateWebhookResponse</returns>
        ApiResponse<CreateWebhookResponse> CreateWebHookWithHttpInfo(CreateWebHookRequest createWebHookRequest, int operationIndex = 0);
        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Delete webhook  &lt;div&gt;   &lt;code&gt;delete:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteWebhookResponse</returns>
        DeleteWebhookResponse DeleteWebHook(string webhookId, int operationIndex = 0);

        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Delete webhook  &lt;div&gt;   &lt;code&gt;delete:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteWebhookResponse</returns>
        ApiResponse<DeleteWebhookResponse> DeleteWebHookWithHttpInfo(string webhookId, int operationIndex = 0);
        /// <summary>
        /// Get Event
        /// </summary>
        /// <remarks>
        /// Returns an event  &lt;div&gt;   &lt;code&gt;read:events&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The event id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEventResponse</returns>
        GetEventResponse GetEvent(string eventId, int operationIndex = 0);

        /// <summary>
        /// Get Event
        /// </summary>
        /// <remarks>
        /// Returns an event  &lt;div&gt;   &lt;code&gt;read:events&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The event id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEventResponse</returns>
        ApiResponse<GetEventResponse> GetEventWithHttpInfo(string eventId, int operationIndex = 0);
        /// <summary>
        /// List Event Types
        /// </summary>
        /// <remarks>
        /// Returns a list event type definitions  &lt;div&gt;   &lt;code&gt;read:event_types&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEventTypesResponse</returns>
        GetEventTypesResponse GetEventTypes(int operationIndex = 0);

        /// <summary>
        /// List Event Types
        /// </summary>
        /// <remarks>
        /// Returns a list event type definitions  &lt;div&gt;   &lt;code&gt;read:event_types&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEventTypesResponse</returns>
        ApiResponse<GetEventTypesResponse> GetEventTypesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// List webhooks  &lt;div&gt;   &lt;code&gt;read:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWebhooksResponse</returns>
        GetWebhooksResponse GetWebHooks(int operationIndex = 0);

        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// List webhooks  &lt;div&gt;   &lt;code&gt;read:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWebhooksResponse</returns>
        ApiResponse<GetWebhooksResponse> GetWebHooksWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update a Webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook  &lt;div&gt;   &lt;code&gt;update:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="updateWebHookRequest">Update webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateWebhookResponse</returns>
        UpdateWebhookResponse UpdateWebHook(string webhookId, UpdateWebHookRequest updateWebHookRequest, int operationIndex = 0);

        /// <summary>
        /// Update a Webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook  &lt;div&gt;   &lt;code&gt;update:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="updateWebHookRequest">Update webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateWebhookResponse</returns>
        ApiResponse<UpdateWebhookResponse> UpdateWebHookWithHttpInfo(string webhookId, UpdateWebHookRequest updateWebHookRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Webhook
        /// </summary>
        /// <remarks>
        /// Create a webhook  &lt;div&gt;   &lt;code&gt;create:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebHookRequest">Webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWebhookResponse</returns>
        System.Threading.Tasks.Task<CreateWebhookResponse> CreateWebHookAsync(CreateWebHookRequest createWebHookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Webhook
        /// </summary>
        /// <remarks>
        /// Create a webhook  &lt;div&gt;   &lt;code&gt;create:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebHookRequest">Webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWebhookResponse>> CreateWebHookWithHttpInfoAsync(CreateWebHookRequest createWebHookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Delete webhook  &lt;div&gt;   &lt;code&gt;delete:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteWebhookResponse</returns>
        System.Threading.Tasks.Task<DeleteWebhookResponse> DeleteWebHookAsync(string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Delete webhook  &lt;div&gt;   &lt;code&gt;delete:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteWebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteWebhookResponse>> DeleteWebHookWithHttpInfoAsync(string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Event
        /// </summary>
        /// <remarks>
        /// Returns an event  &lt;div&gt;   &lt;code&gt;read:events&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The event id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEventResponse</returns>
        System.Threading.Tasks.Task<GetEventResponse> GetEventAsync(string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Event
        /// </summary>
        /// <remarks>
        /// Returns an event  &lt;div&gt;   &lt;code&gt;read:events&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The event id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEventResponse>> GetEventWithHttpInfoAsync(string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Event Types
        /// </summary>
        /// <remarks>
        /// Returns a list event type definitions  &lt;div&gt;   &lt;code&gt;read:event_types&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEventTypesResponse</returns>
        System.Threading.Tasks.Task<GetEventTypesResponse> GetEventTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Event Types
        /// </summary>
        /// <remarks>
        /// Returns a list event type definitions  &lt;div&gt;   &lt;code&gt;read:event_types&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEventTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEventTypesResponse>> GetEventTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// List webhooks  &lt;div&gt;   &lt;code&gt;read:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWebhooksResponse</returns>
        System.Threading.Tasks.Task<GetWebhooksResponse> GetWebHooksAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// List webhooks  &lt;div&gt;   &lt;code&gt;read:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWebhooksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWebhooksResponse>> GetWebHooksWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook  &lt;div&gt;   &lt;code&gt;update:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="updateWebHookRequest">Update webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateWebhookResponse</returns>
        System.Threading.Tasks.Task<UpdateWebhookResponse> UpdateWebHookAsync(string webhookId, UpdateWebHookRequest updateWebHookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook  &lt;div&gt;   &lt;code&gt;update:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="updateWebHookRequest">Update webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateWebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateWebhookResponse>> UpdateWebHookWithHttpInfoAsync(string webhookId, UpdateWebHookRequest updateWebHookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IWebhooksApiSync, IWebhooksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private Kinde.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(string basePath)
        {
            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                new Kinde.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(Kinde.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebhooksApi(Kinde.Api.Client.ISynchronousClient client, Kinde.Api.Client.IAsynchronousClient asyncClient, Kinde.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kinde.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kinde.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kinde.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kinde.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Webhook Create a webhook  &lt;div&gt;   &lt;code&gt;create:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebHookRequest">Webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateWebhookResponse</returns>
        public CreateWebhookResponse CreateWebHook(CreateWebHookRequest createWebHookRequest, int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<CreateWebhookResponse> localVarResponse = CreateWebHookWithHttpInfo(createWebHookRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Webhook Create a webhook  &lt;div&gt;   &lt;code&gt;create:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebHookRequest">Webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateWebhookResponse</returns>
        public Kinde.Api.Client.ApiResponse<CreateWebhookResponse> CreateWebHookWithHttpInfo(CreateWebHookRequest createWebHookRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createWebHookRequest' is set
            if (createWebHookRequest == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'createWebHookRequest' when calling WebhooksApi->CreateWebHook");
            }

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createWebHookRequest;

            localVarRequestOptions.Operation = "WebhooksApi.CreateWebHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateWebhookResponse>("/api/v1/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Webhook Create a webhook  &lt;div&gt;   &lt;code&gt;create:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebHookRequest">Webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWebhookResponse</returns>
        public async System.Threading.Tasks.Task<CreateWebhookResponse> CreateWebHookAsync(CreateWebHookRequest createWebHookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<CreateWebhookResponse> localVarResponse = await CreateWebHookWithHttpInfoAsync(createWebHookRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Webhook Create a webhook  &lt;div&gt;   &lt;code&gt;create:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebHookRequest">Webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWebhookResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<CreateWebhookResponse>> CreateWebHookWithHttpInfoAsync(CreateWebHookRequest createWebHookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createWebHookRequest' is set
            if (createWebHookRequest == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'createWebHookRequest' when calling WebhooksApi->CreateWebHook");
            }


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createWebHookRequest;

            localVarRequestOptions.Operation = "WebhooksApi.CreateWebHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateWebhookResponse>("/api/v1/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Webhook Delete webhook  &lt;div&gt;   &lt;code&gt;delete:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteWebhookResponse</returns>
        public DeleteWebhookResponse DeleteWebHook(string webhookId, int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<DeleteWebhookResponse> localVarResponse = DeleteWebHookWithHttpInfo(webhookId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Webhook Delete webhook  &lt;div&gt;   &lt;code&gt;delete:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteWebhookResponse</returns>
        public Kinde.Api.Client.ApiResponse<DeleteWebhookResponse> DeleteWebHookWithHttpInfo(string webhookId, int operationIndex = 0)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->DeleteWebHook");
            }

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("webhook_id", Kinde.Api.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.DeleteWebHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteWebhookResponse>("/api/v1/webhooks/{webhook_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Webhook Delete webhook  &lt;div&gt;   &lt;code&gt;delete:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteWebhookResponse</returns>
        public async System.Threading.Tasks.Task<DeleteWebhookResponse> DeleteWebHookAsync(string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<DeleteWebhookResponse> localVarResponse = await DeleteWebHookWithHttpInfoAsync(webhookId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Webhook Delete webhook  &lt;div&gt;   &lt;code&gt;delete:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteWebhookResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<DeleteWebhookResponse>> DeleteWebHookWithHttpInfoAsync(string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->DeleteWebHook");
            }


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("webhook_id", Kinde.Api.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.DeleteWebHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteWebhookResponse>("/api/v1/webhooks/{webhook_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Event Returns an event  &lt;div&gt;   &lt;code&gt;read:events&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The event id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEventResponse</returns>
        public GetEventResponse GetEvent(string eventId, int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<GetEventResponse> localVarResponse = GetEventWithHttpInfo(eventId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Event Returns an event  &lt;div&gt;   &lt;code&gt;read:events&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The event id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEventResponse</returns>
        public Kinde.Api.Client.ApiResponse<GetEventResponse> GetEventWithHttpInfo(string eventId, int operationIndex = 0)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'eventId' when calling WebhooksApi->GetEvent");
            }

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("event_id", Kinde.Api.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.GetEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEventResponse>("/api/v1/events/{event_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Event Returns an event  &lt;div&gt;   &lt;code&gt;read:events&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The event id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEventResponse</returns>
        public async System.Threading.Tasks.Task<GetEventResponse> GetEventAsync(string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<GetEventResponse> localVarResponse = await GetEventWithHttpInfoAsync(eventId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Event Returns an event  &lt;div&gt;   &lt;code&gt;read:events&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The event id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEventResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<GetEventResponse>> GetEventWithHttpInfoAsync(string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'eventId' when calling WebhooksApi->GetEvent");
            }


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("event_id", Kinde.Api.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.GetEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEventResponse>("/api/v1/events/{event_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Event Types Returns a list event type definitions  &lt;div&gt;   &lt;code&gt;read:event_types&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEventTypesResponse</returns>
        public GetEventTypesResponse GetEventTypes(int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<GetEventTypesResponse> localVarResponse = GetEventTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Event Types Returns a list event type definitions  &lt;div&gt;   &lt;code&gt;read:event_types&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEventTypesResponse</returns>
        public Kinde.Api.Client.ApiResponse<GetEventTypesResponse> GetEventTypesWithHttpInfo(int operationIndex = 0)
        {
            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhooksApi.GetEventTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEventTypesResponse>("/api/v1/event_types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Event Types Returns a list event type definitions  &lt;div&gt;   &lt;code&gt;read:event_types&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEventTypesResponse</returns>
        public async System.Threading.Tasks.Task<GetEventTypesResponse> GetEventTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<GetEventTypesResponse> localVarResponse = await GetEventTypesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Event Types Returns a list event type definitions  &lt;div&gt;   &lt;code&gt;read:event_types&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEventTypesResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<GetEventTypesResponse>> GetEventTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhooksApi.GetEventTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEventTypesResponse>("/api/v1/event_types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Webhooks List webhooks  &lt;div&gt;   &lt;code&gt;read:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWebhooksResponse</returns>
        public GetWebhooksResponse GetWebHooks(int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<GetWebhooksResponse> localVarResponse = GetWebHooksWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Webhooks List webhooks  &lt;div&gt;   &lt;code&gt;read:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWebhooksResponse</returns>
        public Kinde.Api.Client.ApiResponse<GetWebhooksResponse> GetWebHooksWithHttpInfo(int operationIndex = 0)
        {
            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhooksApi.GetWebHooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetWebhooksResponse>("/api/v1/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebHooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Webhooks List webhooks  &lt;div&gt;   &lt;code&gt;read:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWebhooksResponse</returns>
        public async System.Threading.Tasks.Task<GetWebhooksResponse> GetWebHooksAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<GetWebhooksResponse> localVarResponse = await GetWebHooksWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Webhooks List webhooks  &lt;div&gt;   &lt;code&gt;read:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWebhooksResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<GetWebhooksResponse>> GetWebHooksWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhooksApi.GetWebHooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetWebhooksResponse>("/api/v1/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebHooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Webhook Update a webhook  &lt;div&gt;   &lt;code&gt;update:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="updateWebHookRequest">Update webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateWebhookResponse</returns>
        public UpdateWebhookResponse UpdateWebHook(string webhookId, UpdateWebHookRequest updateWebHookRequest, int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<UpdateWebhookResponse> localVarResponse = UpdateWebHookWithHttpInfo(webhookId, updateWebHookRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Webhook Update a webhook  &lt;div&gt;   &lt;code&gt;update:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="updateWebHookRequest">Update webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateWebhookResponse</returns>
        public Kinde.Api.Client.ApiResponse<UpdateWebhookResponse> UpdateWebHookWithHttpInfo(string webhookId, UpdateWebHookRequest updateWebHookRequest, int operationIndex = 0)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->UpdateWebHook");
            }

            // verify the required parameter 'updateWebHookRequest' is set
            if (updateWebHookRequest == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'updateWebHookRequest' when calling WebhooksApi->UpdateWebHook");
            }

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("webhook_id", Kinde.Api.Client.ClientUtils.ParameterToString(webhookId)); // path parameter
            localVarRequestOptions.Data = updateWebHookRequest;

            localVarRequestOptions.Operation = "WebhooksApi.UpdateWebHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateWebhookResponse>("/api/v1/webhooks/{webhook_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Webhook Update a webhook  &lt;div&gt;   &lt;code&gt;update:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="updateWebHookRequest">Update webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateWebhookResponse</returns>
        public async System.Threading.Tasks.Task<UpdateWebhookResponse> UpdateWebHookAsync(string webhookId, UpdateWebHookRequest updateWebHookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<UpdateWebhookResponse> localVarResponse = await UpdateWebHookWithHttpInfoAsync(webhookId, updateWebHookRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Webhook Update a webhook  &lt;div&gt;   &lt;code&gt;update:webhooks&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook id.</param>
        /// <param name="updateWebHookRequest">Update webhook request specification.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateWebhookResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<UpdateWebhookResponse>> UpdateWebHookWithHttpInfoAsync(string webhookId, UpdateWebHookRequest updateWebHookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->UpdateWebHook");
            }

            // verify the required parameter 'updateWebHookRequest' is set
            if (updateWebHookRequest == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'updateWebHookRequest' when calling WebhooksApi->UpdateWebHook");
            }


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("webhook_id", Kinde.Api.Client.ClientUtils.ParameterToString(webhookId)); // path parameter
            localVarRequestOptions.Data = updateWebHookRequest;

            localVarRequestOptions.Operation = "WebhooksApi.UpdateWebHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateWebhookResponse>("/api/v1/webhooks/{webhook_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
