/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Kinde.Api.Client;
using Kinde.Api.Model;

namespace Kinde.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBillingEntitlementsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get billing entitlements
        /// </summary>
        /// <remarks>
        /// Returns all the entitlements a billing customer currently has access to  &lt;div&gt;   &lt;code&gt;read:billing_entitlements&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The ID of the billing customer to retrieve entitlements for</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="startingAfter">The ID of the billing entitlement to start after. (optional)</param>
        /// <param name="endingBefore">The ID of the billing entitlement to end before. (optional)</param>
        /// <param name="maxValue">When the maximum limit of an entitlement is null, this value is returned as the maximum limit (optional)</param>
        /// <param name="expand">Specify additional plan data to retrieve. Use \&quot;plans\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBillingEntitlementsResponse</returns>
        GetBillingEntitlementsResponse GetBillingEntitlements(string customerId, int? pageSize = default(int?), string? startingAfter = default(string?), string? endingBefore = default(string?), string? maxValue = default(string?), string? expand = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get billing entitlements
        /// </summary>
        /// <remarks>
        /// Returns all the entitlements a billing customer currently has access to  &lt;div&gt;   &lt;code&gt;read:billing_entitlements&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The ID of the billing customer to retrieve entitlements for</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="startingAfter">The ID of the billing entitlement to start after. (optional)</param>
        /// <param name="endingBefore">The ID of the billing entitlement to end before. (optional)</param>
        /// <param name="maxValue">When the maximum limit of an entitlement is null, this value is returned as the maximum limit (optional)</param>
        /// <param name="expand">Specify additional plan data to retrieve. Use \&quot;plans\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBillingEntitlementsResponse</returns>
        ApiResponse<GetBillingEntitlementsResponse> GetBillingEntitlementsWithHttpInfo(string customerId, int? pageSize = default(int?), string? startingAfter = default(string?), string? endingBefore = default(string?), string? maxValue = default(string?), string? expand = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBillingEntitlementsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get billing entitlements
        /// </summary>
        /// <remarks>
        /// Returns all the entitlements a billing customer currently has access to  &lt;div&gt;   &lt;code&gt;read:billing_entitlements&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The ID of the billing customer to retrieve entitlements for</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="startingAfter">The ID of the billing entitlement to start after. (optional)</param>
        /// <param name="endingBefore">The ID of the billing entitlement to end before. (optional)</param>
        /// <param name="maxValue">When the maximum limit of an entitlement is null, this value is returned as the maximum limit (optional)</param>
        /// <param name="expand">Specify additional plan data to retrieve. Use \&quot;plans\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBillingEntitlementsResponse</returns>
        System.Threading.Tasks.Task<GetBillingEntitlementsResponse> GetBillingEntitlementsAsync(string customerId, int? pageSize = default(int?), string? startingAfter = default(string?), string? endingBefore = default(string?), string? maxValue = default(string?), string? expand = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get billing entitlements
        /// </summary>
        /// <remarks>
        /// Returns all the entitlements a billing customer currently has access to  &lt;div&gt;   &lt;code&gt;read:billing_entitlements&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The ID of the billing customer to retrieve entitlements for</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="startingAfter">The ID of the billing entitlement to start after. (optional)</param>
        /// <param name="endingBefore">The ID of the billing entitlement to end before. (optional)</param>
        /// <param name="maxValue">When the maximum limit of an entitlement is null, this value is returned as the maximum limit (optional)</param>
        /// <param name="expand">Specify additional plan data to retrieve. Use \&quot;plans\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBillingEntitlementsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBillingEntitlementsResponse>> GetBillingEntitlementsWithHttpInfoAsync(string customerId, int? pageSize = default(int?), string? startingAfter = default(string?), string? endingBefore = default(string?), string? maxValue = default(string?), string? expand = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBillingEntitlementsApi : IBillingEntitlementsApiSync, IBillingEntitlementsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BillingEntitlementsApi : IBillingEntitlementsApi
    {
        private Kinde.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingEntitlementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BillingEntitlementsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingEntitlementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BillingEntitlementsApi(string basePath)
        {
            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                new Kinde.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingEntitlementsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BillingEntitlementsApi(Kinde.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingEntitlementsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BillingEntitlementsApi(Kinde.Api.Client.ISynchronousClient client, Kinde.Api.Client.IAsynchronousClient asyncClient, Kinde.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kinde.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kinde.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kinde.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kinde.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get billing entitlements Returns all the entitlements a billing customer currently has access to  &lt;div&gt;   &lt;code&gt;read:billing_entitlements&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The ID of the billing customer to retrieve entitlements for</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="startingAfter">The ID of the billing entitlement to start after. (optional)</param>
        /// <param name="endingBefore">The ID of the billing entitlement to end before. (optional)</param>
        /// <param name="maxValue">When the maximum limit of an entitlement is null, this value is returned as the maximum limit (optional)</param>
        /// <param name="expand">Specify additional plan data to retrieve. Use \&quot;plans\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBillingEntitlementsResponse</returns>
        public GetBillingEntitlementsResponse GetBillingEntitlements(string customerId, int? pageSize = default(int?), string? startingAfter = default(string?), string? endingBefore = default(string?), string? maxValue = default(string?), string? expand = default(string?), int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<GetBillingEntitlementsResponse> localVarResponse = GetBillingEntitlementsWithHttpInfo(customerId, pageSize, startingAfter, endingBefore, maxValue, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get billing entitlements Returns all the entitlements a billing customer currently has access to  &lt;div&gt;   &lt;code&gt;read:billing_entitlements&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The ID of the billing customer to retrieve entitlements for</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="startingAfter">The ID of the billing entitlement to start after. (optional)</param>
        /// <param name="endingBefore">The ID of the billing entitlement to end before. (optional)</param>
        /// <param name="maxValue">When the maximum limit of an entitlement is null, this value is returned as the maximum limit (optional)</param>
        /// <param name="expand">Specify additional plan data to retrieve. Use \&quot;plans\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBillingEntitlementsResponse</returns>
        public Kinde.Api.Client.ApiResponse<GetBillingEntitlementsResponse> GetBillingEntitlementsWithHttpInfo(string customerId, int? pageSize = default(int?), string? startingAfter = default(string?), string? endingBefore = default(string?), string? maxValue = default(string?), string? expand = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'customerId' when calling BillingEntitlementsApi->GetBillingEntitlements");
            }

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startingAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "starting_after", startingAfter));
            }
            if (endingBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "ending_before", endingBefore));
            }
            localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            if (maxValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "max_value", maxValue));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "BillingEntitlementsApi.GetBillingEntitlements";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetBillingEntitlementsResponse>("/api/v1/billing/entitlements", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBillingEntitlements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get billing entitlements Returns all the entitlements a billing customer currently has access to  &lt;div&gt;   &lt;code&gt;read:billing_entitlements&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The ID of the billing customer to retrieve entitlements for</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="startingAfter">The ID of the billing entitlement to start after. (optional)</param>
        /// <param name="endingBefore">The ID of the billing entitlement to end before. (optional)</param>
        /// <param name="maxValue">When the maximum limit of an entitlement is null, this value is returned as the maximum limit (optional)</param>
        /// <param name="expand">Specify additional plan data to retrieve. Use \&quot;plans\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBillingEntitlementsResponse</returns>
        public async System.Threading.Tasks.Task<GetBillingEntitlementsResponse> GetBillingEntitlementsAsync(string customerId, int? pageSize = default(int?), string? startingAfter = default(string?), string? endingBefore = default(string?), string? maxValue = default(string?), string? expand = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<GetBillingEntitlementsResponse> localVarResponse = await GetBillingEntitlementsWithHttpInfoAsync(customerId, pageSize, startingAfter, endingBefore, maxValue, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get billing entitlements Returns all the entitlements a billing customer currently has access to  &lt;div&gt;   &lt;code&gt;read:billing_entitlements&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The ID of the billing customer to retrieve entitlements for</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="startingAfter">The ID of the billing entitlement to start after. (optional)</param>
        /// <param name="endingBefore">The ID of the billing entitlement to end before. (optional)</param>
        /// <param name="maxValue">When the maximum limit of an entitlement is null, this value is returned as the maximum limit (optional)</param>
        /// <param name="expand">Specify additional plan data to retrieve. Use \&quot;plans\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBillingEntitlementsResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<GetBillingEntitlementsResponse>> GetBillingEntitlementsWithHttpInfoAsync(string customerId, int? pageSize = default(int?), string? startingAfter = default(string?), string? endingBefore = default(string?), string? maxValue = default(string?), string? expand = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'customerId' when calling BillingEntitlementsApi->GetBillingEntitlements");
            }


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startingAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "starting_after", startingAfter));
            }
            if (endingBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "ending_before", endingBefore));
            }
            localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            if (maxValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "max_value", maxValue));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.Api.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "BillingEntitlementsApi.GetBillingEntitlements";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetBillingEntitlementsResponse>("/api/v1/billing/entitlements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBillingEntitlements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
