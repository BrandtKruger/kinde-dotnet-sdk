/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Kinde.Api.Client;
using Kinde.Api.Model;

namespace Kinde.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnvironmentVariablesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create environment variable
        /// </summary>
        /// <remarks>
        /// Create a new environment variable. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;create:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEnvironmentVariableRequest">The environment variable details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateEnvironmentVariableResponse</returns>
        CreateEnvironmentVariableResponse CreateEnvironmentVariable(CreateEnvironmentVariableRequest createEnvironmentVariableRequest, int operationIndex = 0);

        /// <summary>
        /// Create environment variable
        /// </summary>
        /// <remarks>
        /// Create a new environment variable. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;create:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEnvironmentVariableRequest">The environment variable details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateEnvironmentVariableResponse</returns>
        ApiResponse<CreateEnvironmentVariableResponse> CreateEnvironmentVariableWithHttpInfo(CreateEnvironmentVariableRequest createEnvironmentVariableRequest, int operationIndex = 0);
        /// <summary>
        /// Delete environment variable
        /// </summary>
        /// <remarks>
        /// Delete an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;delete:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteEnvironmentVariableResponse</returns>
        DeleteEnvironmentVariableResponse DeleteEnvironmentVariable(string variableId, int operationIndex = 0);

        /// <summary>
        /// Delete environment variable
        /// </summary>
        /// <remarks>
        /// Delete an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;delete:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteEnvironmentVariableResponse</returns>
        ApiResponse<DeleteEnvironmentVariableResponse> DeleteEnvironmentVariableWithHttpInfo(string variableId, int operationIndex = 0);
        /// <summary>
        /// Get environment variable
        /// </summary>
        /// <remarks>
        /// Retrieve environment variable details by ID. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEnvironmentVariableResponse</returns>
        GetEnvironmentVariableResponse GetEnvironmentVariable(string variableId, int operationIndex = 0);

        /// <summary>
        /// Get environment variable
        /// </summary>
        /// <remarks>
        /// Retrieve environment variable details by ID. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEnvironmentVariableResponse</returns>
        ApiResponse<GetEnvironmentVariableResponse> GetEnvironmentVariableWithHttpInfo(string variableId, int operationIndex = 0);
        /// <summary>
        /// Get environment variables
        /// </summary>
        /// <remarks>
        /// Get environment variables. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEnvironmentVariablesResponse</returns>
        GetEnvironmentVariablesResponse GetEnvironmentVariables(int operationIndex = 0);

        /// <summary>
        /// Get environment variables
        /// </summary>
        /// <remarks>
        /// Get environment variables. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEnvironmentVariablesResponse</returns>
        ApiResponse<GetEnvironmentVariablesResponse> GetEnvironmentVariablesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update environment variable
        /// </summary>
        /// <remarks>
        /// Update an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;update:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="updateEnvironmentVariableRequest">The new details for the environment variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateEnvironmentVariableResponse</returns>
        UpdateEnvironmentVariableResponse UpdateEnvironmentVariable(string variableId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, int operationIndex = 0);

        /// <summary>
        /// Update environment variable
        /// </summary>
        /// <remarks>
        /// Update an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;update:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="updateEnvironmentVariableRequest">The new details for the environment variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateEnvironmentVariableResponse</returns>
        ApiResponse<UpdateEnvironmentVariableResponse> UpdateEnvironmentVariableWithHttpInfo(string variableId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnvironmentVariablesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create environment variable
        /// </summary>
        /// <remarks>
        /// Create a new environment variable. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;create:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEnvironmentVariableRequest">The environment variable details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateEnvironmentVariableResponse</returns>
        System.Threading.Tasks.Task<CreateEnvironmentVariableResponse> CreateEnvironmentVariableAsync(CreateEnvironmentVariableRequest createEnvironmentVariableRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create environment variable
        /// </summary>
        /// <remarks>
        /// Create a new environment variable. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;create:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEnvironmentVariableRequest">The environment variable details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateEnvironmentVariableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateEnvironmentVariableResponse>> CreateEnvironmentVariableWithHttpInfoAsync(CreateEnvironmentVariableRequest createEnvironmentVariableRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete environment variable
        /// </summary>
        /// <remarks>
        /// Delete an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;delete:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteEnvironmentVariableResponse</returns>
        System.Threading.Tasks.Task<DeleteEnvironmentVariableResponse> DeleteEnvironmentVariableAsync(string variableId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete environment variable
        /// </summary>
        /// <remarks>
        /// Delete an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;delete:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteEnvironmentVariableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteEnvironmentVariableResponse>> DeleteEnvironmentVariableWithHttpInfoAsync(string variableId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get environment variable
        /// </summary>
        /// <remarks>
        /// Retrieve environment variable details by ID. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEnvironmentVariableResponse</returns>
        System.Threading.Tasks.Task<GetEnvironmentVariableResponse> GetEnvironmentVariableAsync(string variableId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get environment variable
        /// </summary>
        /// <remarks>
        /// Retrieve environment variable details by ID. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEnvironmentVariableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEnvironmentVariableResponse>> GetEnvironmentVariableWithHttpInfoAsync(string variableId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get environment variables
        /// </summary>
        /// <remarks>
        /// Get environment variables. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEnvironmentVariablesResponse</returns>
        System.Threading.Tasks.Task<GetEnvironmentVariablesResponse> GetEnvironmentVariablesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get environment variables
        /// </summary>
        /// <remarks>
        /// Get environment variables. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEnvironmentVariablesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEnvironmentVariablesResponse>> GetEnvironmentVariablesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update environment variable
        /// </summary>
        /// <remarks>
        /// Update an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;update:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="updateEnvironmentVariableRequest">The new details for the environment variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateEnvironmentVariableResponse</returns>
        System.Threading.Tasks.Task<UpdateEnvironmentVariableResponse> UpdateEnvironmentVariableAsync(string variableId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update environment variable
        /// </summary>
        /// <remarks>
        /// Update an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;update:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="updateEnvironmentVariableRequest">The new details for the environment variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateEnvironmentVariableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateEnvironmentVariableResponse>> UpdateEnvironmentVariableWithHttpInfoAsync(string variableId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnvironmentVariablesApi : IEnvironmentVariablesApiSync, IEnvironmentVariablesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnvironmentVariablesApi : IEnvironmentVariablesApi
    {
        private Kinde.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentVariablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnvironmentVariablesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentVariablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnvironmentVariablesApi(string basePath)
        {
            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                new Kinde.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentVariablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnvironmentVariablesApi(Kinde.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kinde.Api.Client.Configuration.MergeConfigurations(
                Kinde.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kinde.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentVariablesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EnvironmentVariablesApi(Kinde.Api.Client.ISynchronousClient client, Kinde.Api.Client.IAsynchronousClient asyncClient, Kinde.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kinde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kinde.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kinde.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kinde.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kinde.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create environment variable Create a new environment variable. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;create:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEnvironmentVariableRequest">The environment variable details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateEnvironmentVariableResponse</returns>
        public CreateEnvironmentVariableResponse CreateEnvironmentVariable(CreateEnvironmentVariableRequest createEnvironmentVariableRequest, int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<CreateEnvironmentVariableResponse> localVarResponse = CreateEnvironmentVariableWithHttpInfo(createEnvironmentVariableRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create environment variable Create a new environment variable. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;create:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEnvironmentVariableRequest">The environment variable details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateEnvironmentVariableResponse</returns>
        public Kinde.Api.Client.ApiResponse<CreateEnvironmentVariableResponse> CreateEnvironmentVariableWithHttpInfo(CreateEnvironmentVariableRequest createEnvironmentVariableRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createEnvironmentVariableRequest' is set
            if (createEnvironmentVariableRequest == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'createEnvironmentVariableRequest' when calling EnvironmentVariablesApi->CreateEnvironmentVariable");
            }

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEnvironmentVariableRequest;

            localVarRequestOptions.Operation = "EnvironmentVariablesApi.CreateEnvironmentVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateEnvironmentVariableResponse>("/api/v1/environment_variables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEnvironmentVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create environment variable Create a new environment variable. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;create:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEnvironmentVariableRequest">The environment variable details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateEnvironmentVariableResponse</returns>
        public async System.Threading.Tasks.Task<CreateEnvironmentVariableResponse> CreateEnvironmentVariableAsync(CreateEnvironmentVariableRequest createEnvironmentVariableRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<CreateEnvironmentVariableResponse> localVarResponse = await CreateEnvironmentVariableWithHttpInfoAsync(createEnvironmentVariableRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create environment variable Create a new environment variable. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;create:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEnvironmentVariableRequest">The environment variable details.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateEnvironmentVariableResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<CreateEnvironmentVariableResponse>> CreateEnvironmentVariableWithHttpInfoAsync(CreateEnvironmentVariableRequest createEnvironmentVariableRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createEnvironmentVariableRequest' is set
            if (createEnvironmentVariableRequest == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'createEnvironmentVariableRequest' when calling EnvironmentVariablesApi->CreateEnvironmentVariable");
            }


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEnvironmentVariableRequest;

            localVarRequestOptions.Operation = "EnvironmentVariablesApi.CreateEnvironmentVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateEnvironmentVariableResponse>("/api/v1/environment_variables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEnvironmentVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete environment variable Delete an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;delete:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteEnvironmentVariableResponse</returns>
        public DeleteEnvironmentVariableResponse DeleteEnvironmentVariable(string variableId, int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<DeleteEnvironmentVariableResponse> localVarResponse = DeleteEnvironmentVariableWithHttpInfo(variableId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete environment variable Delete an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;delete:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteEnvironmentVariableResponse</returns>
        public Kinde.Api.Client.ApiResponse<DeleteEnvironmentVariableResponse> DeleteEnvironmentVariableWithHttpInfo(string variableId, int operationIndex = 0)
        {
            // verify the required parameter 'variableId' is set
            if (variableId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'variableId' when calling EnvironmentVariablesApi->DeleteEnvironmentVariable");
            }

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("variable_id", Kinde.Api.Client.ClientUtils.ParameterToString(variableId)); // path parameter

            localVarRequestOptions.Operation = "EnvironmentVariablesApi.DeleteEnvironmentVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteEnvironmentVariableResponse>("/api/v1/environment_variables/{variable_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEnvironmentVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete environment variable Delete an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;delete:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteEnvironmentVariableResponse</returns>
        public async System.Threading.Tasks.Task<DeleteEnvironmentVariableResponse> DeleteEnvironmentVariableAsync(string variableId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<DeleteEnvironmentVariableResponse> localVarResponse = await DeleteEnvironmentVariableWithHttpInfoAsync(variableId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete environment variable Delete an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;delete:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteEnvironmentVariableResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<DeleteEnvironmentVariableResponse>> DeleteEnvironmentVariableWithHttpInfoAsync(string variableId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'variableId' is set
            if (variableId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'variableId' when calling EnvironmentVariablesApi->DeleteEnvironmentVariable");
            }


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("variable_id", Kinde.Api.Client.ClientUtils.ParameterToString(variableId)); // path parameter

            localVarRequestOptions.Operation = "EnvironmentVariablesApi.DeleteEnvironmentVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteEnvironmentVariableResponse>("/api/v1/environment_variables/{variable_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEnvironmentVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get environment variable Retrieve environment variable details by ID. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEnvironmentVariableResponse</returns>
        public GetEnvironmentVariableResponse GetEnvironmentVariable(string variableId, int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<GetEnvironmentVariableResponse> localVarResponse = GetEnvironmentVariableWithHttpInfo(variableId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get environment variable Retrieve environment variable details by ID. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEnvironmentVariableResponse</returns>
        public Kinde.Api.Client.ApiResponse<GetEnvironmentVariableResponse> GetEnvironmentVariableWithHttpInfo(string variableId, int operationIndex = 0)
        {
            // verify the required parameter 'variableId' is set
            if (variableId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'variableId' when calling EnvironmentVariablesApi->GetEnvironmentVariable");
            }

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("variable_id", Kinde.Api.Client.ClientUtils.ParameterToString(variableId)); // path parameter

            localVarRequestOptions.Operation = "EnvironmentVariablesApi.GetEnvironmentVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEnvironmentVariableResponse>("/api/v1/environment_variables/{variable_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEnvironmentVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get environment variable Retrieve environment variable details by ID. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEnvironmentVariableResponse</returns>
        public async System.Threading.Tasks.Task<GetEnvironmentVariableResponse> GetEnvironmentVariableAsync(string variableId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<GetEnvironmentVariableResponse> localVarResponse = await GetEnvironmentVariableWithHttpInfoAsync(variableId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get environment variable Retrieve environment variable details by ID. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEnvironmentVariableResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<GetEnvironmentVariableResponse>> GetEnvironmentVariableWithHttpInfoAsync(string variableId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'variableId' is set
            if (variableId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'variableId' when calling EnvironmentVariablesApi->GetEnvironmentVariable");
            }


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("variable_id", Kinde.Api.Client.ClientUtils.ParameterToString(variableId)); // path parameter

            localVarRequestOptions.Operation = "EnvironmentVariablesApi.GetEnvironmentVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEnvironmentVariableResponse>("/api/v1/environment_variables/{variable_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEnvironmentVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get environment variables Get environment variables. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEnvironmentVariablesResponse</returns>
        public GetEnvironmentVariablesResponse GetEnvironmentVariables(int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<GetEnvironmentVariablesResponse> localVarResponse = GetEnvironmentVariablesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get environment variables Get environment variables. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEnvironmentVariablesResponse</returns>
        public Kinde.Api.Client.ApiResponse<GetEnvironmentVariablesResponse> GetEnvironmentVariablesWithHttpInfo(int operationIndex = 0)
        {
            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EnvironmentVariablesApi.GetEnvironmentVariables";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEnvironmentVariablesResponse>("/api/v1/environment_variables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEnvironmentVariables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get environment variables Get environment variables. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEnvironmentVariablesResponse</returns>
        public async System.Threading.Tasks.Task<GetEnvironmentVariablesResponse> GetEnvironmentVariablesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<GetEnvironmentVariablesResponse> localVarResponse = await GetEnvironmentVariablesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get environment variables Get environment variables. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEnvironmentVariablesResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<GetEnvironmentVariablesResponse>> GetEnvironmentVariablesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EnvironmentVariablesApi.GetEnvironmentVariables";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEnvironmentVariablesResponse>("/api/v1/environment_variables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEnvironmentVariables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update environment variable Update an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;update:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="updateEnvironmentVariableRequest">The new details for the environment variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateEnvironmentVariableResponse</returns>
        public UpdateEnvironmentVariableResponse UpdateEnvironmentVariable(string variableId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, int operationIndex = 0)
        {
            Kinde.Api.Client.ApiResponse<UpdateEnvironmentVariableResponse> localVarResponse = UpdateEnvironmentVariableWithHttpInfo(variableId, updateEnvironmentVariableRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update environment variable Update an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;update:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="updateEnvironmentVariableRequest">The new details for the environment variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateEnvironmentVariableResponse</returns>
        public Kinde.Api.Client.ApiResponse<UpdateEnvironmentVariableResponse> UpdateEnvironmentVariableWithHttpInfo(string variableId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, int operationIndex = 0)
        {
            // verify the required parameter 'variableId' is set
            if (variableId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'variableId' when calling EnvironmentVariablesApi->UpdateEnvironmentVariable");
            }

            // verify the required parameter 'updateEnvironmentVariableRequest' is set
            if (updateEnvironmentVariableRequest == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'updateEnvironmentVariableRequest' when calling EnvironmentVariablesApi->UpdateEnvironmentVariable");
            }

            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("variable_id", Kinde.Api.Client.ClientUtils.ParameterToString(variableId)); // path parameter
            localVarRequestOptions.Data = updateEnvironmentVariableRequest;

            localVarRequestOptions.Operation = "EnvironmentVariablesApi.UpdateEnvironmentVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateEnvironmentVariableResponse>("/api/v1/environment_variables/{variable_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEnvironmentVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update environment variable Update an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;update:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="updateEnvironmentVariableRequest">The new details for the environment variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateEnvironmentVariableResponse</returns>
        public async System.Threading.Tasks.Task<UpdateEnvironmentVariableResponse> UpdateEnvironmentVariableAsync(string variableId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.Api.Client.ApiResponse<UpdateEnvironmentVariableResponse> localVarResponse = await UpdateEnvironmentVariableWithHttpInfoAsync(variableId, updateEnvironmentVariableRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update environment variable Update an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;update:environment_variables&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="Kinde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableId">The environment variable&#39;s ID.</param>
        /// <param name="updateEnvironmentVariableRequest">The new details for the environment variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateEnvironmentVariableResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.Api.Client.ApiResponse<UpdateEnvironmentVariableResponse>> UpdateEnvironmentVariableWithHttpInfoAsync(string variableId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'variableId' is set
            if (variableId == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'variableId' when calling EnvironmentVariablesApi->UpdateEnvironmentVariable");
            }

            // verify the required parameter 'updateEnvironmentVariableRequest' is set
            if (updateEnvironmentVariableRequest == null)
            {
                throw new Kinde.Api.Client.ApiException(400, "Missing required parameter 'updateEnvironmentVariableRequest' when calling EnvironmentVariablesApi->UpdateEnvironmentVariable");
            }


            Kinde.Api.Client.RequestOptions localVarRequestOptions = new Kinde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kinde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kinde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("variable_id", Kinde.Api.Client.ClientUtils.ParameterToString(variableId)); // path parameter
            localVarRequestOptions.Data = updateEnvironmentVariableRequest;

            localVarRequestOptions.Operation = "EnvironmentVariablesApi.UpdateEnvironmentVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateEnvironmentVariableResponse>("/api/v1/environment_variables/{variable_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEnvironmentVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
