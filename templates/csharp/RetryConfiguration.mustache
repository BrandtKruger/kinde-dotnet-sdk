{{>partial_header}}

using Polly;
{{#useRestSharp}}
using RestSharp;
{{/useRestSharp}}
{{#useHttpClient}}
using System.Net.Http;
{{/useHttpClient}}

namespace {{packageName}}.Client
{
    /// <summary>
    /// Configuration class to set the polly retry policies to be applied to the requests.
    /// </summary>
    public static class RetryConfiguration
    {
{{#useRestSharp}}
        /// <summary>
        /// Retry policy
        /// </summary>
        private static Policy<RestResponse> _retryPolicy = Policy.NoOp<RestResponse>();
        public static Policy<RestResponse> RetryPolicy
        {
            get => _retryPolicy;
            set => _retryPolicy = value ?? Policy.NoOp<RestResponse>();
        }

        /// <summary>
        /// Async retry policy
        /// </summary>
        private static AsyncPolicy<RestResponse> _asyncRetryPolicy = Policy.NoOpAsync<RestResponse>();
        public static AsyncPolicy<RestResponse> AsyncRetryPolicy
        {
            get => _asyncRetryPolicy;
            set => _asyncRetryPolicy = value ?? Policy.NoOpAsync<RestResponse>();
        }
{{/useRestSharp}}
{{#useHttpClient}}
        /// <summary>
        /// Retry policy
        /// </summary>
        private static Policy<HttpResponseMessage> _retryPolicy = Policy.NoOp<HttpResponseMessage>();
        public static Policy<HttpResponseMessage> RetryPolicy
        {
            get => _retryPolicy;
            set => _retryPolicy = value ?? Policy.NoOp<HttpResponseMessage>();
        }

        /// <summary>
        /// Async retry policy
        /// </summary>
        private static AsyncPolicy<HttpResponseMessage> _asyncRetryPolicy = Policy.NoOpAsync<HttpResponseMessage>();
        public static AsyncPolicy<HttpResponseMessage> AsyncRetryPolicy
        {
            get => _asyncRetryPolicy;
            set => _asyncRetryPolicy = value ?? Policy.NoOpAsync<HttpResponseMessage>();
        }
{{/useHttpClient}}
    }
}
