// <auto-generated>
{{>partial_header}}
{{#nrt}}
#nullable enable

{{/nrt}}
using System;
using System.Net.Http.Headers;

namespace {{packageName}}.{{clientPackage}}
{
    /// <summary>
    /// A token constructed from an apiKey.
    /// </summary>
    {{>visibility}} class ApiKeyToken : TokenBase
    {
        private readonly string _value;
        private readonly string _prefix;
        private readonly string _raw;

        /// <summary>
        /// Constructs an ApiKeyToken object.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="prefix"></param>
        /// <param name="timeout"></param>
        public ApiKeyToken(string value, string prefix = "Bearer ", TimeSpan? timeout = null) : base(timeout)
        {
            if (string.IsNullOrWhiteSpace(value))
                throw new ArgumentException("API key value cannot be null or whitespace.", nameof(value));
            _value = value;
            _prefix = prefix ?? string.Empty;
            _raw = $"{_prefix}{_value}";
        }

        /// <summary>
        /// Places the token in the header.
        /// </summary>
        /// <param name="request"></param>
        /// <param name="headerName"></param>
        public virtual void UseInHeader(System.Net.Http.HttpRequestMessage request, string headerName)
        {
            if (request is null) throw new ArgumentNullException(nameof(request));
            if (string.IsNullOrWhiteSpace(headerName)) throw new ArgumentException("Header name cannot be null or whitespace.", nameof(headerName));

            if (string.Equals(headerName, "Authorization", StringComparison.OrdinalIgnoreCase))
            {
                var scheme = _prefix?.TrimEnd() ?? string.Empty;
                if (scheme.Length == 0) throw new ArgumentException("Authorization header requires a non-empty scheme/prefix.", nameof(headerName));
                request.Headers.Authorization = new AuthenticationHeaderValue(scheme, _value);
            }
            else
            {
                request.Headers.TryAddWithoutValidation(headerName, _raw);
            }
        }
        
        /// <summary>
        /// Places the token in the query.
        /// </summary>
        /// <param name="request"></param>
        /// <param name="uriBuilder"></param>
        /// <param name="parseQueryString"></param>
        /// <param name="parameterName"></param>
        public virtual void UseInQuery(System.Net.Http.HttpRequestMessage request, UriBuilder uriBuilder, System.Collections.Specialized.NameValueCollection parseQueryString, string parameterName)
        {
            if (uriBuilder is null) throw new ArgumentNullException(nameof(uriBuilder));
            if (parseQueryString is null) throw new ArgumentNullException(nameof(parseQueryString));
            if (string.IsNullOrWhiteSpace(parameterName))
                throw new ArgumentException("Parameter name cannot be null or whitespace.", nameof(parameterName));
            parseQueryString[parameterName] = Uri.EscapeDataString(_value);
            uriBuilder.Query = parseQueryString.ToString();
        }
    }
}