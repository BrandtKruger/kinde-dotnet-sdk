{{>partial_header}}
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace {{packageName}}.Client
{
    /// <summary>
    /// Formatter for the OpenAPI 'date' format as defined by full-date (RFC 3339)
    /// see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#data-types
    /// </summary>
    {{>visibility}} class DateTimeJsonConverter : JsonConverter<DateTime>
    {
        /// <summary>
        /// The formats used to deserialize the date
        /// </summary>
        public static IReadOnlyList<string> Formats { get; } = new[] {
{{>DateTimeFormats}}
        };

        /// <summary>
        /// Returns a DateTime from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            if (reader.TokenType == JsonTokenType.Null)
                throw new JsonException("Null token for non-nullable DateTime.");
            if (reader.TokenType != JsonTokenType.String)
                throw new JsonException($"Expected string token but found {reader.TokenType}.");

            var value = reader.GetString(){{nrt!}};

            foreach (var format in Formats)
            {
                if (DateTime.TryParseExact(value, format, CultureInfo.InvariantCulture,
                    DateTimeStyles.None, out var result))
                    return result;
            }

            throw new JsonException($"Unable to parse date/time '{value}'. Expected one of: {string.Join(", ", Formats)}.");
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dateTimeValue"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DateTime dateTimeValue, JsonSerializerOptions options) =>
            writer.WriteStringValue(dateTimeValue.ToString("{{{dateFormat}}}", CultureInfo.InvariantCulture));
    }
}
