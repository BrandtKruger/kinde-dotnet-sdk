#!/usr/bin/env bash
set -Eeuo pipefail
# ref: https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
#
# Usage example: /bin/sh ./git_push.sh wing328 openapi-petstore-perl "minor update" "gitlab.com"

git_user_id=${1:-{{{gitUserId}}}}
git_repo_id=${2:-{{{gitRepoId}}}}
release_note=${3:-{{{releaseNote}}}}
git_host=${4:-{{{gitHost}}}}

starting_directory=$(pwd)
script_root="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
cd $script_root
cd ../..

if [ -z "$release_note" ] || [ "$release_note" = "Minor update" ]; then
  if [ -t 0 ]; then
    echo "Please provide a commit message or press enter"
    read -r user_input || true
    release_note="${user_input:-no message provided}"
  else
    release_note="no message provided"
  fi
fi

# Abort if template placeholders remain
case "$git_host$git_user_id$git_repo_id$release_note" in
  *"{{"*"}}"*) echo "[ERROR] Unresolved template placeholders detected. Aborting."; exit 1;;
esac

# Initialize and commit
default_branch="${INIT_DEFAULT_BRANCH:-$(git config --get init.defaultBranch || echo main)}"
git init -b "$default_branch" 2>/dev/null || git init
git add -A
# Commit staged changes (allow empty so initial branch exists)
if git diff --cached --quiet; then
  git commit --allow-empty -m "$release_note"
else
  git commit -m "$release_note"
fi
branch_name="$(git symbolic-ref --short -q HEAD || echo "$default_branch")"

# Configure remote if missing
if ! git remote get-url origin >/dev/null 2>&1; then # origin not defined
  echo "[INFO] Using the git credential in your environment."
  git remote add origin "https://${git_host}/${git_user_id}/${git_repo_id}.git"
fi

# Optional GitHub auth bootstrap (keeps tokens out of remotes)
if [ "$git_host" = "github.com" ] && [ -n "${GIT_TOKEN:-}" ] && command -v gh >/dev/null 2>&1; then
  printf '%s\n' "$GIT_TOKEN" | gh auth login --hostname github.com --with-token >/dev/null 2>&1 || true
  gh auth setup-git >/dev/null 2>&1 || true
fi

# Try pulling; if it fails because the branch doesnâ€™t exist, create the repo via gh
echo "[INFO] Syncing with https://${git_host}/${git_user_id}/${git_repo_id}.git"
if git ls-remote --exit-code --heads origin "$branch_name" >/dev/null 2>&1; then
    git pull --ff-only origin "$branch_name"
elif [ "$git_host" = "github.com" ]; then
    if ! command -v gh >/dev/null 2>&1; then
        echo "[ERROR] GitHub CLI (gh) not found. Install https://cli.github.com/ or create the repo manually." >&2
        exit 1
    fi
    echo "[INFO] Creating https://github.com/$git_user_id/$git_repo_id via GitHub CLI."
    gh repo create "$git_user_id/$git_repo_id" --private -y --source . --remote origin
fi

# Push changes
echo "[INFO] Pushing to https://${git_host}/${git_user_id}/${git_repo_id}.git"
git push origin "$branch_name"

cd $starting_directory
