#!/bin/sh
set -euo pipefail
# ref: https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
#
# Usage example: /bin/sh ./git_push.sh wing328 openapi-petstore-perl "minor update" "gitlab.com"

git_user_id=${1:-{{{gitUserId}}}}
git_repo_id=${2:-{{{gitRepoId}}}}
release_note=${3:-{{{releaseNote}}}}
git_host=${4:-{{{gitHost}}}}

starting_directory=$(pwd)
script_root="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
cd $script_root
cd ../..

if [ "$release_note" = "" ] || [ "$release_note" = "Minor update" ]; then
    # it seems unlikely that we would want our git commit message to be the default, so lets prompt the user
    echo "Please provide a commit message or press enter"
    read user_input
    release_note=$user_input
    if [ "$release_note" = "" ]; then
        release_note="no message provided"
    fi
fi

# Abort if template placeholders remain
case "$git_host$git_user_id$git_repo_id$release_note" in
  *"{{"*"}}"*) echo "[ERROR] Unresolved template placeholders detected. Aborting."; exit 1;;
esac

# Initialize and commit
git init
git add .
# Commit staged changes (allow empty so initial branch exists)
if git diff --cached --quiet; then
  git commit --allow-empty -m "$release_note"
else
  git commit -m "$release_note"
fi
branch_name=$(git rev-parse --abbrev-ref HEAD)

# Configure remote if missing
if ! git remote get-url origin >/dev/null 2>&1; then # origin not defined
    if [ "${GIT_TOKEN:-}" = "" ]; then
        echo "[INFO] Using the git credential in your environment."
        git remote add origin https://${git_host}/${git_user_id}/${git_repo_id}.git
    else
        git remote add origin https://${git_user_id}:"${GIT_TOKEN}"@${git_host}/${git_user_id}/${git_repo_id}.git
    fi
fi

# Try pulling; if it fails and host is GitHub, try to create the repo via gh
echo "[INFO] Pulling from https://${git_host}/${git_user_id}/${git_repo_id}.git"
if git pull origin "$branch_name" --ff-only; then
    :
else
    if [ "$git_host" = "github.com" ]; then
        if ! command -v gh >/dev/null 2>&1; then
            echo "[ERROR] GitHub CLI (gh) not found. Install https://cli.github.com/ or create the repo manually." >&2
            exit 1
        fi
        echo "[INFO] Creating https://github.com/$git_user_id/$git_repo_id via GitHub CLI."
        gh repo create "$git_user_id/$git_repo_id" --private -y --source . --remote origin
        # sleep 2 seconds to ensure git finishes creation of the repo
        sleep 2
    fi
fi

# Push changes
echo "[INFO] Pushing to https://${git_host}/${git_user_id}/${git_repo_id}.git"
git push origin "$branch_name"

cd $starting_directory
